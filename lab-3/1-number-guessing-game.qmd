---
title: "Page 1: Starting a Number Guessing Game"
subtitle: "Lab 3, Page 1"
order: 1
---

::: learn
<p><strong>In this lab,</strong> you will use local and global <em>variables</em> to store information.</p>

<p><strong>On this page,</strong> you will begin to develop a number guessing game that uses a <em>variable</em> to keep track of a secret number.</p>
:::

<!--<h2>Using a Script Variable (a Local Variable)</h2>-->

::: {#first .forYouToDo}
<ol>

<li>

::: newProject
["L3-NumberGuessing"]{.text}<img src="/img/icons/new-project-called.png" title="Create a new project called L3-NumberGuessing" alt="Create a new project called L3-NumberGuessing"/>
:::

</li>

<li>Start building a new command block called <code>number guessing game</code> that will contain the code for the game. Leave the Block Editor open.</li>

</ol>
:::

<p>In a number-guessing game, the player tries to guess the computer's secret number. The computer needs a way to store the secret number in a <em>variable</em> so that it can compare it to the player's guesses.<br /> <img src="/img/2-complexity/script-variables-secret-number.png" title="script variables (secret number)" alt="script variables (secret number)" class="indent"/></p>

::: vocabFullWidth
: <strong>Variable</strong>

<p>A <strong>variable</strong> is like a labeled box that can hold one value at a time, such as one word, one costume, or one list (which can contain many things). You can look at what's inside as many times as you want.</p>

::: endnote
On <a href="/lab-2/4-gossip.html" title="Lab 2 Page 4: Making Programs Talk">Lab 2 Page 2: Making Programs Talk</a>, you learned about <em>procedural abstraction:</em> giving scripts names by putting them in new blocks. Here, we are starting to look at <em>data abstraction</em>, giving names to numbers, text, lists, etc. When you give something a name, you can refer to it without knowing exactly what the value is.
:::
:::

::: {.forYouToDo style="clear: right;"}
<ol start="3">

<li>

Create a script variable called <var>secret number</var> to store the number that the player will try to guess (instructions below).

::: narrower
<h3><strong>Making a Script Variable</strong></h3>

<ol type="a">

<li><strong>Move a <code>script variables</code> block into the Scripting Area.</strong> You can find it in the Variables palette.<br /> <img src="/img/prog/scriptvar.png" title="script variables" alt="script variables" class="indent"/></li>

<li><strong>Name the variable</strong> by clicking on the orange <var>a</var> at the end and typing the name you want. Here, it should be called <var>secret number</var>.</li>

</ol>

<strong>Later, you will use the script variable</strong> by dragging it out of the <code>script variables</code> block (the way you drag an input) and placing it where you need it in your code.
:::

</li>

<li>

::: comment
AAP-1.A, AAP-3.E
:::

Use <img src="/img/blocks/set-empty.png" title="set () to ()" alt="set () to ()" class="inline nopadtb"/> to set the initial value of <var>secret number</var> to a random number from 1 to 10. The <code>set</code> menu lets you select which variable to set. <br />

::: sidenoteBig
The variable <var>secret number</var> is available in the <code>set</code> block only when you snap it somewhere after the <code>script variables</code> block.
:::

<img src="/img/2-complexity/set-secret-number-menu.jpg" title="set block menu selecting secret number" alt="set block menu selecting secret number" class="indent"/>

</li>

</ol>
:::


<p>Script variables are a kind of <em>local variable</em>; they work only within the script where they're created. If you drag one into a different script, it won't work.</p>

::: vocabFullWidth
: <strong>Local Variable</strong>

<p>A <strong>local variable</strong> can be set or used only in the environment in which it is defined. This term includes inputs to procedures and variables created by the <code>for</code> or <code>script variables</code> block.</p>
:::

::: endnote
<p>In algebra, a variable is sometimes used for something whose value you don't know yet, and the goal is to find out its value. In programming <em>you decide</em> the values of variables.</p>
:::

::: sidenote
You learned about input variables on <a href="/lab-2/2-keeping-score.html" title="Lab 2 Page 2: Keeping Score with Global Variables">Lab 2 Page 2: Keeping Score with Global Variables</a>.
:::

::: pseudop
When you assign a value to a variable, the variable holds that value, not where it came from. For example, if <var>apples</var> = 2 and you <img src="/img/2-complexity/set-bananas-to-apples.png" title="set (bananas) to (apples)" alt="set (bananas) to (apples)"/>, then <var>bananas</var> will hold the value 2 and have no memory of it having come from <var>apples</var>. This is why

```{=html}
<pre class="inline">a &larr; a * 2</pre>
```
means something. (Suppose <var>a</var> = 8. First compute the value of

```{=html}
<pre class="inline">a * 2</pre>
```
, namely 16, and then replace the old value of <var>a</var> with 16). Up to now, the only variables you've used are input variables, and you never assign a value to an input because the value is given by the code that calls it. But a script variable won't have a value until you give it one with <code>set</code>.
:::
