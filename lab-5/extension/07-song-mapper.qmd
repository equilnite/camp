---
title: "Page 7: Song <code>Map</code>per"
subtitle: "Lab 5, Page 7"
---

::: todo
MARY TODO: add a reminder about how the blank in the functional input to MAP works. --MF, 2/27/22
:::

::: learn
In this activity, you will use the <code>map</code> block to transpose (shift) all the pitches in your song.
:::

::: todo
<p>Pamela, I debated whether to teach the ADT first so they can traverse a 2D list or to show them how to use MAP to transpose first. I went with MAP first and letting 2D lists/ADTs be a later optional page (perhaps not even to be written now or perhaps just a "Take It Further" on the last page) since the goal of the course is functional, and MAP would align with that. There is no real need to teach ADTs although the context does naturally inspire it. --MF, 2/12/22</p>
:::

::: todo
<p>When transposing a song, it's especially important not to call MIDI note numbers "pitch." The actual pitches are in a geometric progression, not a linear one, and when you transpose by <i>n</i> steps you're actually <em>multiplying</em> the pitches by [(\sqrt[12]{2})\^n]{.katex}. --bh 3/3/22</p>

<p>I agree to rename the variable for next year. --MF, 3/6/22</p>
:::

<p>Another advantage of using a list to store your notes is that you can use higher order functions to process your list. You can use <code>map</code> to play a song higher or lower than the original pitches.<br /> <img src="/img/U2/lab01/map-plus-3-over-notes-list.png" title="map (( ) + (3)) over (list ((64) (62) (60) (62) (64) (64) (64))) reporting the list 67, 65, 63, 65, 67, 67, 67" alt="map (( ) + (3)) over (list ((64) (62) (60) (62) (64) (64) (64))) reporting the list 67, 65, 63, 65, 67, 67, 67" class="indent"/></p>

<p>If you store the list of pitches in a variable, you can use <code>play song</code> together with <code>map</code> to play the same song several times in different ways.<br /> <a class="js-run snap-project" href="/prog/lab-5/sample-song-player-mary-lamb-map.xml" title="Sample Song Player: Mary Had a Little Lamb MAP example - Snap! project" target="_blank"> <img src="/img/U2/lab01/mary-lamb-map-script.png" title="set (&apos;Mary Had a Little Lamb&apos;) to list ((64) (62) (60) (62) (64) (64) (64))
play song (Mary Had a Little Lamb)
play song (map (( ) + (3)) over (Mary Had a Little Lamb))" alt="set (&apos;Mary Had a Little Lamb&apos;) to list ((64) (62) (60) (62) (64) (64) (64))
play song (Mary Had a Little Lamb)
play song (map (( ) + (3)) over (Mary Had a Little Lamb))" class="indent"/> </a></p>

::: forYouToDo
<ol>

<li><img src="/img/icons/headphones-mini.png" title="Set Up Your Headphones or Speakers" alt="Set Up Your Headphones or Speakers" class="imageRight"/> Open this <a class="js-run snap-project" href="/prog/lab-5/sample-song-player-mary-lamb-map.xml" title="Sample Song Player: Mary Had a Little Lamb MAP example - Snap! project" target="_blank">Mary Had a Little Lamb <code>map</code> example</a>. Click each block to: set the variable, play the song, and then play the transposed (shifted) song.</li>

<li>Try changing the <em>shift</em> (the second input to the <code>+</code> function in the <code>map</code> block) from 3 to some other integer. (You can make it any integer---positive or negative---but if it's too high or low, you won't be able to hear the song).</li>

</ol>
:::

::: comment
Do they know the word "apply" in this sense? -bh

<p>See 1.4.4. --MF, 3/6/22</p>
:::

<p>The <code>map</code> block takes two inputs: a function (in this case <img src="/img/U2/lab01/plus-3.png" title="( ) + (3)" alt="( ) + (3)" class="inline nopadtb"/>) and a list, applies the function to each item in the list, and reports a new list of the results.</p>

::: vocabFullWidth
<p>Recall, a function that takes a function as input (like <code>map</code>) is called a <strong>higher order function</strong>.</p>
:::

::: forYouToDo
<ol start="3">

<li>Open this <a class="js-run snap-project" href="/prog/lab-5/sample-song-player-twinkle-twinkle-map.xml" title="Sample Song Player: Twinkle Twinkle Little Star MAP example - Snap! project" target="_blank">Twinkle Twinkle Little Star <code>map</code> example</a>, and play the song.<br /></li>

::: endnote
Remember, you can turn on Visible Stepping (<img src="/img/2-complexity/visible-stepping.png" title="Visible Stepping button with two footprints" alt="Visible Stepping button with two footprints" class="inline nopadtb"/>) to see which block is running as it runs.
:::

<li>Modify this song by adding additional <code>play song</code> blocks, changing the shift values in the <code>map</code> blocks, or changing the pitches in the song.</li>

<li><img src="/img/icons/save-now.png" title="Now Is a Good Time to Save" alt="Now Is a Good Time to Save" class="inline"/></li>

</ol>
:::

::: {.ifTime .show}
<ol start="6">

<li>

<img src="/img/icons/save-mini.png" title="Now Is a Good Time to Save" alt="Now Is a Good Time to Save" class="imageRight"/>

::: todo
"Your latest project" should be more specific. -bh 3/3/22
:::

Open your latest project in Snap<em>!</em>, and use <code>map</code> and <code>play song</code> together with one of the variables that you used to store your pitches to make your song more complex.

</li>

<li>Add additional variables to store different verses, and create more interesting music.</li>

::: todo
I'm not sure what this bullet ("additional variables") is suggesting I do. Add more verses? -pf 3/6/22

<p>Better? --MF, 3/7/22</p>
:::

<li>

In this activity, you changed the pitches by adding or subtracting, but you could also multiply or divide. Try it and see what happens!

::: endnote
You can pull the <code>map</code> block out of the <code>play song with pitches and beats</code> block temporarily and then click it to see what values it reports.
:::

</li>

</ol>
:::

::: learn
In this activity, you used the higher order function <code>map</code> to transpose lists of pitches stored in variables and create more complex music.
:::
