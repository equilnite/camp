---
title: "Page 8: Songs with Pitches <em>and</em> Beats"
subtitle: "Lab 5, Page 8"
---

::: todo
Consider that students don't always have to download a new XML; they could just import blocks into existing projects. --MF
:::

::: learn
In this activity, you will learn to store and play songs with both pitch and length of each note.
:::

<p>So far, you've been using a <code>play song</code> block that only lets you control the pitch of each note (by giving it a list of pitches as input). The number of beats was the same based on whatever you typed into the <code>play ♪</code> block inside your <code>play song</code> block (for example, 0.5 in the image below).<br /> <img src="/img/U2/lab01/play-song-definition.png" title="/img/U2/lab01/play-song-definition.png" alt="play song (pitches) {
for each (pitche) in (pitches) {
play ♪ pitch: (pitch) beats: (0.5)
}
}" class="indent"/></p>

<p>You can use a table to store the data for every note and then use <code>play song with pitches and beats</code>, which expects music data <em>in a table</em>, to play the song. Each item in the list below is a new block: <img src="/img/U2/lab01/note-pitch-beats.png" title="♪ pitch: () beats: ()" alt="♪ pitch: () beats: ()" class="inline nopadtb"/>. It looks like the <code>play ♪</code> command, but it's a reporter that reports the pitch and beat.<br /> <img src="/img/U2/lab01/set-mario-beats.png" title="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" alt="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" class="indent"/> <img src="/img/U2/lab01/mario-beats-watcher.png" title="watcher for the &apos;Mario Theme (with beats)&apos; variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)" alt="watcher for the &apos;Mario Theme (with beats)&apos; variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)" class="indent noshadow"/> <img src="/img/U2/lab01/play-song-beats-mario.png" title="play song with pitches and beats (&apos;Mario Theme (with beats)&apos;)" alt="play song with pitches and beats (&apos;Mario Theme (with beats)&apos;)" class="indent"/></p>

::: todo
<p>The introduction of an ADT that's used throughout this activity can't be inside a hint inside a yellow "optional" box! Also, they've seen abstract data types before, no? If so, there should be a reference back to their introduction. If this <em>is</em> their introduction, it needs much more explicit calling out as a Big Idea. --bh 3/3/22</p>

<p>We've agreed not to <em>teach</em> ADTs at all in this course. We are only <em>using</em> them here (with the option to learn more). You can reopen this decision if you like, of course, but that has been the agreement so far. --MF, 3/6/22</p>
:::

::: endnote
<p><a href="#hint-play-beats" data-bs-toggle="collapse" title="How does the PLAY SONG WITH PITCHES AND BEATS block work?">How does the <code>play song with pitches and beats</code> block work?</a></p>

::: {#hint-play-beats .collapse}
<p>This block takes a table of pitch and beat values as input, and for each note in the song, it plays the pitch and beat values for that note:<br /> <img src="/img/U2/lab01/play-song-beats-definition.png" title="play song with pitches and beats (song) {
for each (♪) in (song) {
play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))
}
}" alt="play song with pitches and beats (song) {
for each (♪) in (song) {
play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))
}
}" class="indent"/></p>

<p><a href="#hint-block-vars" data-bs-toggle="collapse" title="Which part of the data is the song and which part is the ♪?">Which part is the <var>song</var> and which part is the <var>♪</var>?</a></p>

::: {#hint-block-vars .collapse}
<img src="/img/U2/lab01/mario-beats-watcher-labeled.gif" title="watcher for the &apos;Mario Theme (with beats)&apos; variable showing a table with two columns and eleven rows. The entire table is labeled &apos;song&apos; and a single row is labeled &apos;♪&apos;. An animation cycles through the rows showing each row labeled &apos;♪&apos; one after another." alt="watcher for the &apos;Mario Theme (with beats)&apos; variable showing a table with two columns and eleven rows. The entire table is labeled &apos;song&apos; and a single row is labeled &apos;♪&apos;. An animation cycles through the rows showing each row labeled &apos;♪&apos; one after another." class="noshadow indent"/>
:::

<p>

The data about each note is loaded in to a table using the <code>♪ pitch beats</code> block, which takes a pitch and number of beats as input and reports a list with those two values:<br /> <img src="/img/U2/lab01/note-pitch-beats-definition.png" title="♪ pitch: (pitch) beats: (beats) {
report (list (pitch) (beats))
}" alt="♪ pitch: (pitch) beats: (beats) {
report (list (pitch) (beats))
}" class="indent"/> <img src="/img/U2/lab01/note-pitch-beats-reporting.png" title="♪ pitch: (64) beats: (0.25) reporting the list 64, 0.25" alt="♪ pitch: (64) beats: (0.25) reporting the list 64, 0.25" class="indent"/>

<p><a href="#hint-loading" data-bs-toggle="collapse" title="How is the data loaded into a table with the ♪ PITCH BEATS block?">How is the data loaded into a table with the <code>♪ pitch beats</code> block?</a></p>

::: {#hint-loading .collapse}
<img src="/img/U2/lab01/set-mario-beats.png" title="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" alt="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" class="indent"/>
:::

</p>

<p>Each note (<var>♪</var>) in the song now has both pitch and beat information, and <code>play ♪</code> needs to receive those data in separate input slots. The <img src="/img/U2/lab01/pitch.png" title="pitch from ♪" alt="pitch from ♪" class="inline nopadtb"/> and <img src="/img/U2/lab01/beats.png" title="beats from ♪" alt="beats from ♪" class="inline nopadtb"/> blocks each take a note (<var>♪</var>) as input and report only one piece of information to the <code>play ♪</code> block.<br /> <img src="/img/U2/lab01/pitch-definition.png" title="pitch (♪) {
report (item (1) of (♪))
}" alt="pitch (♪) {
report (item (1) of (♪))
}" class="indent"/> <img src="/img/U2/lab01/beats-definition.png" title="beats (♪) {
report (item (2) of (♪))
}" alt="beats (♪) {
report (item (2) of (♪))
}" class="indent"/></p>

<p>So, <code>play song with pitches and beats</code> takes a table of song data with pitches and beats as input (<code>song</code>), and it plays each note (<var>♪</var>) at the specified pitch for the specified number of beats.<br /> <img src="/img/U2/lab01/play-song-beats-definition.png" title="play song with pitches and beats (song) {
for each (♪) in (song) {
play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))
}
}" alt="play song with pitches and beats (song) {
for each (♪) in (song) {
play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))
}
}" class="indent"/></p>
:::
:::

::: todo
<p>MARY TODO: I need to do add this block to the previous XML projects and give it help text. When I do, I should take it from the MARIO MAPPED EXMAPLE because that version has the help text as a comment on the hat block. --MF, 2/27/22</p>

<p>MARY TODO: The original 'Mary Had a Little Lamb' (MHALL) XML has no extra sound blocks hidden in it. And both the map MHALL and map TWINKLE don't either and also they might need help text on the play song block. Also I reminded students how to put help text on a block in 2.1.5#6, but perhaps we should on page 2.1.3 between #4 and #5 also... --MF, 2/27/22</p>
:::

::: forYouToDo
<ol>

<li>Open this <a class="js-run snap-project" href="/prog/lab-5/song-player-pitches-beats.xml" title="Song Player - Pitches and Beats - Snap! project" target="_blank">Song Player - Pitches and Beats</a> project, and save it to your account.</li>

<li>

::: sidenote
You learned how to create a global variable in <a href="/lab-2/2-keeping-score.html" title="Lab 2 Page 2: Keeping Score with Global Variables">Lab 2 Page 2: Keeping Score with Global Variables</a>.
:::

Create a new global variable to store a song with both pitch and beat information.

</li>

<li>Use the <img src="/img/U2/lab01/note-pitch-beats.png" title="♪ pitch: () beats: ()" alt="♪ pitch: () beats: ()" class="inline nopadtb"/> reporter to input each note in your list. <img src="/img/U2/lab01/set-mario-beats.png" title="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" alt="set (&apos;Mario Theme (with beats)&apos;) to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))" class="indent"/></li>

<li>Play your song by dragging your new variable (with both pitch and beat data) into the input slot of the <code>play song with pitches and beats</code> block and clicking it.</li>

<li>Fix any problems with your project.</li>

<li><img src="/img/icons/save-now.png" title="Now Is a Good Time to Save" alt="Now Is a Good Time to Save" class="inline"/></li>

</ol>
:::

::: {.ifTime .show}
<ol start="7">

<li>Build another song with pitch and beat information, store it in another global variable, and play that using the <code>play song with pitches and beats</code> block also.</li>

</ol>
:::

::: learn
In this activity, you learned how to create a table of song data containing both pitch and length data.
:::
