---
title: "Mystery Song Game"
subtitle: "Lab 5, Page 4"
---

::: learn
In this activity, you will use your <code>mystery song</code> block to create a game.
:::

<p>

There are command block versions of two blocks you've already seen:

<ul>

<li>

You've used the <img src="/img/blocks/reporter-if.png" title="if &apos;predicate input slot&apos; then () else ()" alt="if &apos;predicate input slot&apos; then () else ()" class="inline nopadtb"/> reporter. Snap<em>!</em> also has a built-in command version: <img src="/img/blocks/if-else-full-size.png" title="if &apos;predicate input slot&apos; then &apos;C-shaped input slot&apos; else &apos;C-shaped input slot&apos;" alt="if &apos;predicate input slot&apos; then &apos;C-shaped input slot&apos; else &apos;C-shaped input slot&apos;" class="inline"/>

</li>

<li>

You've used the <img src="/img/U1/lab07/ask.png" title="ask ()" alt="ask ()" class="inline"/> reporter. Snap<em>!</em> has a built-in command version: <img src="/img/blocks/ask-empty-full-size.png" title="ask () and wait" alt="ask () and wait" class="inline nopadtb"/>, which uses <img src="/img/blocks/answer-full-size.png" title="answer" alt="answer" class="inline nopadtb"/> to report the user's response.

</li>

</ul>

</p>

<div class="forYouToDo">

<ol>

<li>If your project isn't open already, log in to Snap<i>!</i>, and open your "Song Player" project.</li>

<div class="comment">

<p>I cant find the ask block :( I think it has to be in the song player project blocks microworld. -pf 3/3/22</p>

<p>

This needs to be fixed in all XML files, but for now, I fixed the starter file and added this takeNote box to help anyone who has already saved the problem project. --MF, 3/6/22 <br> I now realize it's missing the "say" block(s). I also think it'd be nice to have the "When flag clicked" block so a student can share a code-less version of the project (otherwise you can see the answer in the code on the left). -pf 3/6/22

</div>

<li>

Create a script that plays your mystery song, asks the user what song they think it is, and then tells them whether they are right or wrong.

::: takeNote
<p><a href="#hint-mistake" data-toggle="collapse" title="Is your project missing the 'say,' 'ask () and wait' and 'answer' blocks?">Is your project missing the <img src="/img/blocks/say-empty-full-size.png" title="say ()" alt="say ()" class="nopadtb"/>, <img src="/img/blocks/ask-empty-full-size.png" title="ask () and wait" alt="ask () and wait" class="inline nopadtb"/> and <img src="/img/blocks/answer-full-size.png" title="answer" alt="answer" class="inline nopadtb"/> blocks?</a></p>

::: {#hint-mistake .collapse}
<p>There was a mistake! If these blocks are not in your project, go back to <a href="/lab-5/01-playing-notes.html" title="the first activity: for recovering the missing 'say,' 'ask () and wait' and 'answer' blocks">the first activity</a>, press and hold the shift key while you reload the page, open the project in exercise #2, choose "Save As..." from the Snap<em>!</em> File menu, and save <em>with a new name</em> (so you don't lose your prior work).</p>
:::
:::

::: endnote


<p>You can use <code>ask and wait</code> to ask the user a question (and store their response), and you can use <img src="/img/blocks/say-empty-full-size.png" title="say ()" alt="say ()" class="nopadtb"/> to tell the user something that isn't a question.</p>

<p><a href="#hint-guessing-hint1" data-toggle="collapse" title="Click for another hint about building the song-guessing-script.">Click for another hint.</a></p>

::: {#hint-guessing-hint1 .collapse}
<p>

The script for your game needs to do three things:

<ol style="list-style-type: lower-roman;">

<li>Play your mystery song</li>

<li>Ask the user to guess the song</li>

<li>Tell the player whether the guess is correct</li>

</ol>

</p>

<p><a href="#hint-guessing-hint3" data-toggle="collapse" title="Click for a third hint about building the song-guessing-script.">Click for a third hint.</a></p>

::: {#hint-guessing-hint3 .collapse}
<p>Use the <code>if else</code> command block to test whether the guess is correct with a predicate like <img src="/img/U2/lab01/answer-equals-stronger.png" title="(answer) = (&apos;Stronger&apos;)" alt="(answer) = (&apos;Stronger&apos;)" class="inline nopadtb"/>. If the guess is correct, then use <code>say</code> to tell the user they are correct; if it's not correct, then use <code>say</code> to tell them that.</p>

<p><a href="#hint-guessing-hint4" data-toggle="collapse" title="Click for a fourth hint about building the song-guessing-script.">Click for a fourth hint.</a></p>

::: {#hint-guessing-hint4 .collapse}
<p>Try making code that's something like this:<br /> <img src="/img/U2/lab01/ask-if-example.png" title="partial script with the code:
ask (&apos;What was that song?&apos;) and wait
if ((answer) = (&apos;Twinkle Twinkle Little Star&apos;)) {
say (&apos;Correct!&apos;) for (2) secs
} else {
say (&apos;Try again!&apos;) for (2) secs
}" alt="partial script with the code:
ask (&apos;What was that song?&apos;) and wait
if ((answer) = (&apos;Twinkle Twinkle Little Star&apos;)) {
say (&apos;Correct!&apos;) for (2) secs
} else {
say (&apos;Try again!&apos;) for (2) secs
}" class="indent"/></p>
:::
:::
:::
:::

</li>

<li><img src="/img/icons/save-now.png" title="Now Is a Good Time to Save" alt="Now Is a Good Time to Save" class="inline"/></li>

</ol>

</div>

::: todo
<p>Cut for now. I believe some of this was here at Dan's request, so I'm not cutting without more attention. --MF, 3/6/22</p>

::: takeItFurther
::: todo
<p>I'm not sure what you expect them to do here. If the idea is that they nest another IF ELSE in the else clause of the first one, that's a whole new idea, and one students find hard, not appropriate for an ITIT. I'm not sure this is salvageable, but it might be with a serious rewriting. --bh 3/3/22</p>

<p>I assumed it was just using an or. Maybe should explicitly suggest using the or block. You can also say "to allow the user to be correct with different variations on the song title", which is different from having to implement a spell checker (a quite difficult task, as 61A students will attest this semester!). -pf 3/3/22</p>

<p>I made this a TIF for now. (And then I cut it.) ;) --MF, 3/6/22</p>
:::

<ol type="A">

<li>Use a second <code>if else</code> block and predicate (hexagonal testing function) to allow the user to be correct even with a different variation of the spelling of the song. For example, you might want the game to approve either "The Alphabet Song" or "Alphabet."</li>

<li>If you created two mystery songs, you could make a new command block that randomly chooses which one to play by using <code>random</code> together with <code>if else</code>.</li>

::: todo
<p>I like this idea, but I don't see a way to do more than two mystery songs with the blocks they know at this point (e.g., not global or script variables---globals are taught later in this lab). Am I missing anything? --MF, 2/10/22</p>

<p>I don't understand the question. How can they do even two songs? Presumably by putting the two song scripts in the slots of the IF ELSE. Well, if they can do that, they can nest two IF ELSE blocks, as in the ITIT above, and that gives them three slots for songs, etc. --bh 3/3/22</p>

<p>I also don't know how to do this without using some variable to track which song they ended up picking and asking about, since we need that to happen before the if/else that checks the answer. Ah okay well I guess you can have the if condition be a random number between 1 and length of songs, and then inside the if/else clause, it plays the song and asks them for their guess, but then I bet they'll end up repeating all that ask-code and it'll be gross. I feel like doing this cleanly is hard. --pf 3/3/22</p>
:::

</ol>
:::
:::

::: learn
In this activity, you used the command <code>if else</code> to control what the game says to the player.
:::
