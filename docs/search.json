[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nWelcome to the 2023 Maker Camp, in this session, you’ll learn basic computer science skills culminating in a project"
  },
  {
    "objectID": "lab-1/1-creating-a-snap-account.html",
    "href": "lab-1/1-creating-a-snap-account.html",
    "title": "Getting Started with Snap!",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share with others and play on your phone.\n\n\nOn this page, you’ll learn how to create your own account and how to log in and out.\n\n\n\nCreating an Account\n\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, .\n\n\n\n\n\nLogging In to and Out of Your Snap! Account\n\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "lab-1/2-start-your-first-snap-app.html",
    "href": "lab-1/2-start-your-first-snap-app.html",
    "title": "Programming a Game",
    "section": "",
    "text": "On this page, you’ll build a simple game in which the player tries to click a character that’s jumping around.\n\n\n\n If you’re doing this in class, you should be working with a partner. It’s not just for students; professional programmers work with partners too.\n\nIf each of you is in front of a computer, one of you should keep Snap! open, and the other should keep this lab page open. If you are sharing a computer, use two browser tabs.\n\n\n\nMaking a Character Move\n\n\n\n\nMake sure either you or your partner is logged in to Snap! so you can save your work.\n\n\n\n\n\nSaving a Snap! Project\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window.\n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\nMaking the Game Challenging\n\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "lab-1/3-loading-mobile-device.html",
    "href": "lab-1/3-loading-mobile-device.html",
    "title": "Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will share your project, with your partner and with friends who have smartphones.\n\n\n\n\nCreate a link to share your app.\n\n\nCreating a Link\n\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “U1L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\n\nSaving a Copy of a Project\n\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change.\n\n\n\n\n\n\n\nPutting the Game on Your Phone\n\n\nBlue “If There Is Time” boxes have optional activities that are not required for this course. If you finish everything else on the page early, try these instead of jumping ahead to the next page. If you have a smartphone, you’ll definitely want to click this one.\n\n\n\n\nLoad your game on a mobile device.\n\n\nLoading a Snap! Project on Apple iOS\n\n\n\nOn your mobile device, open Safari, and type the project URL (link) for your project.\n\n\nAt the bottom of the Safari screen, tap the share icon, , and then select “Add to Home Screen” from the menu that appears.\n\n\n\nLoading a Snap! Project on Android\n\n\n\nOn your mobile device, open Chrome, and type the project URL (link) for your project.\n\n\nTap the settings icon, ☰, and then select “Add to homescreen” from the menu that appears.\n\n\n\n\n\nMake sure you can open the project just like any other app on your phone’s home screen."
  },
  {
    "objectID": "lab-1/4-keeping-score.html",
    "href": "lab-1/4-keeping-score.html",
    "title": "Giving the Player Feedback",
    "section": "",
    "text": "Now the game is challenging, but players can’t tell how well they’re doing because Alonzo jumps around whether the player clicks him or not. On this page, you will create a way for the player of your game to know how well they are doing.\n\n\nConfirming Whether Alonzo Was Clicked\n\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be “worn” by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked.\n\n\n\n\nKeeping Score\n\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game.\n\n\n\n\nMaking the Game More Challenging\n\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder.\n\n\n\n\nEnding the Game\n\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "lab-1/5-finish-your-first-snap-app.html",
    "href": "lab-1/5-finish-your-first-snap-app.html",
    "title": "Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your U1L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "lab-1/6-keeping-a-journal.html",
    "href": "lab-1/6-keeping-a-journal.html",
    "title": "Keeping a Programming Journal",
    "section": "",
    "text": "On this page, you will begin using a journal to keep track of your programming insights.\n\n\nYou can use a journal to learn from your own programming. The journal is just a notebook in which you write notes to yourself, like a diary. It’s for you, not for your teacher.\n\n\nHere are some ways to use your journal:\n\n\nWhen you learn a new idea (not just the name of a Snap! block), make a note of it.\n\n\nWhen you make or discover a beautiful program—a beautiful piece of code, or one that draws a beautiful picture—print it out, or take a photo, and add it to your journal.\n\n\nWhen you find a bug in your program, write down:\n\n\nThe symptom—How did you know there was a bug?\n\n\nHow you found the underlying problem—What steps did you take to find figure out what was going on?\n\n\nThe underlying problem—What was going on?\n\n\nHow you fixed it—Record anything that might be helpful next time you encounter a bug like this, or to help you avoid having a bug like this in the future.\n\n\n\n\nWhen something inspires you to create a related program on your own, write down your idea for later.\n\n\n\nThis is just like recording bugs except that it’s a bug in your understanding rather than a bug in your code.\n\nWhen you’re asked to predict what some script will do, and your expectations turn out to be wrong, write down:\n\n\nWhat you thought would happen\n\n\nWhat actually happened\n\n\nWhy you thought what you thought\n\n\nHow you think about it now\n\n\n\n\nWhen the curriculum asks you to write your ideas about something, write in your journal.\n\n\n\n\n\n\n Are there any bugs you’ve run into so far? Any cool project ideas? Any projects you’ve been proud of?"
  },
  {
    "objectID": "lab-1/index.html",
    "href": "lab-1/index.html",
    "title": "Click Alonso",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-2/1-pair-programming.html",
    "href": "lab-2/1-pair-programming.html",
    "title": "Pair Programming",
    "section": "",
    "text": "On this page, you will learn about collaborating by using pair programming.\n\n\n\nIn the early days of computers, programming was something you did alone. You planned the program in your head, and then you sat down and wrote the code.\n\n\nThe programs people write these days are far too complicated for that. Graphical user interfaces, interacting with servers on the Internet, internationalization, security against malware attacks, and many more requirements are part of a serious software development effort, and a program is likely to have hundreds of authors.\n\n\nThis means that collaboration skills are as important as coding skills today. Even if you don’t end up working as a programmer, collaboration is part of most jobs.\n\n\nCRD-1.B.2\n\n\nThere are several ways to organize a collaboration. In this course, you’ll use a collaboration technique called pair programming—writing computer programs in teams of two. One partner, the driver, controls the computer. The other, the navigator, helps catch errors and keeps track of how the code being written fits into the overall plan. The navigator is also in charge of reading the lab pages out loud. Aim for equal time in each role, switching about every five minutes.\n\n\n\nHow not to do pair programming:\n\n\nThe biggest mistake in pair programming is for the navigator to tune out and let the driver do all the work. The navigator has to be paying attention; otherwise you’re just taking turns doing the entire work instead of making use of the benefits of having two people.\n\n\n\nHow to collaborate in pair programming\n\n\nCRD-1.C.1:\n\n\ncommunication - Keep talking, Listen\n\n\nconsensus building - Don’t bargain\n\n\nconflict resolution - Don’t get defensive, Don’t be afraid of conflict\n\n\nnegotiation - Don’t bargain\n\n\n\n\n\n\nKeep talking. The driver should constantly explain the reason for using each block. The navigator should interrupt with questions: What about doing it this other way? How does this program avoid such-and-such bug? Don’t we have to deal with this requirement and that requirement at the same time? We’re pretty much repeating this other piece of code over there; could we hide that code in a block and use the same block in both places? And so on.\n\n\nListen. Try to understand each other’s thinking before you disagree.\n\n\nWork as a team. If you find yourself being defensive about feedback, remember that nobody’s code is perfect right away. It’s the navigator’s job to find problems in the driver’s code, and when you switch places, the new navigator will repay the favor. You’re a team, not a competition.\n\n\nWork toward consensus. Don’t bargain; if you have disagreements about how something should be done, don’t say “well, you can do this your way if I can have this other thing my way.” Both partners should listen to each other’s reasons and work together to find a solution that meets both needs.\n\n\nSpeak your mind and work out your differences. That doesn’t mean you should try to disagree, but if you do, you can still be friends. Work out the conflict by listening and understanding each other, rather than by giving in just to end the argument.\n\n\nRegardless of experience, take turns. Don’t let the more experienced programmer overwhelm the other partner. Make sure both partners are comfortable contributing, in either role. A group is almost always better at problem-solving than any of the people in the group is alone.\n\n\n\n\nIn the first unit, we’ll use these symbols to remind you to switch roles at specific points in the lab. After this unit, you’re on your own to be sure to switch about every five minutes.  \n\n\n\nCRD-1.C\n\n\n\nYour teacher will hand out instructions for the Lost on the Moon game."
  },
  {
    "objectID": "lab-2/2-gossip.html",
    "href": "lab-2/2-gossip.html",
    "title": "Making Programs Talk",
    "section": "",
    "text": "In this lab, you will program two sprites to gossip. \n\n\nOn this page, you will experiment with an existing program as an introduction to the project.\n\n\n\nExploring Custom Blocks\n\n\n\n\n\n\n\nYou’ll need to be logged in to save to your account. You may wish to review how to log in at Unit 1 Lab 1 Page 1: Getting Started with Snap!\n\n\nPerform each experiment (A-D) several times.\n\n\n\n\n\nWhat does each reporter block report?   \n\n\nWhat happens when you click this script (labeled D)? \n\n\n\n\n\n\n\n\nAAP-3.A.6\n\n\nThere is nothing exactly like  or  on the AP Exam because they don’t have sprites and speech balloons, but their way of showing this text to the user is\nDISPLAY(gossip())\nif it’s written as text or  if it’s shown as blocks.\n\n\nYou won’t have to be able to write code in this notation on the AP exam. You just have to be able to read it so you can answer questions about it.\n\n\n\nWould you like to make the blocks bigger?\n\n\nIn the Settings menu (), choose “Zoom blocks…”, and adjust the slider.\n\n\n\n\n\nAAP-3.B.6, DAT-1.A.5\n\n\nAbstraction is the most fundamental idea in computer science, but it’s hard to define until you’ve seen some examples. The most basic kind of abstraction is to give a name to something in a program. For example, here we gave the name who to the idea “pick an item at random from this list of people (or cats).” This is called procedural abstraction because we use a procedure (a block) to name the idea. This makes your code readable. You’ll see other kinds of abstraction later.\n\n\n\nAAP-3.B.7\n\n\nIf you find yourself wanting to copy and paste code from one place to another without changing it, then give it a name (open a Block Editor and paste the code there) and call your procedure in both places. If you discover later on that you need to fix a bug in this code, you only have to change it once instead of finding every copy throughout your program.\n\n\nExploring a Second Sprite \n\n\n\n\n In the sprite corral, click on the green sprite named “Sprite(2)” to control its scripts and costumes. \n\n\nPerform each experiment (A-C) several times.\n\n\n Write down what broadcast does.\n\n\n Discuss how who2 compares to who and how gossip2 compares to gossip.\n\n\n Make Sprite(2) tell Sprite to respond. What happens?\n\n\n\n \n\n\n\nThe broadcast block sends a message to all the sprites. To set the message, click the down arrow and select “new…” \n\n\nFor more information about the when I receive block, right-click (or control-click on a Mac) the block and select “help…”"
  },
  {
    "objectID": "lab-2/3-customizing.html",
    "href": "lab-2/3-customizing.html",
    "title": "Customizing and Debugging",
    "section": "",
    "text": "On this page, you will edit the word lists used by the sprites and debug any problems.\n\n\n\n\n\nOpen your U1L2-Gossip project. Edit these three reporter blocks to change the phrases that the program uses. (See the instructions in the box below.) Be creative and funny but thoughtful.   \n\n\nHow to Edit a Block\n\n\n\nFind the block in the scripting area or the colored palettes on the left.\n\n\nControl-click (or right-click) on the block and choose “edit…”\n\n\nMake changes to the block’s internal code. (Instructions are already inside these blocks.)\n\n\nClick OK when you’re satisfied. (Or click “Cancel” if you don’t want to make changes.)\n\n\n\n\nBrian, you need to redo this video with the plus signs on and with the space before the 2 in who 2 (start from the starter file, please). –MF, 6/15/20\n\nClick for a video of these steps of how to edit a block.\n\n\n\n\n\n\n\n\n\n\n\nWhy do these blocks use ? Why not just use ?\n\n\nThe report and say blocks mean very different things. Report tells something to the computer, and that value can be used as input to another block, such as the join block inside gossip. Say just shows a value to the user in a speech bubble.\n\n\n\n\n: Lists, Strings, and Concatenation\n\n\n\nAAP-1.C.1 first sentence\n\n\n\nWhat does “ordered” mean?\n\nIt doesn’t mean that the items have to appear in alphabetical or numeric order. It just means that  is a different list from .\n\n\nA list is an ordered sequence of items. You’ve seen this example: \n\n\nAAP-2.D.1, AAP-2.D.2\n\n\nThe items of this list are strings. A string is a sequence of characters (letters, digits, punctuation, etc.). A substring is just a piece of some existing string. For example, “Hanna,” “anna”, and “nnah” are each substrings of the string “Hannah.” (The empty string as well as the original string are both also substrings.)\n\n\nTo concatenate strings means to make a bigger string by connecting two or more smaller strings. In Snap!, the  block lets you concatenate strings.\n\n\n\n\n\n\n\n\nThe process of testing, finding problems, and fixing them is called debugging.\n\n\n\nMake sure your program works. Test each block as well as the program as a whole. If something doesn’t work, don’t go on without fixing it.\n\n\n\n\n\n\n\nAAP-2.D\n\nWhich two of the following sentences could be reported by gossip? \n\nFor reference:  \n\n\n\n\nSeñora and Ms. C helped.\n\n\nIt’s true that there are two people (two “who”s) and one action (one “does what”), but they aren’t in the right order. Also, the word “and” isn’t anywhere in the program.\n\n\n\n\nSeñora ran away from my cat.\n\n\nCorrect! This follows the pattern: “who,” “does what,” “who.”\n\n\n\n\nHannah listened to Hannah.\n\n\nCorrect! This follows the pattern: “who,” “does what,” “who.”\n\n\n\n\nJake helped.\n\n\nThis sentence is missing the second “who.”\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the costumes to anything you like.\n\n\nAdding a Costume\n\n\n\nIn the sprite corral, select the sprite you want to give costumes to.\n\n\nChoose “Costumes…” from the File () menu.\n\n\nChoose a costume.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box.\n\n\n\n\nYou can use a photograph or picture from the Internet by dragging the image onto the Snap! window.\n\n\n\nFix any issues with your costumes.\n\n\nAdjusting a Costume\n\n\n\n\nYou can change the size of your sprite using .\n\n\nYou can change the position of your sprite using .\n\n\nYou can change the direction your sprite is facing: \n\n\n\n\n\n\n\n\n\n\nChange the background on the Stage.\n\n\nAdding a Stage Background\n\n\nChanging a stage background is almost like changing a costume.\n\n\n\nIn the sprite corral, select the stage.\n\n\nChoose “Backgrounds…” from the File () menu.\n\n\nChoose a background.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box."
  },
  {
    "objectID": "lab-2/4-making-a-new-block.html",
    "href": "lab-2/4-making-a-new-block.html",
    "title": "Making Your Own Block",
    "section": "",
    "text": "On this page, you will create a new block to make the program feel more like a conversation.  \n\n\n\n\n\nIf it isn’t open already, open your U1L2-Gossip project.\n\n\nCreate the  block:\n\n\n\n\nMaking a New Block\n\n\n\n\nCreate a new block by either clicking  near the end of the palette, clicking the + sign in the top right corner of the palette (shown below), or right-clicking (or control-clicking on a Mac) in an empty spot in the scripting area and choosing “make a block…” (shown below).  \n\n\nChoose the color, in this case red for Lists.\n\n\nType the title for your block: gossip response.\n\n\nSelect the shape and click OK. For this block, choose the oval reporter shape because you want it to report a value (the chosen response) to another block.\n\n\n\n\nBecause you chose the reporter shape, the block editor opens with a  block already attached to the hat block. Whatever input you give to report will become the value reported by your new block.\n\n\n\nCoding the Block’s Script\n\n\n\nDrag in the blocks you need. For your new block, use  and . Use the value reported by list as an input to item.\n\n\nSnap the blocks together. The code’s structure will be just like the code inside who, does what, and who 2. \n\n\nFill all the inputs.\n\n\nFor this project, click the down-arrow in item to change “1” to “random”.\n\n\nThen fill list with phrases like “Guess what,” “I heard,” or “Who cares!”\n\n\n\n\nClick OK when you’re satisfied.\n\n\n\n\n\n: Procedures, Reporters, and Commands\n\nAAP-3.A.1, AAP-3.A.2\n\n\nA procedure is a named sequence of instructions that may take inputs and may report a value. Some languages call procedures methods or functions. Here are two types of procedures you have seen in Snap!:\n\n\nReporters have an oval shape. They report a value.   \n\n\nCommands have a jigsaw puzzle shape. They tell the computer to do something without reporting a value.   \n\n\n\n\n\n\n\nAAP-3.A.7, AAP-3.C.2\n\n\nThe procedure  would be written as\n\nPROCEDURE double(x)\n{\nRETURN(2 * x)\n}\n\nor .\n\nMany languages (and the AP CS Principles Exam) use return instead of report as the name of the command to give a value back at the end of a function call.\n\n\n\nAAP-3.A.9\n\n\nThe exam uses “value of a procedure” to mean the value the procedure returns when called. For example, “the value of\ndouble(5)\n” means 10.\n\n\n\n\nDebugging\n\n\n\n\n\nTest your custom gossip response block by clicking it several times. It should behave like the who, does what, and who 2 blocks. Debug any problems before moving on.\n\n\nReview how to edit a block in Unit 1 Lab 2 Page 2: Customizing and Debugging, if needed.\n\n\nUse your new block: Edit gossip 2, and insert gossip response in place of the text “Oh, but….” \n\n\n\nWhy do I see plus signs around gossip 2 in Snap! but they’re not in this picture?\n\n\nNormally, when you are using the Block Editor, you see plus signs because you have to click on them to add inputs to your blocks. But to show you the finished code here, it looks cleaner without the plus signs.\n\n\n\nTest and debug gossip 2 also.\n\n\nThen test the whole program by clicking script D several times, and fix any bugs."
  },
  {
    "objectID": "lab-2/5-if-else.html",
    "href": "lab-2/5-if-else.html",
    "title": "Adding Variety to Gossip",
    "section": "",
    "text": "On this page,  you will improve your program so that sometimes the sentences are a bit longer and more complex.\n\n\nThe block  has been built for you. It randomly chooses 1, 2, 3, or 4, and if that number is 3, then it reports something more complicated than who. Otherwise, it reports who, just as before.\n\n\n\nIf it isn’t open already, open your U1L2-Gossip project.\n\n\nFind  in the red Lists palette, drag it into the scripting area, and click on it enough times to see how it’s different from who.\n\n\n\nHere is the code for more complicated who. There are two new things in it: pick random and if else. \n\n\nFind  in the green Operators palette, and click it several times. What does the random block do?\n\n\n In the more complicated who block, what happens if the pick random block picks 3? What if it picks 4?\n\n\n\n\n\n\n\n\nAAP-3.E\n\n About how often will more complicated who pick the more complicated choice?\n\n\n\nHalf the time\n\n\nIf a number is chosen randomly from 1, 2, 3, and 4, about how often will that number be 3?\n\n\n\n\nA third of the time\n\n\nIf a number is chosen randomly from 1, 2, 3, and 4, about how often will that number be 3?\n\n\n\n\nA quarter of the time\n\n\nCorrect!\n\n\n\n\nThree quarters of the time\n\n\nIf a number is chosen randomly from 1, 2, 3, and 4, about how often will that number be 3?\n\n\n\n\n\n\n\n\n\n\n\n\nAAP-3.E\n\n Here is the script inside more complicated who. What change to this script will make the more complicated phrase appear more often?\n\n\n\nChange the 4 to 5.\n\n\nThen three will be the randomly chosen number one out of five times instead of one out of four, and so we’ll have a complicated subject less often.\n\n\n\n\nChange the 4 to 3.\n\n\nCorrect! Three will then be the chosen number one out of three times, and so we’ll have a complicated subject more often.\n\n\n\n\nChange the 3 to 1.\n\n\n1 is just as likely a random choice as 3, one out of four times, and we’ll have a complicated subject just as often as before.\n\n\n\n\nChange the 3 to 5.\n\n\nThe chosen number can never be 5, so we’ll never get a complicated subject.\n\n\n\n\n\n\n\n\n\n\n\n\n: Expressions and Values\n\nAAP-2.B.3, AAP-2.B.4\n\n\n\nAn expression is a either a constant value (such as “4” or “winter”) or a call to a reporter block including its inputs (such as , , or ).\n\n\nExpressions are evaluated to produce a single value (a value can be a number, a string, a sprite, a costume, a script, a list—anything). For example,  will be evaluated to 17.\n\n\n\n\n\n\nAAP-3.E.1, AAP-3.E.2\n\n\nThe expression  would be written as\nRANDOM(1, 10)\nor . Every time you run this code, you will get a different random number between 1 and 10.\n\n\n\n\n\n\n\n\n\nAAP-3.E\n\n\nClick for a review of odd and even numbers.\n\n\nAn even number is an integer that is divisible by 2 (such as 2, 14, 0, -4, -6, -28, and -176).\n\n\nIn contrast, odd numbers are integers not divisible by 2 (such as 1, 3, 9, 17, -5, -33, and -221).\n\n\n\nWhich expression will return a random even number between 1 and 10?\n\n\n\nRANDOM(2, 10)\n\n\nRANDOM(2, 10)\nwill return 2, 3, 4, 5, 6, 7, 8, 9, or 10.\n\n\n\n\n2 * RANDOM(1, 5)\n\n\nCorrect!\nRANDOM(1, 5)\nwill return 1, 2, 3, 4, or 5, and so\n2 * RANDOM(1, 5)\nwill return 2, 4, 6, 8, or 10.\n\n\n\n\nRANDOM(1, 10) / 2\n\n\nRANDOM(1, 10)\nwill return 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10, and so\nRANDOM(1, 10) / 2\nwill return ½, 1, 1 ½, 2, 2 ½, 3, 3 ½, 4, 4 ½, 5.\n\n\n\n\nRANDOM(1, 5)\n\n\nRANDOM(1, 5)\nwill return 1, 2, 3, 4, or 5.\n\n\n\n\n\n\n\n\n\n\n\n\nAAP-3.E\n\nWhich expression will simulate the rolling of two dice?\n\n\n\nRANDOM(1, 6) + RANDOM(1, 6)\n\n\nCorrect!\nRANDOM(1, 6)\nwill return 1, 2, 3, 4, 5, or 6 with equal probability, simulating one die, and so\nRANDOM(1, 6) + RANDOM(1, 6)\nwill return 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, or 12 with the same probability as two dice.\n\n\n\n\n2 * RANDOM(1, 6)\n\n\nYou have the right idea, using\nRANDOM(1, 6)\nfor the roll of a single die. But this expression doesn’t roll two dice; it rolls one die and doubles the result. So\n2 * RANDOM(1, 6)\nwill only return 2, 4, 6, 8, 10, or 12.\n\n\n\n\nRANDOM(2, 12)\n\n\nRANDOM(2, 12)\nwill return 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, or 12 equally often. Do you score 2 rolling two dice as often as you score 6?\n\n\n\n\nRANDOM(1, 12)\n\n\nCan you score a total of 1 by rolling two dice?\n\n\n\n\n\n\n\n\n\n\nCreate a new block  that is similar to gossip but that uses more complicated who instead of who. (You can choose which who to replace, or you could replace both.)\n\n\nChange the script for Sprite to use complicated gossip instead of gossip. Run your code, and fix any problems.\n\n\n\n\n\nMaking a Block Call Itself\n\n\n\n\nEdit more complicated who. Replace one of the who blocks with a fresh copy of more complicated who that you drag in from the palette. Click more complicated who enough times to see how it has changed.\n\n\nCRD-2.B\n\n\n Describe the change in behavior, and explain what you think is causing it.\n\n\n\n\n\n\nMake Sprite(2) occasionally give a more complicated reply.\n\n\n\n\nPurple “Take It Further” boxes have more challenging activities that are not required. If you finish everything else on the page early, try these instead of jumping ahead to the next page.\n\n\n\n\nMake more complicated who give the more complicated response three out of four times instead of one out of four times.\n\n\nWhat happens when you try it out? Was it what you expected? Explain why it happened."
  },
  {
    "objectID": "lab-2/index.html",
    "href": "lab-2/index.html",
    "title": "Gossip",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-3/1-number-guessing-game.html",
    "href": "lab-3/1-number-guessing-game.html",
    "title": "Starting a Number Guessing Game",
    "section": "",
    "text": "In this lab, you will use local and global variables to store information. \n\n\nOn this page, you will begin to develop a number guessing game that uses a local variable to keep track of a secret number.\n\n\n\n\n\n\n\n“U2L1-NumberGuessing”\n\n\n\nStart building a new command block called number guessing game that will contain the code for the game. Leave the Block Editor open.\n\n\n\n\nIn a number-guessing game, the player tries to guess the computer’s secret number. The computer needs a way to store the secret number in a variable so that it can compare it to the player’s guesses. \n\n\n: Variable\n\nAAP-1.A.1\n\n\nA variable is like a labeled box that can hold one value at a time, such as one word, one costume, or one list (which can contain many things). You can look at what’s inside as many times as you want.\n\n\nOn Unit 1 Lab 2 Page 2: Making Programs Talk, you learned about procedural abstraction: giving scripts names by putting them in new blocks. Here, we are starting to look at data abstraction, giving names to numbers, text, lists, etc. When you give something a name, you can refer to it without knowing exactly what the value is.\n\n\n\n\n\nCreate a script variable called secret number to store the number that the player will try to guess (instructions below).\n\n\nMaking a Script Variable\n\n\n\nMove a script variables block into the Scripting Area. You can find it in the Variables palette. \n\n\nName the variable by clicking on the orange a at the end and typing the name you want. Here, it should be called secret number.\n\n\nLater, you will use the script variable by dragging it out of the script variables block (the way you drag an input) and placing it where you need it in your code.\n\n\n\n\nAAP-1.A, AAP-3.E\n\nUse  to set the initial value of secret number to a random number from 1 to 10. The set menu lets you select which variable to set. \n\nThe variable secret number is available in the set block only when you snap it somewhere after the script variables block.\n\n\n\n\n\n\n\nAAP-1.B.2\n\n\n would be written as\nsecretNumber ← 7\nor .\n\n\n\nScript variables are a kind of local variable; they work only within the script where they’re created. If you drag one into a different script, it won’t work. You’ve seen two kinds of local variables before: inputs to blocks and for counters.\n\n\n\nExamples you’ve seen before.\n\n\n\nYou have created variables as inputs to blocks that you made: \n\n\nYou have used the counter variable that the for block gave you: \n\n\n\n\n: Local Variable\n\nA local variable can be set or used only in the environment in which it is defined. This term includes inputs to procedures and variables created by the for or script variables block.\n\n\n\n\nIn algebra, a variable is sometimes used for something whose value you don’t know yet, and the goal is to find out its value. In programming you decide the values of variables.\n\n\n\nAAP-1.A.1\n\n\nYou learned about input variables on Unit 1 Lab 3 Page 3: Blocks with Inputs.\n\n\nWhen you assign a value to a variable, the variable holds that value, not where it came from. For example, if apples = 2 and you , then bananas will hold the value 2 and have no memory of it having come from apples. This is why\na ← a * 2\nmeans something. (Suppose a = 8. First compute the value of\na * 2\n, namely 16, and then replace the old value of a with 16). Up to now, the only variables you’ve used are input variables, and you never assign a value to an input because the value is given by the code that calls it. But a script variable won’t have a value until you give it one with set.\n\n\n\n\nAAP-1.B, AAP-1.B.3\n\n\n\n\n\n\nExamples like this one are useful to test your understanding of assignment to variables, but you wouldn’t use a sequence of assignments like this in an actual program.\n\nWhat value will this code display?\na ← 3\nb ← a\na ← 4\nDISPLAY(b)\n\n\n\n3\n\n\nCorrect! The variable b is assigned the value of the variable a (which is 3 when\nb ← a\nis done).\n\n\n\n\n4\n\n\nThe variable b is given the value of the variable a (which is 3 when\nb ← a\nis done); b doesn’t remember that the 3 came from a so it doesn’t change when a is changed.\n\n\n\n\na\n\n\nThe variable b has been set to the value of the variable a, not the letter “a” itself.\n\n\n\n\nb\n\n\nThe script will display the value of the variable b, not the letter “b” itself.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat value will this script report? \n\n\n\n-5\n\n\nCorrect!\n\n\n\n\n3\n\n\nThe value of the variable m is always greater than the value of the variable k in this script, so subtracting m from k will give a negative number.\n\n\n\n\n-4\n\n\nThe value of the variable m is 9 at the beginning, but it has been changed by the time it is subtracted from k.\n\n\n\n\n5\n\n\nThe last set command sets the value of the variable k to the value k – m, not m – k."
  },
  {
    "objectID": "lab-3/2-checking-player-guess.html",
    "href": "lab-3/2-checking-player-guess.html",
    "title": "Checking the Player’s Guess",
    "section": "",
    "text": "On this page, you’ll continue to develop your number guessing game to accept player guesses until the player guesses correctly.\n\n\n\n\nYou’ll want the computer to ask players to guess again and again until they guess correctly. To do that, you will use the  block. Repeat until is a loop (just like repeat, forever, and for) but also a conditional (like if and if else). It repeats until a certain condition is met. For this program, the code should repeat until the player’s answer equals the secret number.\n\n\n\nYou learned about loops on Unit 1 Lab 3 Page 6: Looping with a Counter.\n\n\nYou’ve seen conditionals on Unit 1 Lab 2 Page 5: Adding Variety to Gossip and Unit 1 Lab 5 Page 2: Sprite Following a Sprite.\n\n\n\n\n\n\nUse repeat until to ask the player () to guess the secret number until their  equals the secret number.\n\n\n\n\nDrag the secret number variable out of the script variables block to use it.\n\n\nThe ask and answer blocks go together. If you use ask to ask a question, the user’s answer will be reported by answer.\n\n\n\n\n\n\n\nThe code  would be written as\n\nDISPLAY(\"Why did the chicken cross the road?\")\nuserResponse ← INPUT()\n\nor .\n\n\nAAP-3.A.8, AAP-3.A.9\n\n\nNotice that the procedure\nINPUT()\naccepts the value from the user and returns that input value, which is then assigned to the variable\nuserResponse\nwith the\n←\nsyntax. In Snap!, this is just like how answer accepts a value from the user and reports it, and that report is what the computer sets the variable user response to.\n\n\n\n\n\nAAP-2.B\n\n\nAfter the player guesses the secret number, make the computer congratulate the player.\n\n\nTest and debug. Take turns playing the game, and fix any problems with the code before moving on.\n\n\n\n\nRepeat until makes its decision based on the output of a hexagonal predicate block.\n\n\n: Predicate and Boolean value\n\n  Why is Boolean capitalized? \n\n\nThe word Boolean is capitalized because it’s named after a person, George Boole, who invented the branch of mathematics dealing with Boolean operations (such as and, or, and not).\n\n\n\n\nA predicate is a hexagon-shaped reporter that asks a true/false question such as these examples: 7 reporting true” title=“8 &gt; 7 reporting true” /&gt; 7 reporting false” title=“6 &gt; 7 reporting false” /&gt;\n\n\nAAP-2.E.1\n\n\nPredicates report a Boolean value (either  or ).\n\n\n\nPredicates fit into a hexagonal input slots of conditionals, such as in  and . Predicates help conditionals decide when to do something.\n\n\n\nThe if and if-else blocks are called conditionals because they control the code based on a true-or-false condition.\n\n\nClick for examples of predicates being used inside conditionals.\n\n \n\n\n\n\n\n\n\n\n\n\nWe really shouldn’t be encouraging students to mutate a block’s inputs. There are really two issues here; one is with the x=x+1 style of programming altogether, and the second is that formal parameters specifically shouldn’t generally be mutated; it’s better to make a script variable that’s initialized to the input value. (If we change this, we need to update the Guided Notes.) –MF, 6/26/21 with BH\n\n Which inputs to mystery function will report “finished”?\n\n\n\nAny integer\n\n\nCorrect! No matter what the input number is (as long as it’s an integer), the report block will eventually run. (This doesn’t necessarily happen in every procedure, but here it will.)\n\n\n\n\nOnly integers greater than or equal to 5\n\n\nWrite out some examples of what happens when the input is less than 5. For example, if the input is 3, the sprite will say 3, the input will be changed to 4, the sprite will say 4, the input will be changed to 5, the repeat until loop will stop, and the function will report “finished.”\n\n\n\n\nOnly integers less than 5\n\n\nThe report command isn’t inside the if.\n\n\n\n\nOnly 5\n\n\nThe repeat until block checks the value of input every time through the loop, not just its initial value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n What will the sprite say if you run the same function with the input 1?\n\n\n\n\n\n\nIt does say 4 at the end, but it says other things before that.\n\n\n\n\n\n\n\nHow does repeat until work?\n\n\n\n\n\n\n\nCorrect! The repeat until block runs the code in its script slot until input = 5, then the computer skips down to the next command, report (finished), without the sprite ever saying 5.\n\n\n\n\n\n\n\nThe repeat until block tests the value of input before running the code in its script slot.\n\n\n\nThe feedback is not finished because I realized that BH might object to changing the value of an input variable… –MF, 3/1/19\n\n\n\n\n\n\n\n\n\n\n\n\n What will happen if you run the same function with the input 9?\n\n\n\nThe sprite will say 9, and the block will report “finished.”\n\n\nWhat does the if block do when input is 9?\n\n\n\n\nThe sprite will say 9, 8, 7, 6, and the block will report “finished.”\n\n\nWhat does the set instruction do to the value of input?\n\n\n\n\nThe sprite will say 9, 10, 11, 12, 13, … and keep counting, and the block will never report “finished.”\n\n\nWhen input is 9, will the code inside the if command run?\n\n\n\n\nThe sprite will say nothing, and the block will report “finished.”\n\n\nCorrect! The code inside the if command will not run.\n\n\n\nThe feedback is not finished because I realized that BH might object to changing the value of an input variable… –MF, 3/1/19\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the computer congratulates the player for guessing correctly, have the computer say the number. For example, it might say, “You guessed it! My secret number was 7.”\n\n\n\nUse join to merge the text “You guessed it! My secret number was” with the value of the secret number variable."
  },
  {
    "objectID": "lab-3/3-debugging-extending.html",
    "href": "lab-3/3-debugging-extending.html",
    "title": "Debugging and Extending Your Number Guessing Game",
    "section": "",
    "text": "On this page, you will practice debugging, and you will make the computer give players hints.\n\n\n\n\n\n In the file is a definition of a number guessing game block. It has a bug—an error in the code that makes the program behave differently than expected. This code, if you keep playing over and over, will mostly work, but sometimes (not often) it will congratulate you before you even guess.\n\n Analyze the code, explain how this can happen, fix the bug, and save the project.\n\n\n\n\nHave it pick its random number just from 1 to 3 to make the bug occur more often.\n\n\nIf you want to add more script variables, use the right-pointing triangle. (The left triangle will remove them.) \n\n\n\nNow reopen your U2L1-NumberGuessing project. Make sure your version doesn’t have the same bug.\n\n\n\n\n\n\nJerry Lawson (1940-2011) was an American electronic engineer and gaming pioneer who is dubbed the “father of the video game cartridge.” Born in New York City, Jerry took classes at both Queens College and City College of New York. While working as a Chief Hardware Engineer at Fairchild Semiconductor, he led the development of the Channel F console and pioneered the technology of the video game cartridge, which was popularized with the Atari 2600.\n\n\nArticle: One of the most important Silicon Valley pioneers you’ve never heard of\n\n\n\nExtending the Program with More Specific Responses\n\n\n\n\nUse more conditional blocks and predicates to make the computer tell the player whether a guess is too big or too small: “That’s too big. Try again.”  Where in the code should these conditionals go?\n\n\nTest and debug. Play your game enough to see if it works the way you want. It should:\n\n\nask the player to guess its secret number;\n\n\nsay whether a wrong guess is too big or too small, and then ask again;\n\n\ncongratulate the player for a correct answer.\n\n\n\n\n\n\nThe script variable secret number exists only until the script finishes running. When the game is played again, the program will create a new secret number variable and give it a new random number.\n\n\n\nIn a later unit, you will teach the computer how to guess a secret number that you have chosen.\n\n\n\n\nRight now, the script always picks a number between 1 and 10. At the start of the game, ask the player what the maximum number should be, and make your program choose a number between 1 and maximum.\n\n\nUse another script variable to keep track of how many guesses the player makes before getting the right number. When the player guesses the secret number, say how many guesses it took.\n\n\n\n\n\n\nFind a way to vary the language a bit so that your program does not always repeat exactly the same words in the same situation. For example, if a player guesses too high twice in a row, the program could say “That’s still too big. Try another number.”"
  },
  {
    "objectID": "lab-3/4-keeping-score.html",
    "href": "lab-3/4-keeping-score.html",
    "title": "Keeping Score with Global Variables",
    "section": "",
    "text": "On this page, you will use a global variable to keep score in your Click Alonzo game.\n\n\n\nIn your Number Guessing Game, you used script variables to store information (the value of secret number) that was needed by only one script. To keep score in Click Alonzo, more than one script will need access to that information, so you’ll use a global variable.\n\n\n: Global Variable\n\nA global variable is a variable that is usable by all scripts in the program.\n\n\n\n\nWhen are global variables needed?\n\n\nMost of the time, script variables are a better choice because they can’t be changed by some other part of the program, and so they reduce the chance of bugs. But if multiple scripts need access to a variable or if the information in that variable needs to be saved with your project, then use a global variable.\n\n\n\n\n\nOpen your U1L1-ClickAlonzo project, play the game, and review the code so you remember how it works.\n\n\n\n“U2L1-ClickAlonzo” Be sure to rename your project with “U2” in the filename.\n\n\n\nIf you save new work under an old filename, Snap! will overwrite your original project. Use “Save as…” from the Snap! File menu to save with the new name. When you load an older project and are about to make a big change, get in the habit of saving first, with the new name, before you change anything.\n\n\nCreate a global variable named score. Here’s how.\n\n\n\nMaking a Global Variable\n\n\n\nClick  in the Variables palette. (It’s not a block; you can’t drag it into the scripting area.)\n\n\nType the title for your variable. In this case, it’s score.\n\n\nClick “OK.”\n\n\n\n\nUse the score variable to keep track of the player’s score:\n\n\nInitialize score to 0 at the beginning of the game.\n\n\n\nSetting the starting value of a variable is known as initializing the variable.\n\n\n\nAAP-1.B.1\n\n\nMake the program change the score by 1 whenever the sprite is clicked.\n\n\n\n (which means ) would be written as\nscore ← score + 1\nor .\n\n\n\n\n\n\nTest and debug. Play the game enough to make sure that the score variable works. \n\n\n Right now, the game doesn’t have a way to win, but you’ll change that. Decide on the score that you will use to test whether the player has won.\n\n\nUse a conditional to determine when the player reaches that score. When they do:\n\n\nMake Alonzo stop jumping around.\n\n\nMake Alonzo appear again. (You’ll have to reset the ghost effect.)\n\n\nCongratulate the player for a few seconds.\n\n\n\n\n\nTest and debug. Take turns playing, and fix any bugs. \n\n\nDebugging Tip: Display of Variables\n\n\nWhen you are debugging your code, it can help to see the value of a variable at different points in your program. This is done differently for local and global variables:\n\n\nGlobal variables have check-boxes that control the display of the variable watcher on the stage (shown below). \n\n\nIf it’s a local (script) variable, you can use the show variable block inside the script to display a watcher on the stage (and use hide variable to hide it again).\n\n\n\n\n\n\n\n\n\n\nIf the sprite moves without being clicked, make the score go down by 1.\n\n\nGame too hard? Increase the score by 2 for a hit. Too big a change? Increase by 3 for a hit, decrease by 2 for a miss. You can make arbitrarily fine adjustments. This process is called playtuning a game."
  },
  {
    "objectID": "lab-3/5-choosing-avatar.html",
    "href": "lab-3/5-choosing-avatar.html",
    "title": "Choosing a Costume",
    "section": "",
    "text": "In Click Alonzo, the game switched back and forth between two different versions of the Alonzo costume in order to tell the player whether they successfully clicked Alonzo. On this page, you will allow the user of your Click Alonzo program to choose the sprite’s costume.\n\n\n\n\n\nYou learned how to add costumes on Unit 1 Lab 2 Page 3: Customizing and Debugging.\n\n\nIf it isn’t open already, open your U2L1-ClickAlonzo project.\n\n\nSet up what you need for this new version:\n\n\nAdd several costumes.\n\n\nDelete the backwards-Alonzo costume.\n\n\nRemove the code in the program that changes the costume when you click the sprite.\n\n\n\n\nExperiment with the  block using different inputs to switch the sprite’s costume manually a few times.\n\n\n\n\nIf you’re playing your game and you want to change the costume, you can just choose the costume you want by name, in the switch to costume block’s pulldown menu. But imagine you’re giving this game to a non-programmer friend to play. You want to program the selection of a new costume inside the game, so your friend doesn’t have to know anything about blocks.\n\n\nWhen you used item of before (for example, inside who and does what) , you were accessing items of the list randomly. But you can also select a specific item by specifying its position.\n\n\n: Index\n\nThe position number is called the index of the item in the list.   In this list, 1 is the index of the item “apple,” 2 is the index of the item “cantaloupe,” and so on.\n\n\nAAP-1.D.8\n\n\nIn Snap! and on the AP exam, the index is always a whole number (1, 2, 3, 4, etc.). It is an error to use an index less than 1 or greater than the length of the list.\n\n\n\n\nLists can contain anything: letters or words, costumes, other lists, or even blocks. You can use my to report a list of the costumes for your sprite.\n\nThe my block looks like  until you select “costumes” from its drop-down menu.\n\n\n\n\nAnd you can use item of together with my to select a costume in a specific position in the list.\n\n\nSome blocks (such as item of) have input slots that expect a list. You can tell because the input slot looks kind of like a list:  \n\n\n\n\nAAP-2.N part a\n\n\nPractice using the index of the costumes in your list to switch the sprite’s costume a few times.\n\n\nYou can drag blocks into the input slot of switch to costume even though it’s a drop-down menu.  \n\n\n\n\nAAP-2.N part a\n\n\nYou used ask and answer on Unit 2 Lab 1 Page 2: Checking the Player’s Guess.\n\n\nModify your code so the player can select the sprite costume:\n\n\nUse a costumes script variable to store the list of sprite costumes.\n\n\nUse  to show the contents of that variable.\n\n\nAsk the player “Which costume number do you want?”\n\n\nChange to the costume with the index number in the player’s answer.\n\n\nHide the costume list.\n\n\n\n\n\n\n\nAAP-2.N.1 bullet 1\n\n\nThe list expression  would be written as\ncostumes[2]\nor . All three versions of this code would report/return the penguin costume (if only the AP language had costumes as a data type): \n\n\n\n\n\n Without using Snap!, predict what each of the following expressions will report:\n\n\n\n\n\n\n\n\n\n\n\nAAP-2.N part b\n\n\n\n\n\n\n\nExperiment in Snap! to verify your predictions.\n\n\n\n\n\n\n\nAAP-2.N part b\n\nWhich of the following blocks will report a list of length 3? Choose all that apply.\n\n\n\n\n\n\n\nNo, this makes a list of one item, even though it has more than a single word.\n\n\n\n\n\n\n\nNo, item 3 of the list is the word “kiwi” which isn’t a list at all.\n\n\n\n\n\n\n\nThis is one of the two correct answers.\n\n\n\n\n\n\n\nThis is one of the two correct answers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAAP-2.N.1 bullet 7\n\n\nThe expression  would be written as\nLENGTH(wordsList)\nor ."
  },
  {
    "objectID": "lab-3/index.html",
    "href": "lab-3/index.html",
    "title": "Number Guessing Game",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-4/3-pong.html",
    "href": "lab-4/3-pong.html",
    "title": "The Game of Pong",
    "section": "",
    "text": "In this project, you are going to model a computer game called Pong, first developed by Atari in 1972. You will write the code for the paddle which will allow it to move up and down based on user keyboard input and also write the code for the ball which will allow it to bounce every time it hits a wall or the paddle. \n\n\n\n\n\n Discuss with your partner the mathematics behind the ball bouncing off the paddle. How does the initial direction of the ball as it hits the paddle relate to the final direction of the ball as it bounces off the paddle? The following diagram may help.  \n\n\nCreate the paddle and the ball sprites and give them their costumes (filled rectangle and circle).\n\n\nDo this on your own but if you get stuck, look at these hints for the Game of Pong on how to proceed.\n\n\nWrite the code to have the paddle move up and down when the user presses the up arrow and down arrow keys. Don’t let the paddle move beyond the edges of the stage.\n\n\nWrite the code to start the ball moving when green flag is clicked and to bounce off the stage edges and the paddle. Note that there is a built in block to bounce off the edges.\n\n\n \n\n\n\n\nAdd scoring to your game. Every time the paddles bounces off the ball, the player should earn a point and every time the ball hits the right wall, the player should lose a point. You can create a variable to keep track of the score. \n\n\nCreate a second paddle to allow the game to become multiplayer game. Adjust your code to accommodate keyboard input from two users. \n\n\nCreate a second paddle (or use the one from part B if you did that) and let this paddle be driven automatically by the computer for a “human versus computer” version of the game. Hint: You can automate the second paddle by using the following block from the Sensing menu:"
  },
  {
    "objectID": "lab-4/index.html",
    "href": "lab-4/index.html",
    "title": "Song Player",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-5/01-playing-notes.html",
    "href": "lab-5/01-playing-notes.html",
    "title": "Song Player, Activity 1",
    "section": "",
    "text": "&lt;body&gt;\n    &lt;h2&gt;Playing Notes&lt;/h2&gt;\n    &lt;div class=\"todo\"&gt;Revision for 2022-2023:\n        &lt;ul&gt;\n            &lt;li&gt;Check out &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/new/musical-improvisation-from-Jens.xml\" target=\"_blank\"&gt;Jens' project&lt;/a&gt;. As of March 2022, need to open it in &lt;a href=\"https://snap.berkeley.edu/versions/dev\" target=\"_blank\"&gt;the current dev version&lt;/a&gt;.&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;div class=\"todo\"&gt;\n        Links:\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"https://snap.berkeley.edu/versions/dev/snap.html#present:Username=mfries&ProjectName=Music%3A%20play-chord-block_PG_MF\" target=\"_blank\"&gt;See also MF/PG project&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;Maybe use &lt;code&gt;keep&lt;/code&gt; as in &lt;a href=\"/cur/programming/new-ideas/aprilpd/processing-student-grades.html\" target=\"_blank\"&gt;old Processing Student Grades page&lt;/a&gt; (as a cutoff)&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/cur/programming/new-ideas/graphics/colors-sound.html\" target=\"_blank\"&gt;old Looks and Sound stuff&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://docs.google.com/document/d/1ZGj6uApQUyQw3HByk-8tYOU-VPTwduLLbTMhW8LJrXw/edit#\" title=\"Song Player Google Doc\" target=\"_blank\"&gt;Song Player Google Doc&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://localhost/cur/programming/3-lists/optional-projects/4-music-project.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc.html&novideo&noassignment\" title=\"CSP Optional Music Project\" target=\"_blank\"&gt;CSP Optional Music Project&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://docs.google.com/document/d/1VZXWE0abTa6ndwKnCdQIszTmuPEuEJXn6nUHJrL1DCM/edit\" title=\"U2/U3 Planning 2021 Dec\" target=\"_blank\"&gt;U2/U3 Planning 2021 Dec&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        See also:\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"/cur/programming/3-lists/optional-projects/old/music-project-old.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc.html&novideo&noassignment\"&gt;Old sound content collected together&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/cur/programming/new-ideas/graphics/colors-sound.html\"&gt;Old Looks and Sound page&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/cur/programming/2-complexity/old/new/map-music.html\"&gt;The &lt;code&gt;Map&lt;/code&gt; Block &amp; Music&lt;/a&gt; (has invert and round)&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;div class=\"todo\"&gt;Pamela, I'm leaning toward dropping the &lt;code&gt;play ♪&lt;/code&gt; block from the XML files. Not only is it easily confused with the &lt;code&gt;play ♪ pitch: () beats: ()&lt;/code&gt; block (which I've been calling &lt;code&gt;play ♪&lt;/code&gt; in the text), but also, it obscures understanding of what's going with the processing of the table, which I'm explaining in the yellow box below. What do you think of this plan? --MF, 2/24/22&lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you'll teach the computer to play some simple songs and move those songs up and down the musical scale.&lt;/div&gt;\n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/headphones.png\" alt=\"Set Up Your Headphones or Speakers\" title=\"Set Up Your Headphones or Speakers\" /&gt;&lt;/li&gt;\n            &lt;div class=\"vocabBig\"&gt;&lt;p&gt;A &lt;strong&gt;command&lt;/strong&gt; block tells the computer to do something &lt;em&gt;without reporting a value&lt;/em&gt;.&lt;/p&gt;&lt;/div&gt;\n            &lt;div class=\"todo\"&gt;All these js-run things should be changed to plain old snap projects, because right now sbe/versions/v7 is the same as sbe/versions/dev, which is a not-for-users experiment right now.  This is arguably a bug in the Snap&lt;i&gt;!&lt;/i&gt; site, and I'll work on getting it fixed, but since v7 is now regular Snap&lt;i&gt;!&lt;/i&gt;, there's no need to call it out specially. --bh 3/3/22&lt;p&gt;I think this is a comment for Michael. --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n            &lt;li&gt;Open this &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/song-player.xml\" title=\"Song Player - Snap! project\" target=\"_blank\"&gt;Song Player&lt;/a&gt; project, and save it to your account. It includes a &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/play-emoji-note.png\" alt=\"play ♪ pitch: () beats: ()\" title=\"play ♪ pitch: () beats: ()\" /&gt; &lt;em&gt;command&lt;/em&gt; block that takes two inputs: a note to play (&lt;var&gt;pitch&lt;/var&gt;) and how long to play it (&lt;var&gt;beats&lt;/var&gt;).&lt;/li&gt;\n            &lt;div class=\"endnote\" style=\"clear: right;\"&gt;\n                              &lt;div class=\"comment\"&gt;\"click the triangle\": is it a policy to call it that, rather than a down-arrowhead?  It took me a moment to figure out what triangle you meant. --bh 3/3/22&lt;p&gt;That's what we've been doing in CSP. I took Pamela's suggestion and included the Unicode. --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n                &lt;p&gt;The &lt;var&gt;pitch&lt;/var&gt; tells the computer which note to play. It can be any whole number from 0 to 127. The number 60 represents the note known as &lt;a href=\"https://simple.wikipedia.org/wiki/Middle_C\" title=\"middle C\" target=\"_blank\"&gt;middle C&lt;/a&gt;. If you click the triangle (▼), a piano menu will open, and you can hear the note you are selecting.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/play-emoji-note-piano-menu.png\" alt=\"image of 'play note (60) for (0.5) beats' block with piano menu open for first input slot and middle C selected and labeled 'C(60)'\" title=\"image of 'play note (60) for (0.5) beats' block with piano menu open for first input slot and middle C selected and labeled 'C(60)'\" /&gt;\n                &lt;/p&gt;\n                &lt;p&gt;The number of &lt;var&gt;beats&lt;/var&gt; tells the computer how long to play the note. By default, Snap&lt;em&gt;!&lt;/em&gt; plays 60 beats per minute (bpm), so playing a note for 1 beat takes 1 second. You can change the number of beats per minute by using &lt;img class=\"inline nopadtb\" src=\"/img/blocks/set-tempo.png\" alt=\"set tempo to () bpm\" title=\"set tempo to () bpm\" /&gt;.&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div class=\"todo\"&gt;&lt;p&gt;I find both of these inputs problematic.  The first one is called \"pitch\" because you want \"note\" to mean something else.  Avoiding \"note\" is fine, but \"pitch\" implies frequency, in Hz, not MIDI note number.  I would suggest \"note#\" or I guess you could get away with \"pitch#\" or even \"pianokey#\" or \"MIDI#\".  But \"note#\" is closest to what the rest of the world calls it.&lt;/p&gt;&lt;p&gt;As for the second input, when I learned about this stuff a million years ago, a \"beat\" meant one of whatever the denominator of the time in the key signature is, e.g., in 4/4 time it's a quarter note.  You're using \"beat\" to mean a whole measure.  The default of 60 bpm is something we inherited from Scratch, and they did it that way because at first they didn't have a REST block in Sound, so they used WAIT () SECS for rests, so they wanted the unit of time to be seconds for music too.  More typically, you see bpm=120 or 180 at the top of a score; it's the number you tell your metronome, for how often it should tick.  120bpm means that a quarter note is 1/2 second, and a measure takes two seconds.  That's a fairly slow meter.  180bpm means a quarter note is 1/3 second, so a measure is 1.333 seconds, which is more lively.  I suggest that the project should set tempo to 180.&lt;/p&gt;&lt;p&gt;I can see that it makes a certain amount of sense to have an input value of 1/4 for a quarter note, but then \"beats\" is the wrong name.  The really right thing, since you're using a custom block anyway, is to have that input be a pulldown menu from which you can select quarter note, half note, etc., both spelled out and with the Unicode music symbol.  And the label could be \"note type\" or \"length\" or \"duration.\"  I know changing this means lots of changes throughout the lab, probably, but any kid who does know something about music, which is a lot of kids, will find this nomenclature strange. --bh 3/3/22&lt;/p&gt;\ni know nothing about music so I defer to brian’s expertise. –pf 3/3\n\nThanks Brian. I’m leaving this for us to discuss next year as it’s a bit too late to change the whole lab now. I hear you on what’s wrong here, but I disagree with the dropdown as I find it limiting. Looking forward to discussing further when we come back around to this lab. After reading your paragraph, I’m leaning toward play ♪ number: () length: (). Or even just play note, number: () length: (). –MF, 3/6/22\n\n              &lt;/div&gt;\n            &lt;li&gt;Change the inputs to the &lt;code&gt;play ♪&lt;/code&gt; block and then click it, and then change the inputs and click it again to see how the note changes.&lt;/li&gt;\n            &lt;div class=\"sidenote\"&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Right click a block and select \"help\" to see an explanation of how to use it.&lt;/div&gt;\n            &lt;li&gt;Attach several &lt;code&gt;play ♪&lt;/code&gt; blocks together one after another to begin creating a song.\n                &lt;ul&gt;\n                    &lt;li&gt;You can use &lt;img class=\"inline nopadtb\" src=\"/img/blocks/rest.png\" alt=\"rest for () beats\" title=\"rest for () beats\" /&gt; to create breaks in your song.&lt;/li&gt;\n                    &lt;li&gt;You can use &lt;img class=\"inline nopadtb\" src=\"/img/blocks/repeat.png\" alt=\"repeat () {}\" title=\"repeat () {}\" /&gt; block to repeat any command (or group of commands) a specific number of times. Any code you put inside the C-shape of the &lt;code&gt;repeat&lt;/code&gt; block will be repeated.&lt;/li&gt;\n                    &lt;div class=\"todo\"&gt;Did an earlier lab already give repeat a thorough introduction? I was surprised to see it so casually introduced, since looping is usually A Big Deal when I teach it in text-based coding classes. It's certainly easier in block-based, but I feel like it warrants its own section, so that you can talk about what goes in the loop vs. out of the loop (i.e. set-instrument can just be outside the loop, no need to repeat it twice). -PF 2/10/22&lt;p&gt;This is here on the principle of \"experience before formality.\"  The idea is that they have the opportunity (not required) to play with it and try to see what it does before it is formally thought. I thought that might work well with REPEAT since it does exactly what is says. ;) I added a little extra text to help. We can ask teacher for feedback about it... &lt;strong&gt;(Mary TODO)&lt;/strong&gt; Does that seem sensible? What do you think, Brian? --MF, 2/10/22&lt;/p&gt;\n&lt;p&gt;I think the informal introduction is fine, and I don't think looping has to be such a big deal, but I really don't like \"Anything above it will happen before; anything below will happen after\" because it makes it sound as if the REPEAT block somehow affects the sequencing of what comes before and after it.  I would just not say it, but if you think something has to be said, it should be more like \"the entire REPEAT loop counts as one step in the larger script of which it's a part\" or something like that, to make it clear that the overall sequence of steps &lt;i&gt;isn't&lt;/i&gt; messed up by the loop. -bh 3/3/22&lt;/p&gt;\n\nHm, my point about not repeating set-instrument inside REPEAT is probably too subtle for an “experience before formality” type introduction to repeat. Maybe something to point out in the teachers guide, like “if you notice a student has nested blocks inside the repeat that don’t need to be repeated, you could suggest moving them out” with a screenshot of the set-instrument example. And then you can delete the “Any code….” line here since bh doesn’t like it and I also don’t think it adds much. -pf 3/3\n\n                        &lt;p&gt;Brian, I took that out for now, but this is their first experience with sequencing, and I was trying to explain a bit about how it works. Pamela, I'm not convinced that the TG remark you suggested is needed because this is just a chance for them to play around. I'd rather the teacher &lt;em&gt;not&lt;/em&gt; critique a fine point like that. I deleted the line Brian suggested; aren't you asking for the \"Any code you put inside the C-shape...\" to be removed also? --MF, 3/6/22&lt;/p&gt;\n                    &lt;/div&gt;\n                    &lt;li&gt;You can also use &lt;img class=\"inline nopadtb\" src=\"/img/blocks/set-instrument-to.png\" alt=\"set instrument to (1)\" title=\"set instrument to (1)\" /&gt; to change the instrument, &lt;img class=\"inline nopadtb\" src=\"/img/blocks/set-tempo.png\" alt=\"set tempo to () bpm\" title=\"set tempo to () bpm\" /&gt; to change the tempo (beats per minute), or &lt;img class=\"inline nopadtb\" src=\"/img/blocks/set-volume-to-100.png\" alt=\"set volume to () %\" title=\"set volume to () %\" /&gt; to change the volume. Wherever you put one of these blocks, the sound will change from that point on.&lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;div class=\"endnote\"&gt;Here are two examples:\n                    &lt;ul&gt;\n                      &lt;li&gt;\n                      &lt;div class=\"todo\"&gt;\n                          &lt;p&gt;In little-lamb, the two notes just before the REST blur into one for me.  Other instances of consecutive notes at the same pitch don't do that.  This sounds like a deficiency in Snap&lt;i&gt;!&lt;/i&gt; music handling, but do you understand why?  Also, I think that huge long rest sounds wrong; I would leave it out. -bh 3/3/22&lt;/p&gt;\n                          &lt;p&gt;set-instrument-3 is a horrifying sound to me (sawtooth). really grating. I find 2 and 4 more soothing. -pf 3/3&lt;/p&gt;\n                          &lt;p&gt;If you wanted an example song that didn't feel like a lil kids song but that everyone knows, you could do Happy Birthday to You -pf 3/3&lt;/p&gt;\n                          &lt;p&gt;I made no changes here because these are matters of taste, and I need to move on to the next lab. --MF, 3/6/22&lt;/p&gt;"
  },
  {
    "objectID": "lab-5/02-visualizing-loops.html",
    "href": "lab-5/02-visualizing-loops.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 2&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Visualizing Loops&lt;/h2&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you will experiment with &lt;em&gt;loops&lt;/em&gt; and see how they control the order in which the commands are run.&lt;/div&gt;\n\n    &lt;h3&gt;Using Visible Stepping&lt;/h3&gt;\n    &lt;p&gt;Snap&lt;em&gt;!&lt;/em&gt; has a tool called &lt;strong&gt;Visible Stepping&lt;/strong&gt; that allows you to watch Snap&lt;em&gt;!&lt;/em&gt; process the blocks of your code in order. &lt;/p&gt;\n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/headphones.png\" alt=\"Set Up Your Headphones or Speakers\" title=\"Set Up Your Headphones or Speakers\" /&gt;\n                Open this &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-player-fur-elise.xml\" title=\"Sample Song Player - Snap! project\" target=\"_blank\"&gt;Für Elise Example Song&lt;/a&gt;, click the Visible Stepping button (&lt;img class=\"inline nopadtb\" src=\"/img/2-complexity/visible-stepping.png\" alt=\"Visible Stepping button with two footprints\" title=\"Visible Stepping button with two footprints\" /&gt;), click the script to play the song, and watch how Visible Stepping shows how the program moves through the nested repeat blocks.&lt;br /&gt;\n\n\nIt feels like Snap speeds up the playback in each subsequent repeat, maybe due to having the audio cached? I felt like it was getting faster and faster. Not sure if thats in my head or not! Also, another Snap music bug- it seems like the final note sometimes persists for way longer, perhaps related to me being in a separate tab. -PF 3/3/22\n\n\nYes, that’s by design. ;) There is a change tempo block inside the repeat. I was hoping that students would discuss this script and realize what is happening. I do generally experience weird sound stuff, but not a long last note; I get shortened first notes! I believe Michael thinks that has to do with the way sounds are implemented. –MF, 3/6/22\n\n\n                &lt;div class=\"endnote\"&gt;\n                    &lt;p&gt;&lt;a href=\"#hint-visible-stepping\" data-toggle=\"collapse\" title=\"Click for an example of visible stepping in action.\"&gt;Click for an example of visible stepping in action.&lt;/a&gt;&lt;/p&gt;\n                    &lt;div id=\"hint-visible-stepping\" class=\"collapse\"&gt;\n                        &lt;img class=\"indent\" src=\"/img/U2/lab01/sample-song-player-fur-elise.gif\" alt=\"animation of Snap! script with a repeat block inside a repeat block with several sound blocks. At the beginning of the animation, the mouse clicks the Visible Stepping button (two footsteps), and then when the script is run, each block lights up as it is run showing how the computer follows instructions through nested repeats.\" title=\"animation of Snap! script with a repeat block inside a repeat block with several sound blocks. At the beginning of the animation, the mouse clicks the Visible Stepping button (two footsteps), and then when the script is run, each block lights up as it is run showing how the computer follows instructions through nested repeats.\" /&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/talk-with-your-partner.png\" alt=\"Talk with Your Partner\" title=\"Talk with Your Partner\" /&gt;\n                Discuss what happens when the script is run. In what order does Snap&lt;em&gt;!&lt;/em&gt; run these instructions? Why does the song get faster?\n            &lt;/li&gt;\n            &lt;li&gt;\n                Now, open your \"Song Player\" project from the previous activity page, click the Visible Stepping button, and play your song.\n            &lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"endnote\"&gt;\n      &lt;div class=\"todo\"&gt;What's the point of this box?  Does it say anything that isn't obvious?  That the kids don't already know? --bh 3/3/22&lt;/div&gt;Visible Stepping (&lt;img class=\"inline nopadtb\" src=\"/img/2-complexity/visible-stepping.png\" alt=\"Visible Stepping button with two footprints\" title=\"Visible Stepping button with two footprints\" /&gt;) can be useful when reading code because you can see what block is running.&lt;/div&gt;\n\n    &lt;h3&gt;Looping Your Song&lt;/h3&gt;\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol start=\"4\"&gt;\n            &lt;div class=\"vocab\"&gt;\n                &lt;p&gt;Repeating the same set of commands (such as with &lt;code&gt;repeat&lt;/code&gt; or &lt;code&gt;forever&lt;/code&gt;) is called &lt;strong&gt;looping&lt;/strong&gt; or &lt;strong&gt;iteration&lt;/strong&gt;.&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;li&gt;If you haven't already, try using the &lt;img class=\"inline nopadtb\" src=\"/img/blocks/repeat.png\" alt=\"repeat () {}\" title=\"repeat () {}\" /&gt; block to repeat a note or a sequence of notes in a song. Play your song with Visible Stepping turned on.&lt;/li&gt;\n            &lt;li&gt;Try nesting one &lt;code&gt;repeat&lt;/code&gt; inside another as in the \"Für Elise\" example above.&lt;/li&gt;\n            &lt;li&gt;\n                Try using a &lt;img class=\"inline nopadtb\" src=\"/img/blocks/forever-full-size.png\" alt=\"forever\" title=\"forever\" /&gt; block to repeat a command (or group of commands) forever, and play your song with Visible Stepping on.\n                &lt;div class=\"narrower\" style=\"clear: right;\"&gt;The sequence of blocks &lt;em&gt;inside&lt;/em&gt; the &lt;code&gt;forever&lt;/code&gt; block will repeat until you stop it. You can &lt;strong&gt;click the red stop sign&lt;/strong&gt; (&lt;img src=\"/img/1-introduction/stop_button.png\" alt=\"red stop button\" title=\"red stop button\"/&gt;) to stop all scripts in your project from running, or you can click an individual script to stop it.&lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you used &lt;em&gt;iteration&lt;/em&gt; to repeat a set of commands.\n    &lt;div class=\"todo\"&gt;What?  You used iteration &lt;em&gt;by repeating&lt;/em&gt; a set of commands, if anything.  Does this box really mean \"In this activity you learned the word 'iteration'\"?  (And, Mary, aren't you the comma minimalist in our gang?)  --bh 3/3/22&lt;p&gt;I'm not sure what the issue is here, Brian. Could you please suggest an alternative? --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n    &lt;/div&gt;"
  },
  {
    "objectID": "lab-5/03-programming-styles.html",
    "href": "lab-5/03-programming-styles.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 3&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Programming Styles&lt;/h2&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you'll learn about the difference between programming by nesting reporter blocks inside each other and programming by stacking command blocks top to bottom.&lt;/div&gt;\n\n    &lt;h3&gt;Commands Versus Reporters&lt;/h3&gt;\n    &lt;p&gt;Before this unit, you nested blocks inside each other so that the output reported by one block became the input to another. That style of programming is known as &lt;em&gt;functional programming&lt;/em&gt;, and in Snap&lt;em&gt;!&lt;/em&gt;, it uses &lt;em&gt;reporter&lt;/em&gt; blocks. A reporter computes a value and reports it (to you or to other blocks).&lt;br /&gt;\n    &lt;img class=\"indent\" src=\"/img/U2/lab01/emoji-example.png\" alt=\"songify (emojify (uppercase ('They love soccer so much that it's funny'))) reporting '🎶 THEY ❤️ ⚽️ SO MUCH THAT IT'S 😂  🎶'\" title=\"songify (emojify (uppercase ('They love soccer so much that it's funny'))) reporting '🎶 THEY ❤️ ⚽️ SO MUCH THAT IT'S 😂  🎶'\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        In this unit, you've been stacking blocks that carry out &lt;em&gt;actions,&lt;/em&gt; such as playing a note. This style of programming is called &lt;em&gt;imperative programming&lt;/em&gt;. In Snap&lt;em&gt;!&lt;/em&gt;, imperative programming uses &lt;em&gt;command&lt;/em&gt; blocks. A command tells the computer to do something, (play a sound, draw, move, change something, etc.). Commands have &lt;em&gt;effects.&lt;/em&gt;&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/fur-elise-snippet.png\" alt=\"repeat (2) {\nplay ♪ pitch: (64) beats: (0.5)\nplay ♪ pitch: (63) beats: (0.5)\n} play ♪ pitch: (64) beats: (0.5) play ♪ pitch: (59) beats: (0.5) ” title=“” /&gt;\n\n    &lt;p&gt;The shapes of the blocks go with the shapes of the places where you can use them.  Reporters are round, and they go into round slots in a block.  Commands are more rectangular, and they have a tab at the bottom that fits into the gap at the top of another command block.  Snap&lt;em&gt;!&lt;/em&gt; won't let you put a reporter in a stack of commands or put a command in a round slot.&lt;/p&gt;\n\n    &lt;div class=\"vocabFullWidth\"&gt;\n        &lt;div class=\"sidenote\"&gt;You learned about reporters in &lt;a href=\"/student-pages/U1/L1/04-say-hello-to-snap.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 1 Activity 4: Say Hello to Snap!\"&gt;Unit 1 Lab 1 Activity 4: Say Hello to Snap&lt;em&gt;!&lt;/em&gt;&lt;/a&gt;.&lt;/div&gt;\n        &lt;p&gt;\n            A &lt;strong&gt;reporter&lt;/strong&gt; block does a calculation and reports the result. Reporters have an oval shape. &lt;br /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/item.png\" alt=\"item () of 'list input slot'\" title=\"item () of 'list input slot'\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/join.png\" alt=\"join () ()\" title=\"join () ()\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/reporter-if.png\" alt=\"if 'predicate input slot' then () else ()\" title=\"if 'predicate input slot' then () else ()\" /&gt;\n        &lt;/p&gt;\n        &lt;div class=\"sidenote\"&gt;You learned about predicates in &lt;a href=\"/student-pages/U1/L6/02-l33t-text.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 6 Activity 2: L33t Text\"&gt;Unit 1 Lab 6 Activity 2: L33t Text&lt;/a&gt;.&lt;/div&gt;\n        &lt;p&gt;\n            A &lt;strong&gt;predicate&lt;/strong&gt; is a special kind of reporter that asks a true/false question and reports either true or false. Predicates have a hexagon shape.&lt;br /&gt;\n             &lt;img class=\"indent\" src=\"/img/blocks/is-a-list.png\" alt=\"What does IS () A (LIST)? do?\" title=\"What does IS () A (LIST)? do?\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/mouse-down-full-size.png\" alt=\"mouse down?\" title=\"mouse down?\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/equal.png\" alt=\"() = ()\" title=\"() = ()\" /&gt;\n        &lt;/p&gt;\n        &lt;div class=\"sidenote\"&gt;You'll use commands much more in Unit 2.&lt;/div&gt;\n        &lt;p&gt;\n            A &lt;strong&gt;command&lt;/strong&gt; block tells the computer to do something &lt;em&gt;without reporting a value&lt;/em&gt;. Commands have a puzzle shape and can be snapped together one after another. &lt;br /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/set-tempo-to-60-bpm.png\" alt=\"set tempo to () bpm\" title=\"set tempo to () bpm\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/repeat.png\" alt=\"repeat () {}\" title=\"repeat () {}\" /&gt;\n            &lt;img class=\"indent\" src=\"/img/blocks/delete-empty.png\" alt=\"delete () from 'list input slot'\" title=\"delete () from 'list input slot'\" /&gt;\n        &lt;/p&gt;\n        &lt;div class=\"endnote\" style=\"clear: right;\"&gt;Unlike reporters, a command block doesn't report anything, so you can't use its result as the input to another block&mdash;its result is an action, not a value!&lt;/div&gt;\n    &lt;/div&gt;\n    \n    &lt;h3&gt;Creating a Command Block&lt;/h3&gt;\n    &lt;p&gt;You've created a reporter block before. You can create a command block in almost exactly the same way.&lt;/p&gt;\n    &lt;div class=\"endnote\"&gt;&lt;div class=\"comment\"&gt;Note to Mary for later: Check this link next year after the 1.2 page has been split up. --MF, 2/5/22&lt;/div&gt;You learned how to create a reporter in &lt;a href=\"/student-pages/U1/L2/02-refining-the-story.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 2 Activity 2: Refining the Story\"&gt;Unit 1 Lab 2 Activity 2: Refining the Story&lt;/a&gt;.&lt;/div&gt;\n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n          &lt;div class=\"comment\"&gt;&lt;p&gt;Note to Mary for later: Older instantiations of this image in &lt;a href=\"/student-pages/U1/L2/02-refining-the-story.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 2 Activity 2: Refining the Story\"&gt;Sparks 1.2.2&lt;/a&gt; and &lt;a href=\"/cur/programming/1-introduction/2-gossip-and-greet/4-making-a-new-block.html?topic=nyc_bjc%2F1-intro-loops.topic&course=bjc4nyc.html&novideo&noassignment\"&gt;CSP 1.2.4&lt;/a&gt; need to be updated for the new palette list ordering. Also the \"text box label 'Type a title for your block'\" and \"label 'Select a shape'\" are both gone now. And \"with no label of which 'for all sprites' is selected\" could be deleted. --MF, 2/9/22&lt;/p&gt;\n          &lt;p&gt;No, it's this picture that should change.  The \"new ordering\" was a bug, now fixed.  Also, should this picture be made at zoom level 1 instead of 1.5 so that it looks the way students will see it (with the category chooser centered etc.)?  --bh 3/3/22&lt;/p&gt;&lt;/div&gt;\n          &lt;img class=\"imageRight noshadow\" src=\"/img/U2/lab01/make-a-block-mystery-song-labels.png\" alt=\"image of 'Make a block' dialog box with 10 palette menus (Motion, Looks, Sound, Pen, Other, Control, Sensing, Operators, Variables, Lists) of which Sound is selected; a text box in which 'mystery song' has been written; three block shape options (puzzle-shaped/'Command', oval/'Reporter', and hexagonal/'Predicate') of which 'Command' is selected; two radio boxes ('for all sprites', which is checked, and 'for this sprite only', which is not checked); and two buttons ('OK' and 'Cancel')\" title=\"image of 'Make a block' dialog box with 10 palette menus (Motion, Looks, Sound, Pen, Other, Control, Sensing, Operators, Variables, Lists) of which Sound is selected; a text box in which 'mystery song' has been written; three block shape options (puzzle-shaped/'Command', oval/'Reporter', and hexagonal/'Predicate') of which 'Command' is selected; two radio boxes ('for all sprites', which is checked, and 'for this sprite only', which is not checked); and two buttons ('OK' and 'Cancel')\" /&gt;\n            \n            &lt;div class=\"todo\"&gt;I wonder if we should have them save this as a separate project called \"Mystery Song\". --MF, 2/27/22&lt;br&gt;\nI don’t feel strongly either way, or at least not so far. Not sure if I’ll change my mind when I go through rest of lab. -PF 3/3/22"
  },
  {
    "objectID": "lab-5/04-mystery-song-game.html",
    "href": "lab-5/04-mystery-song-game.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 4&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Mystery Song Game&lt;/h2&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you will use your &lt;code&gt;mystery song&lt;/code&gt; block to create a game.&lt;/div&gt;\n    \n    &lt;p&gt;\n        There are command block versions of two blocks you've already seen:\n        &lt;ul&gt;\n            &lt;li&gt;\n                You've used the &lt;img class=\"inline nopadtb\" src=\"/img/blocks/reporter-if.png\" alt=\"if 'predicate input slot' then () else ()\" title=\"if 'predicate input slot' then () else ()\" /&gt; reporter. Snap&lt;em&gt;!&lt;/em&gt; also    has a built-in command version: \n                &lt;img class=\"inline\" src=\"/img/blocks/if-else-full-size.png\" alt=\"if 'predicate input slot' then 'C-shaped input slot' else 'C-shaped input slot'\" title=\"if 'predicate input slot' then 'C-shaped input slot' else 'C-shaped input slot'\" /&gt;\n                &lt;div class=\"endnote\"&gt;\n                    &lt;a href=\"#hint-if\" data-toggle=\"collapse\" title=\"Learn more about the difference between the reporter IF THEN ELSE and the command IF ELSE.\"&gt;Learn more about the difference between the reporter &lt;code&gt;if then else&lt;/code&gt; and the command &lt;code&gt;if else&lt;/code&gt;.&lt;/a&gt;\n                &lt;div id=\"hint-if\" class=\"collapse\"&gt;\n                  &lt;div class=\"todo\"&gt;\"what the computer should report.\"  What does that mean?  It's not \"the computer\" that's reporting; it's a particular block, namely the IF THEN ELSE block.  If what this means is that IF THEN ELSE appears in a custom reporter and decides what the reporter should report, that's the case only if the IF THEN ELSE is directly the input to a REPORT, rather than part of a larger computation.  I think I'd say \"... to choose one of two possible values to report.\"  That makes it IF THEN ELSE itself that's reporting.  \"... what the computer should do\" is more defensible, but pretty vague.  I'd rather see \"to decide which of two scripts to run.\" --bh 3/3/22&lt;br&gt;\nI like “to choose one of two possible values to report” or “what the block should report.” I don’t like ‘scripts’ as I get confused about what scripts mean. - pf 3/3/22"
  },
  {
    "objectID": "lab-5/05-beat-repeat.html",
    "href": "lab-5/05-beat-repeat.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;script type=\"text/javascript\" src=\"/utilities/gifffer.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;window.onload = function() {Gifffer();}&lt;/script&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bjc-gifffer.css\"&gt;\n    &lt;title&gt;Unit 2 Lab 1: Song Player, Activity 5&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Beat Repeat&lt;/h2&gt;\n    &lt;div class=\"todo\"&gt;I love this name, but I don't think it goes well with this particular page anymore. Thoughts? \"Listing the Notes of a Song\"? \"Simplifying Your Song\"? \"Programming a Song More Efficiently\" \"Playing Each Note in a List\"? I like \"&lt;strong&gt;Playing Each Note in a List&lt;/strong&gt;\" best. Thoughts? --MF, 2/12/22  +1 bh&lt;p&gt;To do for next year. --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n    &lt;div class=\"todo\"&gt;I made a really nice FOR EACH animation that is buried in a yellow box on page 8. I should make another one for this page. It should probably go just before the second header (after exercise 3). --MF, 2/27/22&lt;/div&gt;\n\n    &lt;div class=\"todo\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"https://docs.google.com/document/d/1ZGj6uApQUyQw3HByk-8tYOU-VPTwduLLbTMhW8LJrXw/edit#\" title=\"Song Player Google Doc\" target=\"_blank\"&gt;Song Player Google Doc&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"https://localhost/cur/programming/3-lists/optional-projects/4-music-project.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc.html&novideo&noassignment\" title=\"CSP Optional Music Project\" target=\"_blank\"&gt;CSP Optional Music Project&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you will make it easier to play a song by putting the notes in a list.&lt;/div&gt;\n\n    &lt;h3&gt;Using &lt;code&gt;For Each&lt;/code&gt; to Traverse a List&lt;/h3&gt;\n    &lt;div class=\"todo\"&gt;&lt;p&gt;The paragraph below is well-intentioned, but it doesn't belong here.  Maybe after your sample song that uses REPEAT?&lt;/p&gt;&lt;p&gt;Where do you mean, exactly? --MF, 3/6/22&lt;/p&gt;\n      &lt;div class=\"todo\"&gt;\n        &lt;p&gt;Using the &lt;code&gt;repeat&lt;/code&gt; block strategically can make your code shorter and easier to read. It's generally a good idea to write shorter code that is easier to read because when something isn't working right, it's easier to find and fix the problem, or when you want to change it later or have someone else read it, that's easier too.&lt;/p&gt;\n        &lt;/div&gt;&lt;/div&gt;\n    &lt;p&gt;\n        &lt;img class=\"imageRight nopadtb\" src=\"/img/blocks/for-each.png\" alt=\"for each (item) in 'list input slot' {\n}” title=“for each (item) in ‘list input slot’ { }” /&gt; One way to simplify writing a song is to use a list to store the pitches and then play each pitch in the list. You can use for each to run a command (or group of commands) for each item in a list. For example:  \n\n    &lt;div class=\"endnote\"&gt;Playing the pitch 0 works like a rest (a pause in the music).&lt;/div&gt;\n\n    &lt;div class=\"vocabFullWidth\"&gt;\n        &lt;p&gt;A &lt;strong&gt;list&lt;/strong&gt; is an ordered sequence of items. You've been using lists throughout this course: to store words for a story, to manipulate the letters of a secret message, and even to store lists such as each individual's responses to the question in a survey.&lt;/p&gt;\n        &lt;div class=\"endnote\"&gt;\n            &lt;a href=\"#ordered\" data-toggle=\"collapse\" title=\"What does 'ordered' mean?\"&gt;What does \"ordered\" mean?&lt;/a&gt;\n            &lt;div id=\"ordered\" class=\"collapse\"&gt;\n                &lt;p&gt;\n                    It doesn't mean that the items have to appear in alphabetical or numeric order.  It just means that these are different lists:&lt;br /&gt;\n                    &lt;img class=\"indent\" src=\"/img/1-introduction/list-a-b.png\" alt=\"(list a b)\" title=\"(list a b\"&gt;\n                    &lt;img class=\"indent\" src=\"/img/1-introduction/list-b-a.png\" alt=\"(list b a)\" title=\"(list b a)\"&gt;\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;\n                Log in to Snap!, and do one of the following:\n                &lt;div class=\"todo\"&gt;\n                    &lt;p&gt;This might be a risky move. I was hoping to give the kids a chance to start from scratch if they had a cluttered project, but it does mean that from this page on, some students will have only one project for the lab while others will have two. It also means that I can't refer to their project by name on the subsequent pages, so if they name it awkwardly and forget the name, they won't be able to find it. Thoughts? --MF, 2/23/22&lt;/p&gt;\n                    &lt;p&gt;The further along I get in writing this lab, the more I regret this choice because I have no way of telling them what project I want them to open other than \"your last one\". I'm now thinking they should start from a new starter XML here without any option. Thoughts? --MF, 2/27/22&lt;/p&gt;\n                    &lt;p&gt;I agree, pick one. I first thought they should start with the example project, but then they don't get the practice in exercise 2.  Maybe have them start with the sample (which should be called the &lt;em&gt;starter&lt;/em&gt; instead of sample) but still make them make their own FOR EACH block? -bh 3/3/22&lt;/p&gt;\n                    &lt;p&gt;How about they start with starter project and you can remind them they can open up song player in another tab to remember the pitches that they used? -pf 3/3/22&lt;/p&gt;\n                    &lt;p&gt;To resolve next time around. --MF, 3/6/22&lt;/p&gt;\n                &lt;/div&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Open the &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-with-for-each.xml\" title=\"Example of For Each - Snap! project\" target=\"_blank\"&gt;&lt;code&gt;for each&lt;/code&gt; example project&lt;/a&gt; and save it to your Snap&lt;em&gt;!&lt;/em&gt; account.&lt;/li&gt;\n                    &lt;li&gt;Open your \"Song Player\" project if isn't open already.&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Create a simple song using &lt;code&gt;for each&lt;/code&gt;. If you opened the example project, edit the pitches in the list to create your song. If you opened your own \"Song Player\" project...\n                &lt;ol&gt;\n                    &lt;li&gt;Drag a &lt;code&gt;for each&lt;/code&gt; block into the scripting area, and drag a &lt;code&gt;play ♪&lt;/code&gt; block inside it.&lt;br /&gt;\n                        &lt;img class=\"indent\" src=\"/img/U2/lab01/for-each-play-note.png\" alt=\"for each (item) in 'list input slot {\nplay ♪ pitch: () beats: ()\n}” title=“for each (item) in ’list input slot { play ♪ pitch: () beats: () }” /&gt;\n\n                    &lt;li&gt;\n                        Rename the &lt;var&gt;item&lt;/var&gt; variable to &lt;var&gt;pitch&lt;/var&gt; by clicking it, typing the new name (\"pitch\"), and clicking \"OK.\"&lt;br /&gt;\n                        &lt;div class=\"comment\"&gt;\n                            &lt;p&gt;The orange color of item is inaccessible per https://webaim.org/resources/contrastchecker/  It would need to be a significantly darker orange to meet a11y contrast standards. -pf 3/3/22&lt;/p&gt;\n                            &lt;p&gt;Thanks. Let's address this at a meeting. --MF, 3/6/22&lt;/p&gt;\n                        &lt;/div&gt;\n                        &lt;img class=\"indent\" data-gifffer=\"/img/U2/lab01/for-each-pitch-variable.gif\" alt=\"animation showing the user clicking the 'item' variable in a 'for each block', typing 'pitch', and then pressing 'OK.' The 'for each' variable is then named 'pitch' and not 'item'\" title=\"animation showing the user clicking the 'item' variable in a 'for each block', typing 'pitch', and then pressing 'OK.' The 'for each' variable is then named 'pitch' and not 'item'\" /&gt;\n                    &lt;/li&gt;\n                    &lt;li&gt;\n                        Drag the &lt;var&gt;pitch&lt;/var&gt; variable into the \"pitch\" input (the first input) of the &lt;code&gt;play ♪&lt;/code&gt; block. Dragging will make a copy of &lt;var&gt;pitch&lt;/var&gt;, so you should see &lt;var&gt;pitch&lt;/var&gt; in both places.&lt;br /&gt;\n                        &lt;img class=\"indent\" data-gifffer=\"/img/U2/lab01/for-each-pitch-variable-move.gif\" alt=\"animation showing the user clicking the 'pitch' variable and dragging it into the first input slot of the 'play ♪' block\" title=\"animation showing the user clicking the 'pitch' variable and dragging it into the first input slot of the 'play ♪' block\" /&gt;\n                    &lt;/li&gt;\n                    &lt;li&gt;Type a number for the \"beats\" input (the second input) of the &lt;code&gt;play ♪&lt;/code&gt; block. (For example, if you want half notes, type the number \"0.5\".)&lt;/li&gt;\n                    &lt;li&gt;\n                        Drag a &lt;code&gt;list&lt;/code&gt; block into the list input slot of the &lt;code&gt;for each&lt;/code&gt; block, add some notes, and click the script to test out your song as you build it.&lt;br /&gt;\n                        &lt;img class=\"indent\" data-gifffer=\"/img/U2/lab01/for-each-list.gif\" alt=\"animation showing the LIST block being dragged into the list input slot of the FOR EACH block. The right triangle button in the LIST block is clicked twice, and each time three additional inputs to the LIST block appear. The numbers 60, 60, 67, 67, 69, 69, 67 are typed into the inputs to the LIST block, and then the FOR EACH block is clicked.\" title=\"animation showing the LIST block being dragged into the list input slot of the FOR EACH block. The right triangle button in the LIST block is clicked twice, and each time three additional inputs to the LIST block appear. The numbers 60, 60, 67, 67, 69, 69, 67 are typed into the inputs to the LIST block, and then the FOR EACH block is clicked.\" /&gt;\n                    &lt;/li&gt;\n                    &lt;div class=\"endnote\"&gt;\n                        Tips for working with the &lt;code&gt;list&lt;/code&gt; block:\n                        &lt;ul&gt;\n                            &lt;li&gt;If you hold down the \"shift\" key when you press the ◂ or ▸ buttons, it will remove or add &lt;em&gt;three&lt;/em&gt; spaces at the end of the list instead of just one.&lt;/li&gt;\n                            &lt;li&gt;You can press the \"tab\" key to move the typing cursor to the next input slot without using your mouse.&lt;/li&gt;\n                            &lt;li&gt;If you want to add or remove a pitch from your list, you don't have to move the other numbers around. To add a new slot, right-click the slot where you want it to appear, and select \"insert a slot.\" To remove a slot, right-click it, and select \"delete slot.\" &lt;/li&gt;\n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/ol&gt;\n            &lt;/li&gt;\n            &lt;li&gt;Make sure your script plays your song correctly before moving on.&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"todo\"&gt;Maybe add a page break here in the future? --MF, 2/28/22&lt;/div&gt;\n    &lt;h3&gt;Using &lt;code&gt;For Each&lt;/code&gt; to Play &lt;em&gt;Any&lt;/em&gt; List of Pitches&lt;/h3&gt;\n    &lt;p&gt;\n        You can create a &lt;code&gt;play song&lt;/code&gt; block that will apply this script to any input song.&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-with-inputs.png\" alt=\"play song (list (60) (60) (67) (67) (69) (69) (67))\" title=\"play song (list (60) (60) (67) (67) (69) (69) (67))\" /&gt;\n    &lt;/p&gt;\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;div class=\"todo\"&gt;\n            &lt;p&gt;How much experience have they had before this of generalizing a script by turning it into a procedure with an input?  They should have done that several times by now, no?  So that experience should be called out here.  \"Remember how you generalized your blah blah by making it a procedure with an input?  You can do the same thing with this script that plays the notes in a list.\" --bh 3/3/22&lt;/p&gt;\n            &lt;p&gt;To revisit... --MF, 3/6/22&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;ol start=\"4\"&gt;\n            &lt;li&gt;Create a new command block called &lt;code&gt;play song&lt;/code&gt; that takes a list of notes as input and plays each note in the list using &lt;code&gt;for each&lt;/code&gt;.\n                &lt;div class=\"todo\"&gt;If we ever remake this animation, the &lt;code&gt;play song&lt;/code&gt; block should be pink! --MF, 2/21/22&lt;/div&gt;\n                &lt;div class=\"endnote\"&gt;\n                    &lt;p&gt;&lt;a href=\"#hint-new-block\" data-toggle=\"collapse\" title=\"Click for a hint about creating a new command block that takes a list of notes as input and plays each note in the list using FOR EACH.\"&gt;Click for a hint.&lt;/a&gt;&lt;/p&gt;\n                    &lt;div id=\"hint-new-block\" class=\"collapse\"&gt;\n                        &lt;p&gt;\n                            &lt;ol&gt;\n                                &lt;li&gt;Create a new block called &lt;code&gt;play song&lt;/code&gt; that takes one input called &lt;var&gt;song&lt;/var&gt;, which will be a list of pitches. (To add an input, you have the hover over the tiny space to the right of the block name to get the plus sign (+) to show up and then click it.)&lt;/li&gt;\n                                &lt;li&gt;Duplicate your &lt;code&gt;for each pitch, play ♪&lt;/code&gt; code by right-clicking the &lt;code&gt;for each&lt;/code&gt; block and selecting \"duplicate,\" and then attach the copied code to the &lt;code&gt;play song&lt;/code&gt; hat block in the block editor.&lt;/li&gt;\n                                &lt;li&gt;Remove the list block containing your previous song, drag the &lt;var&gt;song&lt;/var&gt; variable into the &lt;code&gt;for each&lt;/code&gt; block where &lt;var&gt;song&lt;/var&gt; had been, and click, \"OK.\"&lt;/li&gt;\n                            &lt;/ol&gt;\n                        &lt;/p&gt;\n                        &lt;p&gt;&lt;a href=\"#hint-new-block-animation\" data-toggle=\"collapse\" title=\"Click for a video showing how to create the new command block.\"&gt;Click for a video.&lt;/a&gt;&lt;/p&gt;\n                        &lt;div id=\"hint-new-block-animation\" class=\"collapse\"&gt;\n                            &lt;img class=\"indent\" data-gifffer=\"/img/U2/lab01/play-song-block-animation.gif\" alt=\"animation showing the steps for creating a new command block that takes a list of notes as input and plays each note in the list: 1) Create a new block called PLAY SONG that takes one input called SONG, which will be a list of pitches; 2) Duplicate your FOR EACH PITCH, PLAY ♪ code by right-clicking the FOR EACH block and selecting 'duplicate,' and then attach the copied code to the PLAY SONG hat block in the block editor; 3) Remove the list block containing your previous song, drag the SONG variable into the FOR EACH block where SONG had been, and click, 'OK.'\" title=\"animation showing the steps for creating a new command block that takes a list of notes as input and plays each note in the list: 1) Create a new block called PLAY SONG that takes one input called SONG, which will be a list of pitches; 2) Duplicate your FOR EACH PITCH, PLAY ♪ code by right-clicking the FOR EACH block and selecting 'duplicate,' and then attach the copied code to the PLAY SONG hat block in the block editor; 3) Remove the list block containing your previous song, drag the SONG variable into the FOR EACH block where SONG had been, and click, 'OK.'\" /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n\n\nSorry, this is another Snap bug report, but when I ran play-song, the song suddenly sounded horrifying. I even added an explicit set-instrument to 1 but it still sounds really sharp/grating. It did that for the first 3 times I played it. After writing this comment, it seems to be okay. Not sure what triggers it. I still am getting the issue where switching tabs while playing a song prolongs the current note, that seems very repeatable. -pf 3/3/22\n\n\nThis needs to go on GH not in the curriculum. https://github.com/jmoenig/Snap/issues :) –MF, 3/6/22\n\n\n            &lt;li&gt;Try out your &lt;code&gt;play song&lt;/code&gt; block with at least two different lists of pitches, and fix any issues with the block.&lt;/li&gt;\n            &lt;li&gt;\n                Create help text for your &lt;code&gt;play song&lt;/code&gt; block by attaching a comment to the hat block. The help text should describe what the block takes as input and what effect the block produces.\n                &lt;div class=\"endnote\"&gt;\n                    You learned about adding comments to your code in the \"Adding Program Documentation\" section of &lt;a href=\"/student-pages/U1/L6/01-texting-time.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 6 Activity 1: Texting Time\"&gt;Unit 1 Lab 6 Activity 1: Texting Time&lt;/a&gt;.&lt;br /&gt;\n                    &lt;img class=\"indent\" src=\"/img/U1/lab06/uppercase-hat-block-comment.png\" alt=\"uppercase block code with a comment attached to the hat block. The comment contains the text 'This block takes a string of text as input and reports the same text but with all of the lowercase letters changed to uppercase.'\" title=\"uppercase block code with a comment attached to the hat block. The comment contains the text 'This block takes a string of text as input and reports the same text but with all of the lowercase letters changed to uppercase.'\" /&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"endnote\"&gt;\n        &lt;p&gt;&lt;a href=\"#hint-target\" data-toggle=\"collapse\" title=\"Does my play song block have to play every note for the same length of time?\"&gt;Does my &lt;code&gt;play song&lt;/code&gt; block have to play every note for the same length of time?&lt;/a&gt;&lt;/p&gt;\n        &lt;div id=\"hint-target\" class=\"collapse\"&gt;&lt;p&gt;No. On a later page, you can learn a way to store and play songs with both pitch and beat information about each note.&lt;/p&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you used &lt;code&gt;for each&lt;/code&gt; to play each pitch in a list and created a &lt;code&gt;play song&lt;/code&gt; block that will work with any list of pitches.&lt;/div&gt;\n    &lt;div class=\"todo\"&gt;&lt;p&gt;This is a more general problem, but it looks particularly bad here: When a &lt;code&gt; text embedded in a line includes spaces, the spaces are way too big compared to all the other spaces on the line. Ideally you'd say &lt;code&gt;&lt;code&gt;for&lt;/code&gt; &lt;code&gt;each&lt;/code&gt;&lt;/code&gt; but that's too horrible to contemplate, so somehow it should be fixed in the Javascript. --bh 3/3/22&lt;/p&gt;&lt;p&gt;Go for it! :) --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;"
  },
  {
    "objectID": "lab-5/06-storing-songs.html",
    "href": "lab-5/06-storing-songs.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 6&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Storing Songs&lt;/h2&gt;\n    &lt;div class=\"todo\"&gt;In the future, there could be an optional exercise at the end of this page to go back and modify their mystery song project to make it tally correct responses and perhaps even deduct points for wrong answers. --MF, 2/27/22&lt;/div&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you will use a variable to store a list of notes.&lt;/div&gt;\n    &lt;p&gt;\n        In the &lt;a href=\"/student-pages/U1/L2/03-creating-editing-blocks.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 2: Super Short Stories, Activity 3: Creating and Editing Blocks\" target=\"_blank\"&gt;Super Short Stories&lt;/a&gt; lab, you began using &lt;em&gt;local variables&lt;/em&gt; to access the inputs to a block you were editing. Those variables were only available within that block.&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U1/lab02/super-short-story-block-editor.png\" alt=\"Super Short Story, feeling: (feeling) job: (job) action: (action 1) place: (place) action: (action 2) number: (number #) color: (color) plural animal: (animals) food: (food): {report (join words ('The') (feeling) (job) (action 1) ('through') (place) ('and') (action 2) ('over') (number) (color) (animals) ('eating') (food))}\" title=\"Super Short Story, feeling: (feeling) job: (job) action: (action 1) place: (place) action: (action 2) number: (number #) color: (color) plural animal: (animals) food: (food): {report (join words ('The') (feeling) (job) (action 1) ('through') (place) ('and') (action 2) ('over') (number) (color) (animals) ('eating') (food))}\" /&gt;&lt;br /&gt;\n        When you need a variable to be available &lt;em&gt;anywhere&lt;/em&gt; in your project, you can use a &lt;em&gt;global variable&lt;/em&gt;.\n    &lt;/p&gt;\n    &lt;div class=\"vocabFullWidth\"&gt;: &lt;strong&gt;Global Variable&lt;/strong&gt;\n        &lt;p&gt;A &lt;strong&gt;global variable&lt;/strong&gt; is a variable that is usable by all scripts in the program.&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n        For example, you can use a global variable to store the pitches of a song.&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/set-mary-lamb.png\" alt=\"set ('Mary Had a Little Lamb') to (list (64) (62) (60) (62) (64) (64) (64) (0) (62) (62) (62) (0) (64) (67) (67)))\" title=\"set ('Mary Had a Little Lamb') to (list (64) (62) (60) (62) (64) (64) (64) (0) (62) (62) (62) (0) (64) (67) (67)))\" /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-mary-lamb.png\" alt=\"play song (Mary Had a Little Lamb)\" title=\"play song (Mary Had a Little Lamb)\" /&gt;\n    &lt;/p&gt;\n    &lt;div class=\"forYouToDo\"&gt;\n      &lt;ol&gt;\n        &lt;div class=\"todo\"&gt;The \"your latest project\" below\n    has to be changed to go along with whatever decision\n    was made on the previous page about what project they\n    should work in. -bh 3/3/22&lt;/div&gt;\n            &lt;li&gt;If your latest project isn't open already, log in to Snap&lt;i&gt;!&lt;/i&gt;, and open it.&lt;/li&gt;\n            &lt;li&gt;\n                Create a global variable to store your song. Here's how...\n                &lt;div class=\"narrower\"&gt;\n                    &lt;h4&gt;&lt;strong&gt;Making a Global Variable&lt;/strong&gt;&lt;/h4&gt;\n                    &lt;ol type=\"a\"&gt;\n                        &lt;li&gt;Click &lt;img class=\"inline\" src=\"/img/1-introduction/make-a-variable.png\" alt=\"make a variable button\" title=\"make a variable button\" /&gt;  in the Variables palette. (It's not a block; you can't drag it into the scripting area.)&lt;/li&gt;\n                        &lt;li&gt;Type the name for your variable. (Use the name of the song or something else to help you remember it. Don't forget that the name can have spaces in it—it doesn't have to be just one word.)&lt;/li&gt;\n                        &lt;li&gt;Click \"OK.\"&lt;/li&gt;\n                    &lt;/ol&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Set your global variable to store your song. Here's how...\n                &lt;div class=\"narrower\"&gt;\n                    &lt;h4&gt;&lt;strong&gt;Setting a Global Variable&lt;/strong&gt;&lt;/h4&gt;\n                    &lt;ol type=\"a\"&gt;\n                        &lt;li&gt;Drag the &lt;code&gt;set variable&lt;/code&gt; block out of the Variables palette and into the scripting area.&lt;/li&gt;\n                        &lt;li&gt;In the first input slot, select the name of your global variable by clicking the triangle (▼) to open the menu.&lt;/li&gt;\n                        &lt;li&gt;Drag the &lt;code&gt;list&lt;/code&gt; block with your song pitches into the second input slot.&lt;/li&gt;\n                        &lt;li&gt;Click the &lt;code&gt;set variable&lt;/code&gt; block to run it.&lt;/li&gt;\n                        &lt;li&gt;\n                            Notice that a watcher containing the pitches to your song appears on the Snap&lt;em&gt;!&lt;/em&gt; stage.&lt;br /&gt;\n                            &lt;img class=\"indent\" src=\"/img/U2/lab01/set-mary-lamb.png\" alt=\"set ('Mary Had a Little Lamb') to (list (64) (62) (60) (62) (64) (64) (64) (0) (62) (62) (62) (0) (64) (67) (67)))\" title=\"set ('Mary Had a Little Lamb') to (list (64) (62) (60) (62) (64) (64) (64) (0) (62) (62) (62) (0) (64) (67) (67)))\" /&gt;\n                            &lt;div class=\"endnote\"&gt;You learned about watchers on &lt;a href=\"/student-pages/U1/L7/02-setting-up.html?topic=sparks%2F1-functions-data.topic&course=middle-school.html\" title=\"Unit 1 Lab 7 Activity 2: Setting Up Your Survey\"&gt;Unit 1 Lab 7 Activity 2: Setting Up Your Survey&lt;/a&gt;.&lt;/div&gt;\n                        &lt;/li&gt;\n                    &lt;/ol&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Use your global variable as the input to your &lt;code&gt;play song&lt;/code&gt; block, and make sure that it works.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-mary-lamb.png\" alt=\"play song (Mary Had a Little Lamb)\" title=\"play song (Mary Had a Little Lamb)\" /&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Create another global variable and make it store a different song.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/set-twinkle-twinkle.png\" alt=\"set ('Twinkle Twinkle Little Star') to (list (60) (60) (67) (67) (69) (69) (67) (0) (65) (65) (64) (64) (62) (62) (60)))\" title=\"set ('Twinkle Twinkle Little Star') to (list (60) (60) (67) (67) (69) (69) (67) (0) (65) (65) (64) (64) (62) (62) (60)))\" /&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Try out your second variable in your &lt;code&gt;play song&lt;/code&gt; block, and check that it works too.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-twinkle-twinkle.png\" alt=\"play song (Twinkle Twinkle Little Star)\" title=\"play song (Twinkle Twinkle Little Star)\" /&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n            Your global variables will appear in &lt;em&gt;watchers&lt;/em&gt; on the Snap&lt;em&gt;!&lt;/em&gt; stage. You can use the &lt;img class=\"inline nopadtb\" src=\"/img/blocks/show-variable-full-size.png\" alt=\"show variable\" title=\"show variable\" /&gt; and &lt;img class=\"inline nopadtb\" src=\"/img/blocks/hide-variable-full-size.png\" alt=\"hide variable\" title=\"hide variable\" /&gt; blocks to control whether your variables show on the stage. Try showing and hiding your song variables.&lt;br /&gt;\n                &lt;img class=\"indent noshadow\" src=\"/img/U2/lab01/song-watchers.png\" alt=\"two watchers showing on the Snap! stage: one for 'Mary Had a Little Lamb' showing a list with the elements 64, 62, 60, ... and one for 'Twinkle Twinkle Little Star' showing a list with the elements 60, 60, 67, ...\" title=\"two watchers showing on the Snap! stage: one for 'Mary Had a Little Lamb' showing a list with the elements 64, 62, 60, ... and one for 'Twinkle Twinkle Little Star' showing a list with the elements 60, 60, 67, ...\" /&gt;\n                &lt;div class=\"endnote\"&gt;Recall that you can also show or hide a watcher by using its checkbox in the palette on the left of the Snap&lt;em&gt;!&lt;/em&gt; window.&lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"ifTime show\"&gt;\n        &lt;ol start=\"9\"&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/save-mini.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;\n          &lt;div class=\"comment\"&gt;For example...&lt;/div&gt;\n                You can use variables to store pieces of a song and then snap several &lt;code&gt;play song&lt;/code&gt; blocks together to play the same parts of a song more than once. Try building a more complicated song that way.\n            &lt;/li&gt;\n        &lt;/ol&gt;\n        &lt;p style=\"clear: both; height: 0px;\"&gt;&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you stored lists of pitches in variables and used your &lt;code&gt;play song&lt;/code&gt; block to play them.&lt;/div&gt;"
  },
  {
    "objectID": "lab-5/07-song-mapper.html",
    "href": "lab-5/07-song-mapper.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 7&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Song &lt;code&gt;Map&lt;/code&gt;per&lt;/h2&gt;\n    &lt;div class=\"todo\"&gt;MARY TODO: add a reminder about how the blank in the functional input to MAP works. --MF, 2/27/22&lt;/div&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you will use the &lt;code&gt;map&lt;/code&gt; block to transpose (shift) all the pitches in your song.&lt;/div&gt;\n    &lt;div class=\"todo\"&gt;\n        &lt;p&gt;Pamela, I debated whether to teach the ADT first so they can traverse a 2D list or to show them how to use MAP to transpose first. I went with MAP first and letting 2D lists/ADTs be a later optional page (perhaps not even to be written now or perhaps just a \"Take It Further\" on the last page) since the goal of the course is functional, and MAP would align with that. There is no real need to teach ADTs although the context does naturally inspire it. --MF, 2/12/22&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"todo\"&gt;&lt;p&gt;When transposing a song, it's  especially important not to call MIDI note numbers \"pitch.\"  The actual pitches are in a geometric progression, not a linear one, and when you transpose by &lt;i&gt;n&lt;/i&gt; steps you're actually &lt;em&gt;multiplying&lt;/em&gt; the pitches by &lt;span class=\"katex\"&gt;(\\sqrt[12]{2})^n&lt;/span&gt;. --bh 3/3/22&lt;/p&gt;&lt;p&gt;I agree to rename the variable for next year. --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n    &lt;p&gt;\n        Another advantage of using a list to store your notes is that you can use higher order functions to process your list. You can use &lt;code&gt;map&lt;/code&gt; to play a song higher or lower than the original pitches.&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/map-plus-3-over-notes-list.png\" alt=\"map (( ) + (3)) over (list ((64) (62) (60) (62) (64) (64) (64))) reporting the list 67, 65, 63, 65, 67, 67, 67\" title=\"map (( ) + (3)) over (list ((64) (62) (60) (62) (64) (64) (64))) reporting the list 67, 65, 63, 65, 67, 67, 67\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        If you store the list of pitches in a variable, you can use &lt;code&gt;play song&lt;/code&gt; together with &lt;code&gt;map&lt;/code&gt; to play the same song several times in different ways.&lt;br /&gt;\n        &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-player-mary-lamb-map.xml\" title=\"Sample Song Player: Mary Had a Little Lamb MAP example - Snap! project\" target=\"_blank\"&gt;\n            &lt;img class=\"indent\" src=\"/img/U2/lab01/mary-lamb-map-script.png\" alt=\"set ('Mary Had a Little Lamb') to list ((64) (62) (60) (62) (64) (64) (64))\nplay song (Mary Had a Little Lamb) play song (map (( ) + (3)) over (Mary Had a Little Lamb))” title=“set (‘Mary Had a Little Lamb’) to list ((64) (62) (60) (62) (64) (64) (64)) play song (Mary Had a Little Lamb) play song (map (( ) + (3)) over (Mary Had a Little Lamb))” /&gt; \n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/headphones-mini.png\" alt=\"Set Up Your Headphones or Speakers\" title=\"Set Up Your Headphones or Speakers\" /&gt;\n                Open this &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-player-mary-lamb-map.xml\" title=\"Sample Song Player: Mary Had a Little Lamb MAP example - Snap! project\" target=\"_blank\"&gt;Mary Had a Little Lamb &lt;code&gt;map&lt;/code&gt; example&lt;/a&gt;. Click each block to: set the variable, play the song, and then play the transposed (shifted) song.\n            &lt;/li&gt;\n            &lt;li&gt;Try changing the &lt;em&gt;shift&lt;/em&gt; (the second input to the &lt;code&gt;+&lt;/code&gt; function in the &lt;code&gt;map&lt;/code&gt; block) from 3 to some other integer. (You can make it any integer&mdash;positive or negative&mdash;but if it's too high or low, you won't be able to hear the song).&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"comment\"&gt;Do they know the word \"apply\" in this sense? -bh&lt;p&gt;See 1.4.4. --MF, 3/6/22&lt;/p&gt;&lt;/div&gt;\n    &lt;p&gt;The &lt;code&gt;map&lt;/code&gt; block takes two inputs: a function (in this case &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/plus-3.png\" alt=\"( ) + (3)\" title=\"( ) + (3)\" /&gt;) and a list, applies the function to each item in the list, and reports a new list of the results.&lt;/p&gt;\n\n    &lt;div class=\"vocabFullWidth\"&gt;\n        &lt;p&gt;Recall, a function that takes a function as input (like &lt;code&gt;map&lt;/code&gt;) is called a &lt;strong&gt;higher order function&lt;/strong&gt;.&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol start=\"3\"&gt;\n            &lt;li&gt;\n                Open this &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-player-twinkle-twinkle-map.xml\" title=\"Sample Song Player: Twinkle Twinkle Little Star MAP example - Snap! project\" target=\"_blank\"&gt;Twinkle Twinkle Little Star &lt;code&gt;map&lt;/code&gt; example&lt;/a&gt;, and play the song.&lt;br /&gt;\n            &lt;/li&gt;\n            &lt;div class=\"endnote\"&gt;Remember, you can turn on Visible Stepping (&lt;img class=\"inline nopadtb\" src=\"/img/2-complexity/visible-stepping.png\" alt=\"Visible Stepping button with two footprints\" title=\"Visible Stepping button with two footprints\" /&gt;) to see which block is running as it runs.&lt;/div&gt;\n            &lt;li&gt;Modify this song by adding additional &lt;code&gt;play song&lt;/code&gt; blocks, changing the shift values in the &lt;code&gt;map&lt;/code&gt; blocks, or changing the pitches in the song.&lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"ifTime show\"&gt;\n        &lt;ol start=\"6\"&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/save-mini.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;\n          &lt;div class=\"todo\"&gt;\"Your latest project\" should be more specific. -bh 3/3/22&lt;/div&gt;\n                Open your latest project in Snap&lt;em&gt;!&lt;/em&gt;, and use &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;play song&lt;/code&gt; together with one of the variables that you used to store your pitches to make your song more complex.\n            &lt;/li&gt;\n            &lt;li&gt;Add additional variables to store different verses, and create more interesting music.&lt;/li&gt;\n\nI’m not sure what this bullet (“additional variables”) is suggesting I do. Add more verses? -pf 3/6/22\n\nBetter? –MF, 3/7/22\n\n\n            &lt;li&gt;\n                In this activity, you changed the pitches by adding or subtracting, but you could also multiply or divide. Try it and see what happens!\n                &lt;div class=\"endnote\"&gt;You can pull the &lt;code&gt;map&lt;/code&gt; block out of the &lt;code&gt;play song with pitches and beats&lt;/code&gt; block temporarily and then click it to see what values it reports.&lt;/div&gt;\n            &lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you used the higher order function &lt;code&gt;map&lt;/code&gt; to transpose  lists of pitches stored in variables and create more complex music.&lt;/div&gt;"
  },
  {
    "objectID": "lab-5/08-pitch-beat.html",
    "href": "lab-5/08-pitch-beat.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 8&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;Songs with Pitches &lt;em&gt;and&lt;/em&gt; Beats&lt;/h2&gt;\n\n    &lt;div class=\"todo\"&gt;Consider that students don't always have to download a new XML; they could just import blocks into existing projects. --MF &lt;/div&gt;\n    \n    &lt;div class=\"learn\"&gt;In this activity, you will learn to store and play songs with both pitch and length of each note.&lt;/div&gt;\n    &lt;p&gt;\n        So far, you've been using a &lt;code&gt;play song&lt;/code&gt; block that only lets you control the pitch of each note (by giving it a list of pitches as input). The number of beats was the same based on whatever you typed into the &lt;code&gt;play ♪&lt;/code&gt; block inside your &lt;code&gt;play song&lt;/code&gt; block (for example, 0.5 in the image below).&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-definition.png\" alt=\"play song (pitches) {\nfor each (pitche) in (pitches) {\n    play ♪ pitch: (pitch) beats: (0.5)\n}\n}” title=“/img/U2/lab01/play-song-definition.png” alt=“play song (pitches) { for each (pitche) in (pitches) { play ♪ pitch: (pitch) beats: (0.5) } }” /&gt;\n\n    &lt;p&gt;\n        You can use a table to store the data for every note and then use &lt;code&gt;play song with pitches and beats&lt;/code&gt;, which expects music data &lt;em&gt;in a table&lt;/em&gt;, to play the song. Each item in the list below is a new block: &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/note-pitch-beats.png\" alt=\"♪ pitch: () beats: ()\" title=\"♪ pitch: () beats: ()\" /&gt;. It looks like the &lt;code&gt;play ♪&lt;/code&gt; command, but it's a reporter that reports the pitch and beat.&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/set-mario-beats.png\" alt=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" title=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" /&gt;\n        &lt;img class=\"indent noshadow\" src=\"/img/U2/lab01/mario-beats-watcher.png\" alt=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)\" title=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)\" /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario.png\" alt=\"play song with pitches and beats ('Mario Theme (with beats)')\" title=\"play song with pitches and beats ('Mario Theme (with beats)')\" /&gt;\n    &lt;/p&gt;\n    &lt;div class=\"todo\"&gt;\n        &lt;p&gt;The introduction of an ADT that's used throughout this activity can't be inside a hint inside a yellow \"optional\" box!  Also, they've seen abstract data types before, no?  If so, there should be a reference back to their introduction.  If this &lt;em&gt;is&lt;/em&gt; their introduction, it needs much more explicit calling out as a Big Idea. --bh 3/3/22&lt;/p&gt;\n        &lt;p&gt;We've agreed not to &lt;em&gt;teach&lt;/em&gt; ADTs at all in this course. We are only &lt;em&gt;using&lt;/em&gt; them here (with the option to learn more). You can reopen this decision if you like, of course, but that has been the agreement so far. --MF, 3/6/22&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=\"endnote\"&gt;\n        &lt;p&gt;&lt;a href=\"#hint-play-beats\" data-toggle=\"collapse\" title=\"How does the PLAY SONG WITH PITCHES AND BEATS block work?\"&gt;How does the &lt;code&gt;play song with pitches and beats&lt;/code&gt; block work?&lt;/a&gt;&lt;/p&gt;\n        &lt;div id=\"hint-play-beats\" class=\"collapse\"&gt;\n            &lt;p&gt;\n                This block takes a table of pitch and beat values as input, and for each note in the song, it plays the pitch and beat values for that note:&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-definition.png\" alt=\"play song with pitches and beats (song) {\nfor each (♪) in (song) {\n    play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))\n}\n}” title=“play song with pitches and beats (song) { for each (♪) in (song) { play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪)) } }” /&gt;\n\n            &lt;p&gt;\n                &lt;a href=\"#hint-block-vars\" data-toggle=\"collapse\" title=\"Which part of the data is the song and which part is the ♪?\"&gt;Which part is the &lt;var&gt;song&lt;/var&gt; and which part is the &lt;var&gt;♪&lt;/var&gt;?&lt;/a&gt;&lt;/p&gt;\n                &lt;div id=\"hint-block-vars\" class=\"collapse\"&gt;\n                &lt;img class=\"noshadow indent\" src=\"/img/U2/lab01/mario-beats-watcher-labeled.gif\" alt=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The entire table is labeled 'song' and a single row is labeled '♪'. An animation cycles through the rows showing each row labeled '♪' one after another.\" title=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The entire table is labeled 'song' and a single row is labeled '♪'. An animation cycles through the rows showing each row labeled '♪' one after another.\" /&gt;\n            &lt;/div&gt;\n            &lt;p&gt;\n                The data about each note is loaded in to a table using the &lt;code&gt;♪ pitch beats&lt;/code&gt; block, which takes a pitch and number of beats as input and reports a list with those two values:&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/note-pitch-beats-definition.png\" alt=\"♪ pitch: (pitch) beats: (beats) {\n    report (list (pitch) (beats))\n}\" title=\"♪ pitch: (pitch) beats: (beats) {\n    report (list (pitch) (beats))\n}\" /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/note-pitch-beats-reporting.png\" alt=\"♪ pitch: (64) beats: (0.25) reporting the list 64, 0.25\" title=\"♪ pitch: (64) beats: (0.25) reporting the list 64, 0.25\" /&gt;\n                &lt;p&gt;&lt;a href=\"#hint-loading\" data-toggle=\"collapse\" title=\"How is the data loaded into a table with the ♪ PITCH BEATS block?\"&gt;How is the data loaded into a table with the &lt;code&gt;♪ pitch beats&lt;/code&gt; block?&lt;/a&gt;&lt;/p&gt;\n                &lt;div id=\"hint-loading\" class=\"collapse\"&gt;\n                    &lt;img class=\"indent\" src=\"/img/U2/lab01/set-mario-beats.png\" alt=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" title=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" /&gt;\n                &lt;/div&gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n                Each note (&lt;var&gt;♪&lt;/var&gt;) in the song now has both pitch and beat information, and &lt;code&gt;play ♪&lt;/code&gt; needs to receive those data in separate input slots. The &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/pitch.png\" alt=\"pitch from ♪\" title=\"pitch from ♪\" /&gt; and &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/beats.png\" alt=\"beats from ♪\" title=\"beats from ♪\" /&gt; blocks each take a note (&lt;var&gt;♪&lt;/var&gt;) as input and report only one piece of information to the &lt;code&gt;play ♪&lt;/code&gt; block.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/pitch-definition.png\" alt=\"pitch (♪) {\n    report (item (1) of (♪))\n}\" title=\"pitch (♪) {\n    report (item (1) of (♪))\n}\" /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/beats-definition.png\" alt=\"beats (♪) {\n    report (item (2) of (♪))\n}\" title=\"beats (♪) {\n    report (item (2) of (♪))\n}\" /&gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n                So, &lt;code&gt;play song with pitches and beats&lt;/code&gt; takes a table of song data with pitches and beats as input (&lt;code&gt;song&lt;/code&gt;), and it plays each note (&lt;var&gt;♪&lt;/var&gt;) at the specified pitch for the specified number of beats.&lt;br /&gt;\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-definition.png\" alt=\"play song with pitches and beats (song) {\nfor each (♪) in (song) {\n    play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪))\n}\n}” title=“play song with pitches and beats (song) { for each (♪) in (song) { play ♪ pitch: (pitch from ♪ (♪)) beats: (beats from ♪ (♪)) } }” /&gt;\n            &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"todo\"&gt;\n        &lt;p&gt;MARY TODO: I need to do add this block to the previous XML projects and give it help text. When I do, I should take it from the MARIO MAPPED EXMAPLE because that version has the help text as a comment on the hat block. --MF, 2/27/22&lt;/p&gt;\n        &lt;p&gt;MARY TODO: The original 'Mary Had a Little Lamb' (MHALL) XML has no extra sound blocks hidden in it. And both the map MHALL and map TWINKLE don't either and also they might need help text on the play song block. Also I reminded students how to put help text on a block in 2.1.5#6, but perhaps we should on page 2.1.3 between #4 and #5 also... --MF, 2/27/22&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;Open this &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/song-player-pitches-beats.xml\" title=\"Song Player - Pitches and Beats - Snap! project\" target=\"_blank\"&gt;Song Player - Pitches and Beats&lt;/a&gt; project, and save it to your account.&lt;/li&gt;\n            &lt;li&gt;\n                &lt;div class=\"sidenote\"&gt;You learned how to create a global variable in &lt;a href=\"/student-pages/U2/L1/06-storing-songs.html?topic=sparks%2F2-sequencing-iteration.topic&course=middle-school.html\" title=\"Unit 2 Lab 1 Activity 6: Storing Songs\"&gt;Unit 2 Lab 1 Activity 6: Storing Songs&lt;/a&gt;.&lt;/div&gt;\n                Create a new global variable to store a song with both pitch and beat information.&lt;/li&gt;\n            &lt;li&gt;\n                Use the &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/note-pitch-beats.png\" alt=\"♪ pitch: () beats: ()\" title=\"♪ pitch: () beats: ()\" /&gt; reporter to input each note in your list.\n                &lt;img class=\"indent\" src=\"/img/U2/lab01/set-mario-beats.png\" alt=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" title=\"set ('Mario Theme (with beats)') to (list (♪ pitch: (76) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (72) beats: (0.25)) (♪ pitch: (76) beats: (0.25)) (♪ pitch: (0) beats: (0.25)) (♪ pitch: (79) beats: (0.25)) (♪ pitch: (0) beats: (0.75)) (♪ pitch: (67) beats: (0.25)))\" /&gt;\n            &lt;/li&gt;\n            &lt;li&gt;Play your song by dragging your new variable (with both pitch and beat data) into the input slot of the &lt;code&gt;play song with pitches and beats&lt;/code&gt; block and clicking it.&lt;/li&gt;\n            &lt;li&gt;Fix any problems with your project.&lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"ifTime show\"&gt;\n        &lt;ol start=\"7\"&gt;\n            &lt;li&gt;Build another song with pitch and beat information, store it in another global variable, and  play that using the &lt;code&gt;play song with pitches and beats&lt;/code&gt; block also.&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you learned how to create a table of song data containing both pitch and length data.&lt;/div&gt;"
  },
  {
    "objectID": "lab-5/09-map-pitch-beat.html",
    "href": "lab-5/09-map-pitch-beat.html",
    "title": "CS Maker Camp",
    "section": "",
    "text": "&lt;title&gt;Unit 2 Lab 1: Song Player, Activity 9&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h2&gt;&lt;code&gt;Map&lt;/code&gt;ping over Pitches and Beats&lt;/h2&gt;\n    &lt;div class=\"learn\"&gt;In this activity, you will learn how to transpose data in a song that is stored in a table.&lt;/div&gt;\n\n    &lt;p&gt;\n        You've learned how to use &lt;code&gt;map&lt;/code&gt; to transpose (shift) all the pitch values in a song where each note plays for the same length, and you've learned how to use a table to store both pitch and beat values for the notes in a song. You can also transpose the pitch values stored in a table.&lt;br /&gt;\n        &lt;div class=\"comment\"&gt;Needs alt-title text. --MF, 2/27/22&lt;/div&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-transposed.png\" alt=\"\" title=\"\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;img class=\"imageRight\" src=\"/img/icons/tough-stuff.png\" alt=\"Tough Stuff\" title=\"Tough Stuff\" /&gt;\n        This code is a bit complicated. Notice that it plays a version of &lt;var&gt;Mario Theme&lt;/var&gt; that has gone through the &lt;code&gt;map&lt;/code&gt; block. So the question is: What does this &lt;code&gt;map&lt;/code&gt; block do?\n    &lt;/p&gt;\n    &lt;div class=\"todo\"&gt;\n        &lt;p&gt;Obviously, this whole page a bit of a reach, but I feel like the question will arise for some kids of how to do this, and so I want to offer something for them (even if they just read it on their own time). In the TG, this will be listed as optional. Any suggestions for improving this presentation? --MF, 2/27/22&lt;/p&gt;\n        &lt;p&gt;Yeah, this is a bit of a doozy, especially because they really should have read the yellow box on the previous page to understand the ADT selectors. I definitely think it should be optional, as you say it is. Maybe you can make sure they've read that yellow box, or repeat all/parts of it here? -pf 3/6/22&lt;/p&gt;\n        &lt;p&gt;I've added a first problem on this page about going back and reading that. Sufficient to close this comment, or should we discuss this further? --MF, 3/7/22&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;p style=\"clear: right;\"&gt;\n        Recall that &lt;code&gt;play song with pitches and beats&lt;/code&gt; expects a table of song data as input, &lt;code&gt;map&lt;/code&gt; works through every item in a list, and every item in the table of pitches and beats is one note. So, &lt;code&gt;map&lt;/code&gt; applies a function to every note in the &lt;var&gt;Mario Theme&lt;/var&gt; and  outputs a table of notes (pairs of pitches and beats).&lt;br /&gt;\n        &lt;img class=\"indent noshadow\" src=\"/img/U2/lab01/mario-beats-watcher.png\" alt=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)\" title=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (76, 0.25), (76, 0.25), (0, 0.25), (76, 0.25), (0, 0.25), (72, 0.25), (76, 0.25), (0, 0.25), (79, 0.25), (0, 0.75), (67, 0.25)\" /&gt;\n        &lt;span style=\"font-size:50px;\"&gt;&rightarrow;&lt;/span&gt;\n        &lt;img class=\"noshadow\" src=\"/img/U2/lab01/mario-beats-watcher-transposed.png\" alt=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (81, 0.25), (81, 0.25), (5, 0.25), (81, 0.25), (5, 0.25), (77, 0.25), (81, 0.25), (5, 0.25), (84, 0.25), (5, 0.75), (82, 0.25)\" title=\"watcher for the 'Mario Theme (with beats)' variable showing a table with two columns and eleven rows. The rows contain the value pairs: (81, 0.25), (81, 0.25), (5, 0.25), (81, 0.25), (5, 0.25), (77, 0.25), (81, 0.25), (5, 0.25), (84, 0.25), (5, 0.75), (82, 0.25)\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        In order for &lt;code&gt;map&lt;/code&gt; to output a table of pitches and beats, it needs to apply a function that outputs pairs of pitches and beats. So the code needs a structure like this:&lt;br /&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-map01.png\" alt=\"\" title=\"\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        What function outputs pitches and beats? The &lt;img class=\"inline nopadtb\" src=\"/img/U2/lab01/note-pitch-beats.png\" alt=\"♪ pitch () beats ()\" title=\"♪ pitch () beats ()\" /&gt; block. So the code needs a structure like this:&lt;br /&gt;\n        &lt;div class=\"comment\"&gt;Needs alt-title text. --MF, 2/27/22&lt;/div&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-map02.png\" alt=\"\" title=\"\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;But remember that the inputs that end up in the blank spots of the function in the &lt;code&gt;map&lt;/code&gt; block each time it applies the function are the items in the input list, which in this case are the notes (pitches and beats from &lt;var&gt;Mario Theme (with beats)&lt;/var&gt;).&lt;/p&gt;\n    &lt;p&gt;\n        So, to get a beats value in the beats slot, we need to use the &lt;code&gt;beats from ♪&lt;/code&gt; block, which takes a note (with a pitch and a beat) and reports just the beat.&lt;br /&gt;\n        &lt;div class=\"comment\"&gt;Needs alt-title text. --MF, 2/27/22&lt;/div&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-map03.png\" alt=\"\" title=\"\" /&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n        And to get a pitch value in the pitch slot, we need to use the &lt;code&gt;pitches from ♪&lt;/code&gt; block, and we need to add our shift value to do the transpose.&lt;br /&gt;\n        &lt;div class=\"comment\"&gt;Needs alt-title text. (copy from above once written) --MF, 2/27/22&lt;/div&gt;\n        &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-transposed.png\" alt=\"\" title=\"\" /&gt;\n    &lt;/p&gt;\n    &lt;div class=\"forYouToDo\"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;Go back to &lt;a href=\"/student-pages/U2/L1/08-pitch-beat.html?topic=sparks%2F2-sequencing-iteration.topic&course=middle-school.html\" title=\"the previous activity page\"&gt;the previous activity page&lt;/a&gt;, open &lt;em&gt;all&lt;/em&gt; the links in the box labeled \"How does the &lt;code&gt;play song with pitches and beats&lt;/code&gt; block work?\", and read all the information included there. Before moving on, discuss any questions you have about how that block works. &lt;/li&gt;\n            &lt;li&gt;\n                &lt;img class=\"imageRight\" src=\"/img/icons/talk-with-your-partner.png\" alt=\"Talk with Your Partner\" title=\"Talk with Your Partner\" /&gt;\n                Read through the description above again, and discuss how mapping over a table takes a song (with pitch and beat data) as input and reports a song with the pitches transposed (shifted). Explain it in your own words.\n            &lt;/li&gt;\n            &lt;li&gt;Open your \"Song Player - Pitches and Beats\"  Snap&lt;em&gt;!&lt;/em&gt; project.&lt;/li&gt;\n            &lt;li&gt;\n                Use the structure of the code shown above as a guide, and transpose one of your songs.\n            &lt;div class=\"endnote\"&gt;\n                &lt;div class=\"commentBig\"&gt;\n                    &lt;p&gt;They don't need a hint.  All they're asked to do is copy your code but with a different song substituted.  For them to &lt;em&gt;understand&lt;/em&gt; the code may be hard, but the hint doesn't help with that, and it's not required of them.  Having a hint will just make them worry that they're missing something. --bh 3/3/22&lt;/p&gt;\n                    &lt;p&gt;I included this here so they don't have to scroll around to find it. If the are looking for a hint, it's because scrolling up didn't work somehow. Feel free to suggest a tweak, but that's the idea behind having it. --MF, 3/6/22&lt;/p&gt;\n                &lt;/div&gt;\n                    &lt;p&gt;&lt;a href=\"#hint-transpose\" data-toggle=\"collapse\" title=\"Need a hint about how to transpose one of your songs?\"&gt;Need a hint?&lt;/a&gt;&lt;/p&gt;\n                    &lt;div id=\"hint-transpose\" class=\"collapse\"&gt;\n                        &lt;p&gt;\n                            Your code should look like this but with your own song variable in place of &lt;var&gt;Mario Theme (with beats)&lt;/var&gt; and a different shift value (instead of 5).&lt;br /&gt;\n                            &lt;div class=\"comment\"&gt;Needs alt-title text. (copy from above once written) --MF, 2/27/22&lt;/div&gt;\n                            &lt;img class=\"indent\" src=\"/img/U2/lab01/play-song-beats-mario-transposed.png\" alt=\"\" title=\"\" /&gt;\n                        &lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                Create a longer song by playing different versions of the same song at different pitches.\n                &lt;div class=\"endnote\"&gt;\n                    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;a class=\"js-run snap-project\" href=\"/prog/U2/lab01/sample-song-player-mario-map.xml\" title=\"Sample Song Player: Mario Theme Mapped- Snap! project\" target=\"_blank\"&gt;Mario Theme Mapped&lt;/a&gt;&lt;/p&gt;\n                    &lt;p&gt;\n                        &lt;strong&gt;Tip:&lt;/strong&gt; Try shifts like 1, 4, 7 and see which sound good to you. What about other shifts?\n                    &lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;&lt;img class=\"inline\" src=\"/img/icons/save-now.png\" alt=\"Now Is a Good Time to Save\" title=\"Now Is a Good Time to Save\" /&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n    &lt;div class=\"ifTime show\"&gt;\n        &lt;div class=\"todo\"&gt;\n            &lt;p&gt;OK, cut for now, but left for possible discussion. I don't disagree with any of this; I was trying to get at \"Why is this so complicated? Can we do this an easier way?\" and empower students: \"If you have an idea, try it!\" But I guess it's not as empowering to say \"try it\" i this case... --MF, 3/6/22&lt;/p&gt;\n            &lt;div class=\"todo\"&gt;I don't understand why this problem is here in particular.  It's something that could be asked all of the zillion places in which this curriculum shows how to do something.  Do you have in mind a particular thing you think they'll try that won't work? --bh 3/3/22&lt;/div&gt;\n            &lt;li&gt;\n                Do you have an idea for a different way to transpose a song that has both pitch and beat information? Try to build it. If it works, explain how it works to someone else. If it doesn't work, talk with someone else and figure out why it doesn't work.\n                &lt;div class=\"endnote\"&gt;\n                    &lt;div class=\"todo\"&gt; I'm noticing a bunch of these exhortations in yellow boxes in the curriculum.  I'm not a fan.  This particular one is especially bad because it tells students, \"you think you know another way, but it's not going to work, ha ha, you're dumb.\"  I would go through the whole curriculum, find all of these, and remove them. --bh 3/3/22&lt;/div&gt;\n                    Understanding why code you thought would work doesn't actually work is an important part of programming.\n                &lt;/div&gt;\n            &lt;/li&gt;\n        &lt;/div&gt;\n        &lt;ol start=\"6\"&gt;\n            &lt;li&gt;In this activity, you shifted the pitches and left the beats alone, but you could use &lt;code&gt;map&lt;/code&gt; to change the beats in some way. Try it!&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"learn\"&gt;In this activity, you learned how to use &lt;code&gt;map&lt;/code&gt; in a more complicated situation in which you want to transform only part of an item with multiple parts.&lt;/div&gt;"
  },
  {
    "objectID": "lab-5/index.html",
    "href": "lab-5/index.html",
    "title": "Click Alonso",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-6/6-the-for-block.html",
    "href": "lab-6/6-the-for-block.html",
    "title": "Looping with a Counter",
    "section": "",
    "text": "On this page, you will use for loops not only to repeat, but also to count the repetitions and then use that counter to draw shapes with repeated patterns:  \n\n\n\nYou’ve seen these ways to repeat a set of commands:\n\n\nThe forever block generates an infinite loop that goes on forever. An infinite loop can sometimes be the result of a bug, but in some interactive programs, you want the program to keep running until stopped by the user.\n\n\n repeats the same commands forever. (You used it to make Alonzo keep moving in Unit 1 Lab 1 Page 3: Make It a Game.)\n\n\n repeats them a specific number of times. (You used it to draw shapes in Unit 1 Lab 3 Page 1: Exploring Motion.)\n\n\n\n\n\n: Iteration\n\nAAP-2.J.1\n\n\nComputer scientists describe a repeating program structure as looping, repetition, or iteration.\n\n\nAAP-2.K.1\n\n\nThe code can be repeated forever, a specific number of times (such as when using repeat), or until something specific happens (such as when using repeat until as you’ll see in Lab 5).   \n\n\n\nSometimes the script inside a loop needs to know which time through the loop it’s in (first, second, etc.). You can use  to keep track, and you can use its counter (the default name is ) in the repeated script. For example, the for block lets you simplify long scripts like:  \n      to\n\n\n\nEach time the for block runs the script inside, it changes the value of the counter by 1, beginning with the first input number and ending after the second.\n\n\nThe for block’s default counter name,  stands for “index.” You can change this name by clicking it. To use the counter, drag it into the script.\n\n\n\n\nBuild this script that makes the sprite say the numbers 1 through 10.  \n\n\nThen modify it so that the sprite says 0, 2, 4, 6, 8, … up through 30.\n\n\nDiscuss your solutions with another pair.\n\n\n\n\nExperiment with spirals.\n\n\nBuild this script and try it out:\n\nThis design got the nickname “squiral” because it’s a square spiral.\n\n\n\n\n Make sure you can explain why the squiral spirals outward.\n\n\nTry switching the order of the 100 and the 1 in the for block in the squiral script. What is the result?\n\n\nTry changing the turning angle in the squiral script to other numbers such as 92, 126, etc.\n\n\nChange the inputs to turn and move to get as close as you can get to a smooth spiral: \n\n\n\n\n\n“U1L3-Squiral”\n\n\n\nOpen your U1L3-Pinwheel project, and build a nest squares block that uses for and your polygon block to draw nested squares. Give it an input so that it will draw whatever number of squares you specify, with each square larger than the previous:  \n\n\n\n\n\n\nBuild nest polygons that accepts the number of polygons and the number of sides for the polygons.\n\n\nBuild a script that draws 12 regular polygons, each with one more side than the previous one, as shown below. \n\n\nPredict what this script will do before you try it:\n\n\nBuild a script that counts down by 10 from 100 to 0 (that is, 100, 90, 80, etc.).\n\n\n\n\nBelow are two animations that use the pinwheel code with inputs. Find out how to create your own artistic animations.  \n\n\nThe following code may give you ideas about how to create animations. The warp block allows the drawing of the pinwheel all at once.\n\n\n\n\n\n\nMake sure your other work has been saved, then Experiment with the script. Could you change the sizes or colors to make it more interesting?\n\n\n\n\n\n\n                     \n\n\n\n\nFind a way to use for to nest squares this way. Build your block with two inputs that let you specify how many squares the design will contain and how much bigger each square will be than the previous one.  \n\n\n\n\nOn the right is a painting by Josef Albers. He was interested in experimenting with variations of color within a “family” of similar colors. Snap! will let you make similar experiments.\n\n\n\nWhat is the favorite color of the author of this activity?\n\n\nIf you didn’t do the Take It Further activity based on this Kazimir Malevich picture  then read it now to learn about Snap! features for solid rectangles and color families.\n\n\nIf you haven’t already, do If There Is Time #10, which shows a simple version of this project idea.\n\n\nOkay, now dig in.\n\nRandomness: The four examples above are different from the actual Albers picture in that they include occasional colors that aren’t from the same family. This can make the pictures more interesting to someone who doesn’t share Albers’s interest in subtle differences in color. (Albers himself, in fact, had more color variation in other pictures of this type.) Too much randomness, though, can make the picture less interesting. Compare the last two examples above; the left one of those two is clearly based on the orange family, with rainbow-neighbors red and yellow, but the right one has violets, greens, oranges, a yellow—too much chaos, maybe. Look back at the Gossip project if you don’t remember how to choose something special once out of six times, or once out of 14 times. Other random choices you can make are the number of squares, how much to shrink the size from one square to the next, and how much to move the corner of the next square horizontally and vertically (the picture is more interesting if those two numbers are different, so the smallest square isn’t exactly in the center).\n\n\n\n   This block is like the squiral, but instead of changing the input to move, it changes the input to turn: \n\n\nTry sketching what it will draw with an angle of 2.\n\n\nThen build it, and try each of these tests:\n\nYou can stop each test with the stop button  when you’re sure nothing new will happen, but don’t decide that too quickly!\n\n\n\n\n\nWhat’s going on? Can you work out a theory to predict anything about the shape it draws for a particular angle input? (Don’t click unless you need a big hint.)\n\nHint: Think about divisibility."
  },
  {
    "objectID": "lab-6/index.html",
    "href": "lab-6/index.html",
    "title": "Squaral",
    "section": "",
    "text": "In this lab we’ll….."
  },
  {
    "objectID": "lab-7/1-exploring-motion.html",
    "href": "lab-7/1-exploring-motion.html",
    "title": "Exploring Motion",
    "section": "",
    "text": "These are works by artists Josef Albers, Maya Hayuk, Vassily Kandinsky, Atta Kwami, Kazimir Malevich, Alma Thomas, and Theo van Doesburg. The styles are different, but all of them are based on polygons or circles.\n\n\n      \n\n\nClick for art credits.\n\n\n\nJosef Albers, “Homage to the Square,” 1965. More: Albers Foundation, smarthistory.org\n\n\nMaya Hayuk, “Chemtrails Miami,” 2013. More: mayahayuk.com, Wikipedia\n\n\nVassily Kandinsky, “Several Circles,” 1926. More: wassilykandinsky.net\n\n\nAtta Kwami, “Bobbo,” 2012. More: attakwami.com\n\n\nKazimir Malevich, “Suprematist Composition,” 1915. More: kazimir-malevich.org, Wikipedia\n\n\nAlma Thomas, “Untitled (Music Series),” 1978. Copyright Smithsonian American Art Museum. More: wikiart.org, Wikipedia\n\n\nTheo van Doesburg, “Composition VII (the three graces),” 1917. More: wikiart.org, Wikipedia\n\n\n\n\n\nIn this lab, you’ll draw polygons so you can create your own art: \n\n\nOn this page, you will explore the basics of drawing a shape in Snap! by using the repeat block to loop through the same code multiple times.\n\n\n\n\n: Algorithm and Pseudocode\n\nAAP-2.A.1, AAP-2.A.2, AAP-2.A.3\n\n\nAn algorithm is a sequence of steps that are usually performed by a computer. The algorithm doesn’t have to be written in any particular programming language or even in a programming language at all; you can write your algorithm in English or any other human language. Some people call an algorithm written in human language pseudocode. Once you know the steps that the computer will take, you can code your algorithm in the programming language of your choice.\n\n\nWhat’s the purpose of “pseudocode”? Why write an algorithm vaguely in English when you could write it precisely in Snap!? If you were programming in a punctuation-heavy language, designing your program in pseudocode would help you focus on the important ideas instead of on details like quotation marks and semicolons. But pseudocode isn’t as necessary with a language like Snap!, and pseudocode can make it easy for you to fall into wishful thinking about what the computer is capable of (such as writing “Pick tomorrow’s winning lottery numbers” or “Here’s the melody; write the harmony”).\n\n\n\n\n\nAAP-2.A, AAP-3.A part b\n\n\n\n  Describe what this algorithm will make the sprite do: \n\n\nLog in to Snap! and build that script to test your hypothesis.\n\n\nClick it, and watch what the sprite does.\n\n\nClick , and then click your script to run it again.\n\n\n\n\nYou can click pen down (or any block) in the palette on the left or in the scripting area to run it. If you click a block inside a script, the whole script runs.\n\n\n Analyze why that script does what it does.\n\n\nCompare your work with another pair. If your script behaves differently from theirs, check both.\n\n\n\nUsing Visible Stepping\n\n\nSnap! has a tool called Visible Stepping that allows you to control how quickly Snap! steps through the blocks of your code.\n\n\n\nClick the Visible Stepping button (), and adjust the slider to control the stepping speed. When you run your code, the sprite will slowly execute each step of the code and highlight it in cyan.\n\nClick for a video of adjusting the Visible Stepping slider.\n\n\n\n\n\n\nYou can slow the stepping to do only one step at a time and wait until you tell Snap! to go on to the next one. Move the slider all the way to the left, and then you can press the Run/Pause button () to see what happens at each step of your code.\n\nClick for a video of single-stepping through code.\n\n\n\n\n\n\n\nVisible stepping can be useful as you read someone else’s code because you can watch it at human speed instead of computer speed. It’s also useful in debugging (fixing problems with) your own code when it’s doing something wrong.\n\n\n\n Switch who is sitting at the keyboard. Then experiment:\n\n\nYou can put your sprite back in the center of the screen with  and you can reset the direction it’s pointing with .\n\n\nChange 100 to 50 in the move block of your script by clicking on the 100 and typing 50. Then click the script again to run it with the new input value.\n\n\nClick the  block in the green Pen palette.\n\n\nChange the number in the turn block and run the script again… and again… and again.\n\n\nClear the stage again, and change the number in the  block.\n\n\nExperiment with the input numbers in the turn and repeat blocks. Try to draw a triangle with equal sides.\n\n\nUse  to set the pen size to something like 4 or 10 or 50. Then click your repeat, move, turn script again.\n\n\nTo change the pen size you must click the set pen size block to run it after you’ve entered the number you want.\n\n\nUse  to experiment with the pen color.\n\n\n\n\n\n\n\n\nExperiment: What leaves a trace?\n\n\nMove the sprite by dragging it to a new location. Does it leave a trace as you move it?\n\n\nMove the sprite by clicking on . Does it leave a trace as it moves?\n\n\nDoes clicking  leave a trace?\n\n\n\n\n\nMake sure your other work has been saved, then  Experiment with the scripts and look inside them to figure out how they work. Could you change the sizes or colors to make it more interesting?\n\n\n\n\n   \n\n\n\n\nSolid rectangles. Make and run this script:  The light blue set block is in the Sensing palette, where it looks like . Just click once in the hexagonal slot to get True (the green check box). If you’re not sure what difference the “flat line ends” makes, try clicking the hexagonal slot again to run the script with that option False. And of course you can change all the numbers, or have your program pick random numbers.\n\n\nColor families. Click the file menu icon and select “Libraries…” Then, find the “Colors and Crayons” library and click “Import.”   In the Pen menu you’ll find the set pen to crayon block. Computers can display billions of colors, but unless you have to match the paint on your wall very precisely, finding your way through all those colors may be more trouble than it’s worth. The crayon library, just like a box of crayons, gives you a small set of vibrant colors, arranged in families. So if you want a lot of browns in your picture, you could pick a random number between 30 and 39. \n\n\n\nAt the right is a painting by Kazimir Malevich. Its elements are rectangles, either horizontal or at a 45-degree angle, plus or minus a few degrees. You can position rectangles randomly. Your picture doesn’t have to look like his—you’re the artist!\n\n\nAlphie: If we just put rectangles in randomly, the tiny square dots will often be covered by larger ones. Maybe we should do big ones first and smaller ones later.\n\n\nGamal: I know ours don’t have to look like the original, but I really like that huge black horizontal rectangle. It gives the painting a structure, with a top part and a bottom part, even though it doesn’t go all the way across. I want to make sure to have one like that.\n\n\nBetsy: I bet we can use the idea of drawing really thick lines without using flat line ends and get interesting results:\n\n\n\n\n\n\nAt the right is a painting by Theo van Doesburg. It has some things in common with the Malevich picture, mainly the use of rectangles as the design elements. But there are no 45-degree rectangles; instead, the constraint is that rectangles may not overlap, so if you want to place a random rectangle in the picture, each end may have to be shortened to avoid collisions. You can use  to find out if the point behind the sprite’s rotation center is black."
  },
  {
    "objectID": "lab-7/2-exploring-snap-drawing-motion.html",
    "href": "lab-7/2-exploring-snap-drawing-motion.html",
    "title": "Angles and Turning",
    "section": "",
    "text": "On this page, you will learn about sprite turning angles, which are needed for drawing polygons. For starters, you’ll draw various asterisks, like these:    \n\n\n\nWhen you were trying to draw an equilateral triangle on the previous page, you might have tried code like this:  and seen a result like this:  It’s common to try this if you’ve learned that the angles in an equilateral triangle are all 60 degrees. However, the angle that the sprite needs to turn to make a triangle is actually 120 degrees, and it’s important to understand why that is and how to find the correct angle for other polygons (five-sided, eleven-sided, etc.).\n\n\n\n\n\n\n\nPerform the four experiments (A-D), and read the comments attached to each one. As you do, talk with your partner about what you see and why it happens.\n\n\nThen, experiment with the last script (shown right): \n\n\nExperiment with a quarter turn (turn 90 degrees instead of 180). Adjust the number of repetitions (the number you give to repeat) until you get the sprite to finish facing the same way it started. \n\n\nExperiment with a tenth of a turn (turn 36 degrees). What input must you give to repeat to get the sprite to finish facing the same way it started?\n\n\nWithout trying it on the computer, figure out what turning angle to use for a five-spoke asterisk. Make sure your partner agrees.\n\n\nThen, try the experiment.\n\n\n\n\n Describe what you’ve learned about turning angles.\n\n\nAt the top of the page you were thinking about triangles. As a step in that direction, make a three-spoke asterisk.\n\nClick for a hint.\n\n\n\n\n\n\n\n\nA 360° turn is a full turn. Half of that (180°) is a half turn. A fourth of 360°  is a quarter turn. You don’t have to do the division yourself. Snap! can compute it for you. You can use  or  to get a seventh of a turn or a third of a turn.\n\n\n\n\nAt the beginning of this page, you knew that to make a triangle you need 120° turns, but maybe you weren’t sure why. Now you know why a three-spoke asterisk takes 120° turns, but what does that have to do with triangles?\n\n\n\n\nTry different negative input values for the move -100 steps block (first -90, then -50, then -10), and do some of the turning experiments (above) with each value. Does this change the values needed for the repeat or turn blocks? These pictures are called “pinwheels.”\n\n\n\nNow, run script (A) in the file and experiment:\n\n\nChange the inputs in script A to draw an asterisk with:\n\n\n5 branches\n\n\n8 branches\n\n\n3 branches\n\n\n\n\nMake a copy of the three-branch script you built (right-click or control-click the script, and choose “duplicate”).\n\n\nIn the copy, remove the move -100 steps block.\n\n\nWhat does this new script do?\n\n\n\n\nMake another copy of the three-branch script you built, and then:\n\n\nChange it to a four-branch script.\n\n\nRemove the move -100 steps block again.\n\n\nWhat does this new script do?\n\n\n\n\n\n\n\n\n\nDebugging with  \n\n\nYou can use say for to get information about the state of your program while it’s running.\n\n\nThis animation shows how to use say for to determine the bug in code that is supposed to draw a rectangle. Notice how say for makes the program pause and gives you information to help you identify the source of error.\n\n\n\n\n\n\n\n\n\nScript B in the same file shows how you can make a 60-branch script behave like the second hand of a clock. Try it out.\n\n\n\nBe sure you are able to explain how this script does what it does.\n\n\nWhy is the change in pen color and size useful here? \n\n\n\n\n\n\n                     \n\n\n\n\n\nAt the right is a painting by Alma Thomas. See what it inspires you to do. It’s your art. Take liberties.\n\n\nGamal: It looks like a map. Houses on the left, the town center on the right, with City Hall and the fire station and the mall.\n\n\nBetsy: Maybe. To me the part on the left looks a little like a fingerprint, and the part on the right is clearly a person facing right, with her nose up against the right edge, halfway down.\n\n\nAlphie: Never mind what it looks like. How are we going to make something that looks like it?\n\n\nBetsy: Parts of it look like curved, thick dotted lines. We could do something like this:        But I’m not sure how to get a bunch of those to fit together.\n\n\nAlphie: Randomness is your friend. Let’s make a bunch of your lines, all different, and just point them in different directions.       \n\n\nBetsy: Wow! That’s very cool.\n\n\nAlphie: Nothing like what it’s supposed to look like, though.\n\n\nBetsy: What do you mean, “supposed”? Go read the boldface line up above this blue box again.\n\n\nAlphie: Yeah, I know, but “take liberties” doesn’t mean “take whatever happens on your first try.” I have another idea. We’ve been thinking of Thomas’s picture as brown boxes on a white background, but it’s actually more brown than white. What if we start with a brown background and draw white lines on it?\n\n\nGamal: What about that town center on the right?\n\n\nBetsy: It’s not a map. But to make you happy, when drawing white lines over toward the right, we can make them thicker, so the right part will have more white space than the left part.\n\n\nAlphie: Uh oh… If you look carefully at the original picture, the brown boxes aren’t all the same shade of brown.\n\n\nBetsy: Alphie, you worry too much. But to make you happy, once we have the space divided into brown regions, we can  some of them in different colors.\n\n\nGamal: Hey! Gang! Remember we imported that crayon library? Guess what! There’s a “World Map” library, too! And it makes “watercolor” maps like this:  And then I went over every dot on the stage using  and  to decide whether to make each dot white or brown: \n\n\n\n\nWhat did Alma Thomas intend by her painting: a map, a fingerprint, or something else? Do some research."
  },
  {
    "objectID": "lab-7/3-blocks-with-inputs.html",
    "href": "lab-7/3-blocks-with-inputs.html",
    "title": "Blocks with Inputs",
    "section": "",
    "text": "On this page, you will use inputs to allow one block to do many things.\n\n\n\nOn the previous page you used blocks asterisk and pinwheel that we wrote for you, each with an input for the number of spokes. Now you’re going to learn how to create your own blocks with inputs.\n\n\n\n\n Make 5 copies of the script and modify those copies so that they make pinwheel designs like these with 3, 4, 5, 6, and 12 branches.     \n\n\nLook at two of your scripts, and write down all of the differences between them.\n\n\n\n\nCRD-2.B.3 (white text)\n\n\nThe scripts are essentially all the same; only some of the input values change. Instead of having many separate scripts, you can make one general block  that will draw all such designs. The block has to work for a variety of inputs.\n\n\n\n\n\nCreate a pinwheel block with an input for the number of branches. Instructions are below and you can also watch the process in the video that follows the instructions.\n\n\nMaking a Block with an Input\n\n\n\nCreate a new block, type the block name and the label for your input, and click OK. For this project, type pinwheel, branches:.\n\nClick for an image of naming the new block.\n\n\n\nThis block is about moving your sprite, so you might choose the blue Motion palette.\n\n\nUsing a comma and a colon are not requirements; they are here to help with clarity.\n\n\n\n\n\nClick the + (plus sign) after “branches:”, type the name of the input, and click OK to add the input slot. For this project, click the + after “branches:” and type number of branches as the name of your input.\n\nClick for images of naming the input.\n\n \n\n\n\n The picture of a blue pinwheel block inside the hat block is called the prototype of the block. As you add inputs and maybe title text to the prototype, it looks exactly like what the finished block will look like to the user, except that where the input slots go, there are orange ovals containing the names of the inputs.\n\n\n\nDrag in the blocks you need, and use the new input.\n\n\nIn this project, drag one of your pinwheel scripts into the Block Editor and snap it to the pinwheel hat block.\n\n\nThen, drag the new input number of branches in to replace the values that change to allow for more general use of the script.\n\n\n\nClick for an image of setting up the code inside the Block Editor.\n\n \n\n\n\n\n\n\nClick for a video of of the whole process of building the pinwheel block.\n\n\n\n\n\n\n\n\n\nDAT-1.A.1\n\n\nWhat kind of data can be an input? All kinds of data. In this example, the input is supposed to be a number, but any kind of value can be used as an input. For instance, you’ve seen the list block called with text as inputs. In Snap!, any kind of data can be used as an input, can be reported by a block, or can be put in a list.\n\n\n\n: What’s an input? Parameter vs. Argument\n\nAAP-3.A.3\n\n\n\n\nA parameter (or formal parameter) is the input name, such as number of branches. The input name is set in the block definition. It never changes. \n\n\nAn argument (or actual argument) is the input value, such as 6 for a hexagonal pinwheel. The input value is given each time the block is run; it can be a different value each time. \n\n\nWe use the word “input” both for parameters (input names) and for arguments (input values).\n\n\n\nAAP-3.B.4\n\n\nOriginally, you made five copies of the pinwheel script to create five slightly different pinwheels. Now, you’ve made a single procedure that includes the shared features of these five scripts and uses a parameter to handle the differences.\n\n\n\nCRD-2.G\n\n\n\n\nComment your code.\n\n\n\nDebugging Tip: Commenting Your Code\n\n\nCRD-2.G.2\n\n\nAdding comments to your code may help you remember what your code does, helps other people reading your code to understand it, and can help you avoid bugs by increasing the clarity of your program. But it won’t do any of those things if you comment every line of code, so each comment just says how a block inside your script works. You can add comments to your Snap! code by right-clicking (or control-clicking) in the Scripts area and choosing “add comment.” Click for an animation that shows how.\n\n\n\n\n\nYou can attach a comment to the hat block in the Block Editor to create a help message for your block. This is the best way to comment, because people can find out what your block does without having to look inside, just like the help messages for primitive blocks.\n\n\n\nBad commenting:\n\n\n\n\n\n\n\nGood commenting:\n\n\n\n\n \n\n\n\n\nPart of the reason some people emphasize the importance of detailed comments is that they are programming in text languages, which discourage long variable and procedure names. (Typically, you can’t include spaces in the names, and you have to type the entire name every time you use that variable or procedure.) So you see names like substLcUc instead of substitute lower case letters for capital letters in string. If a program is full of drastically abbreviated names for procedures and variables, it’s no surprise if the code needs documentation. In Snap!, the names in the program can be self-documenting.\n\n\n\n\n\nMore About Program Documentation\n\n\nCRD-2.G.1, CRD-2.G.5\n\n\nCommenting is only one form of documentation. It’s not the best form, because attaching a comment to a particular place in the program documents only that one procedure or code segment, and doesn’t explain how different sections of the program interact. But commenting is an easy way to document small details.\n\n\nDocumentation can be external (written for users of the program) or internal (written for yourself or other developers of the program). Both kinds are important, if it’s a program people other than the author are going to use. Usually they should be separate documents—another reason why comments aren’t the best form of documentation.\n\n\nCRD-2.G.4\n\n\nIf you’re writing a program by yourself, internal documentation may seem silly. “I know how my own program works.” But if the program will still be in use a year later, it will probably need maintenance, and you may well have forgotten the details of its implementation. In a programming class like this one, most of the programs you write are very small, and you can understand them at a glance. But real programs are generally much bigger than lab exercises designed to take less than an hour of work.\n\n\nCRD-2.G.3\n\n\nIt’s best if the first attempt at documentation is made even before starting to code. The documentation will specify the desired program behavior (external) and the intended program structure (internal). These documents can be used in testing the code to ensure that it behaves as planned.\n\n\n\n\nAAP-3.A part a\n\n\nCreate a script that draws two pinwheels on the stage, with different numbers of spokes.\n\n\n\n\nAAP-3.A.4\n\n\nWhen you embed a command procedure (such as pinwheel) within a script, the procedure is completed before continuing the script that called it.\n\n\n\n\nThese images were created with the pinwheel block and set pen color. Create your own art.   \n\n\nMake an animation."
  },
  {
    "objectID": "lab-7/4-modify-your-pinwheel.html",
    "href": "lab-7/4-modify-your-pinwheel.html",
    "title": "Modify Your Pinwheel",
    "section": "",
    "text": "On this page, you will modify your existing pinwheel block so that you can use it to draw a variety of shapes. \n\n\nAdding Multiple Inputs\n\n\nRecall how you first generalized your original pinwheel script: you added an input called number of branches that controlled the turning angle of the sprite. By adding more inputs, you can generalize other aspects of your program.\n\n\n\n\nIf it isn’t already open, open your U1L3-Pinwheel project.\n\n\n\nAAP-3.A part b\n\nExperiment with the input for the second move block inside your pinwheel block as shown below.\n\n\n First predict. What do you think will happen?\n\n\n\nThen try several inputs between -100 and 0.\n\n\n What happened? How does it compare to what you predicted? How does this input value impact the sprite’s behavior? How does it impact the resulting image on the stage? What number input number gives an asterisk? What input number gives a polygon? \n\n\n\n\n\nReview how to add an input at Unit 1 Lab 3 Page 3: Blocks with Input, if needed.\n\nAdd a second input to control the amount of “backing up” that the sprite does before each turn through the full 360°.\n\n\nEdit your pinwheel block, then click the “+” sign at the end to add an input label (choose “Title text”). Type backup: as shown below, and click “OK”.\n\n\nWatch a video of steps a and b.\n\n\n\n\n\nThen click the “+” sign at the end again to add an input (choose “Input name”), and call it backup.\n\n\nDrag off the new backup input, place it where it belongs in the pinwheel code, and press “OK” or “Apply.”\n\n\nCheck that changing the backup input value when running the pinwheel block gives the correct result. Debug any problems.\n\n\n\n\nUse an Operator block.\n\n\nChange the pinwheel script so that it will accept a positive value (between 0 and 100) for backup, and test it with a variety of inputs.\n\nClick for example inputs to test.\n\n     \n\n\n\n\n\n\n\nAAP-3.C.1, AAP-2.K.2\n\n\nThe procedure definition for the custom pinwheel command  would be written as\n\nPROCEDURE pinwheel(numberOfBranches)\n{\nREPEAT numberOfBranches TIMES\n{\nmove(100)\nmove(-37)\nturn_clockwise(360 / numberOfBranches)\n}\n}\n\nor \n\n\n\nThe procedures\nmove()\nand\nturn_clockwise()\naren’t built in to the AP’s language so they are written in lower case like other programmer-defined procedures.\n\n\nNotice that the hat block, , would be written as\nPROCEDURE pinwheel(numberOfBranches)\n. The word\nPROCEDURE\ntells you that that line of the code is like a hat block; the variable name in the parentheses on that line is the input that the procedure takes.\n\n\n\n\n\n\n\nAdd another input called size to control the input to the first move block. \n\n\nTry out a variety of inputs to your pinwheel program.\n\nClick for example inputs to test.\n\n     \n\n\n\n\n Discuss what input values will give you a polygon or an asterisk.   \n\n\n\n\n\nDebugging Tip: Organizing Your Code\n\n\nOne way to avoid having bugs in your program in the first place is to keep your code organized by deleting any unused scripts. You can use the clean up option by right-clicking (or control-clicking on a Mac) in the scripting area to organize your blocks. You can remove a block or script either by dragging it out of the scripting area and back to the palettes on the left or by choosing the “delete” option from the drop-down menu. Click here for a video. (Note that this is different from the “delete block definition” option which will permanently delete a custom block and all its instances from your entire project.)\n\n\n\n\n\n\n\n\nTidy up the code in your project, if necessary.\n\n\n\n\n\nAAP-3.A.5\n\n\nThis instruction  would be written as\nPinwheel(6, 80, 20)\nor .\n\n\nYou may hear people use the term “pseudocode” to refer to this pseudo-language used on the AP CS Principles exam, but it’s not pseudocode. Pseudocode isn’t a programming language at all, it’s the use of normal human language to describe an algorithm.\n\n\n\n\n\nFind inputs to pinwheel that make the result look like a circle.\n\n\n\n\n                     \n\n\n\n\n\nOn the right is a painting by Vassily Kandinsky. The four pictures above were inspired by it, but the sizes and placement of the circles in the original were carefully chosen, whereas the ones above are random. Also, Kandinsky’s solid circles aren’t quite uniform in color. For example, the green circle near the top right of the picture has a light green outer border, a somewhat darker green inside, a blue-green inner border, and black inside that.\n\nWhen two solid circles overlap, you can see both colors, or rather, a color in between the two. To achieve that effect in Snap!, before drawing the second circle, use the  block. A transparency of 0 means you see only the new color; a transparency of 100 means you see only the old color. In-between values determine which color is stronger in the overlapping area.\n\nMost of Kandinsky’s circles are solid, but a few aren’t. most notably the large white “halo” near the middle of the painting. His hollow circles don’t have a constant width; if you want yours to look like his, change the pen size a little as you’re drawing. But of course you don’t have to make your art look exactly like his, nor exactly like the examples above. Use them for inspiration, but you’re the artist.\n\n\nMake a picture that looks more like a real pinwheel:\n Copyright 2010 Victoria Hudgins. Used by permission.\n\n(Save your project first; you’ll need the pinwheel block you already have later.)\n\n\nIt doesn’t have to look exactly like the photo. But each arm of a pinwheel is essentially two triangles. You may find the  block helpful."
  },
  {
    "objectID": "lab-7/5-remix-your-pinwheel.html",
    "href": "lab-7/5-remix-your-pinwheel.html",
    "title": "Using Pinwheel to Make Polygon",
    "section": "",
    "text": "On this page, you will use your existing pinwheel block to make asterisk and polygon blocks. \n\n\nYou can use your general-purpose pinwheel procedure to create other, simpler special-purpose procedures that each do a particular job.\n\n\n\n\n\nIf it isn’t open already, open your U1L3-Pinwheel project from the previous page.\n\n\nUse your pinwheel block to create a more specialized asterisk block.\n\n\nFirst, make a new block called asterisk with two inputs: one for the number of branches and one for the length of each branch. You may wish to review how to make a new block at Unit 1 Lab 2 Page 4: Making Your Own Block.\n\n\n\nNow fill in the three inputs to pinwheel so that it correctly draws an asterisk.\n\n\n\n\n\nSimilarly, write a polygon block that uses pinwheel with appropriate inputs to draw a polygon with a given number of sides and side length.\n\n\n\n\nDebugging with \n\n\nYou can use pause all to place breaks in your code so you can see what’s happening along the way. When you run code with pause all in it, you can click the yellow Run/Pause button next to the Green Flag (/) to move through the code up until a pause all block is reached again. The pause all block will pause every script that is running until the yellow Run/Pause button is clicked.\n\n\n\n\n\n\nOn page Unit 1 Lab 2 Page 2: Making Programs Talk, you learned about procedural abstraction: giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.\n\n\n\nAAP-3.B.4\n\n\nHere is another kind of abstraction: noticing that asterisk and polygon are both kinds of pinwheels, and writing one, more general, pinwheel block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.\n\n\nAAP-3.B.5\n\n\nThis is an example of abstraction by generalization: looking at chunks of code that are almost the same and writing a single block by using an input to distinguish among the different cases.\n\n\n\n\n\nIf you look inside of pinwheel and see how you’re using it in polygon, you’ll see that there are steps that you don’t really need for the case of a polygon. Write another version of polygon built directly out of primitive blocks (move, turn and so on). How simple can you make it?\n\n\n\nAAP-3.B.7\n\nAs long as your polygon block draws the right picture, it doesn’t matter to the rest of the project what’s inside it.\n\n\n\n\n\n\n\nUse your pinwheel block code one last time to create a circle block that accepts one input for the size.\n\n\nUse the random block together with set pen color and set pen size to draw a variety of shapes. \n\n\n\n\n\n\nChallenge: Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it."
  },
  {
    "objectID": "lab-7/7-programming-journal.html",
    "href": "lab-7/7-programming-journal.html",
    "title": "Keeping a Programming Journal",
    "section": "",
    "text": "On this page, you will learn how keeping a programming journal can help your programming.\n\n\n Every day in your journal, keep notes like the following:\n\n\nAny concept about programming that you had trouble understanding.\n\n\nQuestions that you want to remember to ask.\n\n\nIdeas for projects that you want to work on or improvements to an existing project that you want to make.\n\n\nProblems with your code:\n\n\nWhat was the symptom?\n\n\nWhat did the cause turn out to be?\n\n\nWhat change did you make to fix the problem?\n\n\nWhat techniques did you use to investigate the problem?\n\n\n\n\nHow did you organize your code?\n\n\nDid you define new procedures?\n\n\nDo they take inputs? If so, what type of inputs do they require? (That is, what is their domain?)\n\n\nDo they take report a value? If so, what type of value do they report? (That is, what is their range?)\n\n\n\n\nCould you have defined a procedure somewhere instead of copying and pasting code?\n\n\n\n\nWhen appropriate, you might want to include pictures of the stage or of important scripts in your code.\n\n\n\n\n\nYou don’t need to copy things out of the curriculum into your journal; you can always look those up in the index.\n\nThe journal is for you, not for your teacher. You won’t be graded on what you do or don’t put in it. The journal isn’t graded because it’s a record of the things only you experience in the class, not a record of the ideas in the curriculum. Everyone’s journal will be different."
  },
  {
    "objectID": "lab-7/index.html",
    "href": "lab-7/index.html",
    "title": "Polygons",
    "section": "",
    "text": "In this lab we’ll….."
  }
]