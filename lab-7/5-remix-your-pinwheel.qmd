---
title: "Page 5: Using <code>Pinwheel</code> to Make <code>Polygon</code>"
subtitle: "Lab 7, Page 5"
order: 5
---

```{=html}
<script type="text/javascript" src="/utilities/gifffer.min.js"></script>
```
```{=html}
<script type="text/javascript">window.onload = function() {Gifffer();}</script>
```
<link rel="stylesheet" type="text/css" href="/css/bjc-gifffer.css">

::: learn
<strong>On this page,</strong> you will use your existing <code>pinwheel</code> block to make <code>asterisk</code> and <code>polygon</code> blocks.<br /> <img src="/img/1-introduction/Blockswith-Inputs_img/asteriskpolygonCycle.gif" title="Animation cycle from Asterisk to Polygon" alt="Animation cycle from Asterisk to Polygon" class="indent" height="250"/>
:::

<p>You can use your <em>general</em>-purpose pinwheel procedure to create other, simpler <em>special</em>-purpose procedures that each do a particular job.</p>

::: forYouToDo
<img src="/img/1-introduction/asterisk-new.png" title="Asterisk with 12 branches" alt="Asterisk with 12 branches" class="imageRight" height="250"/>

<ol>

<li>If it isn't open already, open your U1L3-Pinwheel project from the previous page.</li>

<li>

Use your <code>pinwheel</code> block to create a more specialized <code>asterisk</code> block.

<ol>

<li>First, make a new block called <code>asterisk</code> with two inputs: one for the <var>number of branches</var> and one for the <var>length</var> of each branch. You may wish to review how to make a new block at <a href="/cur/programming/1-introduction/2-gossip-and-greet/4-making-a-new-block.html?topic=nyc_bjc%2F1-intro-loops.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 1 Lab 2 Page 4: Making Your Own Block">Unit 1 Lab 2 Page 4: Making Your Own Block</a>.</li>

<img src="/img/1-introduction/asterisk-using-pinwheel.png" title="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" alt="asterisk, branches:(branches) branch length:(length){pinwheel, branches: ( ) size:( ) backup:( )}" width="507" height="106"/>

<li>Now fill in the three inputs to <code>pinwheel</code> so that it correctly draws an asterisk.</li>

</ol>

</li>

<img src="/img/icons/pair-programming-swap.png" title="Pair Programming Swap" alt="Pair Programming Swap" class="inline"/>

<li>Similarly, write a <code>polygon</code> block that uses <code>pinwheel</code> with appropriate inputs to draw a polygon with a given number of sides and side length.<br /></li>

</ol>

::: takeNote
<h3><strong>Debugging with <img src="/img/2-complexity/Debugging/pause-all-block.png" title="pause all" alt="pause all" height="42"/></strong></h3>

<p>You can use <code>pause all</code> to place breaks in your code so you can see what's happening along the way. When you run code with <code>pause all</code> in it, you can click the yellow Run/Pause button next to the Green Flag (<img src="/img/sys/play-button.png" title="play button" alt="play button"/>/<img src="/img/1-introduction/pause_button.png" title="pause button" alt="pause button"/>) to move through the code up until a <code>pause all</code> block is reached again. The <code>pause all</code> block will pause <em>every</em> script that is running until the yellow Run/Pause button is clicked.</p>
:::
:::

::: takeNote
::: sidenoteBig
<p>On page <a href="/cur/programming/1-introduction/2-gossip-and-greet/2-gossip.html?topic=nyc_bjc%2F1-intro-loops.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 1 Lab 2 Page 2: Making Programs Talk">Unit 1 Lab 2 Page 2: Making Programs Talk</a>, you learned about <em>procedural abstraction:</em> giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.</p>
:::

::: comment
AAP-3.B.4
:::

<p>Here is another kind of <em>abstraction</em>: noticing that <code>asterisk</code> and <code>polygon</code> are both kinds of pinwheels, and writing one, more general, <code>pinwheel</code> block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.</p>

::: comment
AAP-3.B.5
:::

<p>This is an example of <strong>abstraction by generalization</strong>: looking at chunks of code that are <em>almost the same</em> and writing a single block by <em>using an input</em> to distinguish among the different cases.</p>
:::

::: forYouToDo
<ol start="4">

<li>If you look inside of <code>pinwheel</code> and see how you're using it in <code>polygon</code>, you'll see that there are steps that you don't really need for the case of a polygon. Write another version of <code>polygon</code> built directly out of primitive blocks (<code>move</code>, <code>turn</code> and so on). How simple can you make it?</li>

::: takeNote
::: comment
AAP-3.B.7
:::

As long as your <code>polygon</code> block draws the right picture, it doesn't matter to the rest of the project what's inside it.
:::

<img src="/img/icons/save-now.png" title="Save your work" alt="Save your work" class="inline"/>

</ol>
:::

::: ifTime
<ol start="5">

<li>Use your <code>pinwheel</code> block code one last time to create a <code>circle</code> block that accepts one input for the size.</li>

<li>Use the <code>random</code> block together with <code>set pen color</code> and <code>set pen size</code> to draw a variety of shapes.<br /> <img src="/img/1-introduction/assorted-pinwheels.png" title="assortment of pinwheels" alt="assortment of pinwheels" class="indent"/></li>

</ol>
:::

::: takeItFurther
<ol type="A">

<li><strong>Challenge:</strong> Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it.<br /> <img src="/img/1-introduction/red-circle-in-blue-square.png" title="red circle in blue square" alt="red circle in blue square" class="indent"/><br /></li>

</ol>
:::

::: takeItTeaser
<img src="/img/1-introduction/bh/Stage (16).png" title="Albers-style nested squares" alt="Albers-style nested squares" width="200"/>       <img src="/img/1-introduction/bh/Stage (22).png" title="Albers-style nested squares" alt="Albers-style nested squares" width="200"/>       <img src="/img/1-introduction/bh/Costume(4).png" title="Albers-style nested squares" alt="Albers-style nested squares" width="200"/>       <img src="/img/1-introduction/bh/Costume(7).png" title="Albers-style nested squares" alt="Albers-style nested squares" width="200"/>
:::

::: takeItTeased

<p> This Take it Further refers to what you did in <a href="https://camp.echa.ng/lab-6">Lab 6: Squiral</a>. Take a look back at what you did for that lab and work with that code that you made for that lab to complete this.</p>

<ol type="A">

<li>Find a way to use <code>for</code> to nest squares this way. Build your <em>block</em> with two inputs that let you specify how many squares the design will contain and how much bigger each square will be than the previous one.<br /> <img src="/img/icons/tough-stuff.png" title="Tough Stuff" alt="Tough Stuff" class="imageRight"/> <img src="/img/1-introduction/concentric-squares.png" title="concentric squares" alt="concentric squares" class="indent" width="219" height="170"/></li>

</ol>

<img src="/img/1-introduction/Josef_Albers&apos;s_painting_&apos;Homage_to_the_Square&apos;,_1965.jpg" title="painting-by-Josef-Albers" alt="painting-by-Josef-Albers" class="imageRight" height="150"/>

<p>On the right is a painting by Josef Albers. He was interested in experimenting with variations of color within a "family" of similar colors. Snap<i>!</i> will let you make similar experiments.</p>

<ol type="A" start="2">

<li>What is the favorite color of the author of this activity?</li>

<li>If you didn't do the Take It Further activity based on this Kazimir Malevich picture <img src="/img/1-introduction/Malevich-tiny.jpg"/> then <a href="/cur/programming/1-introduction/3-drawing/1-exploring-motion.html">read it now</a> to learn about Snap<em>!</em> features for <em>solid rectangles</em> and <em>color families</em>.</li>

<li>If you haven't already, do If There Is Time #10, which shows a simple version of this project idea.</li>

<li>

Okay, now dig in.

::: narrowpurple
<strong>Randomness:</strong> The four examples above are different from the actual Albers picture in that they include occasional colors that aren't from the same family. This can make the pictures more interesting to someone who doesn't share Albers's interest in subtle differences in color. (Albers himself, in fact, had more color variation in other pictures of this type.) <em>Too much</em> randomness, though, can make the picture <em>less</em> interesting. Compare the last two examples above; the left one of those two is clearly based on the orange family, with rainbow-neighbors red and yellow, but the right one has violets, greens, oranges, a yellow---too much chaos, maybe. Look back at the Gossip project if you don't remember how to choose something special once out of six times, or once out of 14 times. Other random choices you can make are the number of squares, how much to shrink the size from one square to the next, and how much to move the corner of the next square horizontally and vertically (the picture is more interesting if those two numbers are different, so the smallest square isn't exactly in the center).
:::

</li>

<li>

<img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff"/> <img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff"/> <img src="/img/icons/tough-stuff-mini.png" title="Tough Stuff" alt="Tough Stuff"/> This block is like the squiral, but instead of changing the input to <code>move</code>, it changes the input to <code>turn</code>:<br /> <img src="/img/1-introduction/inspi.png" title="inspi repeat:(num) size:(size) angle:(angle) : for (i) = (1) to (num) {move (size) steps; turn ((i) * (angle)) degrees}" alt="inspi repeat:(num) size:(size) angle:(angle) : for (i) = (1) to (num) {move (size) steps; turn ((i) * (angle)) degrees}" class="indent" height="150"/>

<ol>

<li>Try sketching what it will draw with an angle of 2.</li>

<li>

Then build it, and try each of these tests:<br />

::: sidenoteBig
You can stop each test with the stop button <img src="/img/1-introduction/stop_button.png" title="stop button" alt="stop button" class="button"/> when you're sure nothing new will happen, but don't decide that too quickly!
:::

<img src="/img/1-introduction/inspi-tests.png" title="inspi with (1000,10,80), (1000,5,1), (1000,5,7), (1000,5,13), (1000,10,77)" alt="inspi with (1000,10,80), (1000,5,1), (1000,5,7), (1000,5,13), (1000,10,77)" class="indent"/>

</li>

<!--<li>What's going on? Can you work out a theory to predict anything about the shape it draws for a particular angle input? <a id="hintbutton" onClick="document.getElementById('hintbutton').innerHTML='Think about divisibility.';">(Don't click unless you really, really need a super big hint.)</a></li>-->

<li>

What's going on? Can you work out a theory to predict anything about the shape it draws for a particular angle input? <a href="#hint-1" data-bs-toggle="collapse" class="collapsed" title="Hint">(Don't click unless you need a big hint.)</a>

::: {#hint-1 .collapse}
Hint: Think about divisibility.
:::

</li>

</ol>

</li>

</ol>
:::