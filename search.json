[
  {
    "objectID": "lab-2/4-gossip.html#exploring-custom-blocks",
    "href": "lab-2/4-gossip.html#exploring-custom-blocks",
    "title": "Page 4: Making Programs Talk",
    "section": "Exploring Custom Blocks",
    "text": "Exploring Custom Blocks\n\n\n\n\n\n\nYou’ll need to be logged in to save to your account. You may wish to review how to log in at Lab 1 Page 1: Getting Started with Snap!\n\n\nPerform each experiment (A-C) several times.\n\n\n\n\n\nWhat does each variable report?  \n\n\n\nNow click on  what does each variable report now?\n\n\n\nWhat does this reporter block report? \n\n\nWhat happens when you click this script (labeled C)? \n\n\n\n\n\n\nWould you like to make the blocks bigger?\n\n\nIn the Settings menu (), choose “Zoom blocks…”, and adjust the slider."
  },
  {
    "objectID": "lab-2/4-gossip.html#exploring-a-second-sprite",
    "href": "lab-2/4-gossip.html#exploring-a-second-sprite",
    "title": "Page 4: Making Programs Talk",
    "section": "Exploring a Second Sprite ",
    "text": "Exploring a Second Sprite \n\n\n\n In the sprite corral, click on the green sprite named “Sprite(2)” to control its scripts and costumes. \n\n\nPerform each experiment (A-C) several times.\n\n\n Write down what broadcast does.\n\n\n Discuss how who2 compares to who and how gossip2 compares to gossip.\n\n\n Make Sprite(2) tell Sprite to respond. What happens?\n\n\n\n \n\n\n\nThe broadcast block sends a message to all the sprites. To set the message, click the down arrow and select “new…” \n\n\nFor more information about the when I receive block, right-click (or control-click on a Mac) the block and select “help…”"
  },
  {
    "objectID": "lab-2/3-varying-alonzo.html",
    "href": "lab-2/3-varying-alonzo.html",
    "title": "Page 3: Adding More Variables to Alonzo",
    "section": "",
    "text": "On this page, you will add even more variables to your game to make the difficulty fully customizable.\n\n\n\n\n\nThere are lots of values in this game that can be varied to alter the gameplay, making it harder or easier, or making the game take more or less time to win. Choose one of those values and create a variable to represent the value, just as you did on the previous page. Name your variable something that makes it clear what purpose it is serving.\n\n\nWhen your new variable appears on the stage, right click on it to reveal a menu of options for modifying the way it’s displayed. Choose the third option on the menu, which is “slider”. This should add a slider feature to the variable display, as shown in the animation below.\n\n\nNow right click to access the menu again. This time, choose “slider min…” and choose the minimum value you want to use. Then repeat this, but choose “slider max…”. Test your variable by sliding the slider back and forth to make sure its possible values are between your chosen minimum and maximum.\n\n\nFind your new variable at the top of the orange variables palette, and drag the oval where it should go in your code. The goal is to have the code reflect the current value chosen on the slider.\n\n\nTest your game. While you are playing the game, adjust the slider and see what happens to the gameplay."
  },
  {
    "objectID": "lab-2/index.html",
    "href": "lab-2/index.html",
    "title": "Lab 2: Variables and Gossip",
    "section": "",
    "text": "In this lab, you’ll work more on clicking our little yellow creature and also create a program that creates a fake human-like conversation using some new concepts, such as working with variables, creating blocks, and conditionals"
  },
  {
    "objectID": "lab-2/2-keeping-score.html",
    "href": "lab-2/2-keeping-score.html",
    "title": "Page 2: Keeping Score with Global Variables",
    "section": "",
    "text": "On this page, you will use a global variable to keep score in your Click Alonzo game.\n\n\n\nIn your Number Guessing Game, you used script variables to store information (the value of secret number) that was needed by only one script. To keep score in Click Alonzo, more than one script will need access to that information, so you’ll use a global variable.\n\n\n: Global Variable\n\nA global variable is a variable that is usable by all scripts in the program.\n\n\n\nWhen are global variables needed?\n\nMost of the time, script variables are a better choice because they can’t be changed by some other part of the program, and so they reduce the chance of bugs. But if multiple scripts need access to a variable or if the information in that variable needs to be saved with your project, then use a global variable.\n\n\n\n\n\nOpen your L1-ClickAlonzo project, play the game, and review the code so you remember how it works.\n\n\nCreate a global variable named score. Here’s how.\n\n\nMaking a Global Variable\n\n\nClick  in the Variables palette. (It’s not a block; you can’t drag it into the scripting area.)\n\n\nType the title for your variable. In this case, it’s score.\n\n\nClick “OK.”\n\n\n\n\nUse the score variable to keep track of the player’s score:\n\n\nInitialize score to 0 at the beginning of the game.\n\n\n\nSetting the starting value of a variable is known as initializing the variable.\n\n\n\nAAP-1.B.1\n\n\nMake the program change the score by 1 whenever the sprite is clicked.\n\n\n\n\n\nTest and debug. Play the game enough to make sure that the score variable works. \n\n\n Right now, the game doesn’t have a way to win, but you’ll change that. Decide on the score that you will use to test whether the player has won.\n\n\nUse a conditional to determine when the player reaches that score. When they do:\n\n\nMake Alonzo stop jumping around.\n\n\nMake Alonzo appear again. (You’ll have to reset the ghost effect.)\n\n\nCongratulate the player for a few seconds.\n\n\n\n\n\nTest and debug. Take turns playing, and fix any bugs. \n\nDebugging Tip: Display of Variables\n\nWhen you are debugging your code, it can help to see the value of a variable at different points in your program. This is done differently for local and global variables:\n\n\nGlobal variables have check-boxes that control the display of the variable watcher on the stage (shown below). \n\n\nIf it’s a local (script) variable, you can use the show variable block inside the script to display a watcher on the stage (and use hide variable to hide it again).\n\n\n\n\n\n\n\n\n\n\nIf the sprite moves without being clicked, make the score go down by 1.\n\n\nGame too hard? Increase the score by 2 for a hit. Too big a change? Increase by 3 for a hit, decrease by 2 for a miss. You can make arbitrarily fine adjustments. This process is called playtuning a game."
  },
  {
    "objectID": "lab-2/7-if-else.html",
    "href": "lab-2/7-if-else.html",
    "title": "Page 7: Adding Variety to Gossip",
    "section": "",
    "text": "On this page,  you will improve your program so that sometimes the sentences are a bit longer and more complex.\nThe block  has been built for you. It randomly chooses 1, 2, 3, or 4, and if that number is 3, then it reports something more complicated than who. Otherwise, it reports who, just as before."
  },
  {
    "objectID": "lab-2/7-if-else.html#making-a-block-call-itself",
    "href": "lab-2/7-if-else.html#making-a-block-call-itself",
    "title": "Page 7: Adding Variety to Gossip",
    "section": "Making a Block Call Itself",
    "text": "Making a Block Call Itself\n\n\n\nEdit more complicated who. Replace one of the who blocks with a fresh copy of more complicated who that you drag in from the palette. Click more complicated who enough times to see how it has changed.\n\n\nCRD-2.B\n\n\n Describe the change in behavior, and explain what you think is causing it.\n\n\n\n\n\n\nMake Sprite(2) occasionally give a more complicated reply.\n\n\n\n\n\n\nMake more complicated who give the more complicated response three out of four times instead of one out of four times.\n\n\nWhat happens when you try it out? Was it what you expected? Explain why it happened."
  },
  {
    "objectID": "lab-2/1-pair-programming.html",
    "href": "lab-2/1-pair-programming.html",
    "title": "Page 1: Pair Programming",
    "section": "",
    "text": "On this page, you will learn about collaborating by using pair programming.\n\n\n\nIn the early days of computers, programming was something you did alone. You planned the program in your head, and then you sat down and wrote the code.\n\n\nThe programs people write these days are far too complicated for that. Graphical user interfaces, interacting with servers on the Internet, internationalization, security against malware attacks, and many more requirements are part of a serious software development effort, and a program is likely to have hundreds of authors.\n\n\nThis means that collaboration skills are as important as coding skills today. Even if you don’t end up working as a programmer, collaboration is part of most jobs.\n\n\nCRD-1.B.2\n\nWe’ll watch this video in class together, but here it is in case you want to watch it again:\n\n\nThere are several ways to organize a collaboration. In this course, you’ll use a collaboration technique called pair programming—writing computer programs in teams of two. One partner, the driver, controls the computer. The other, the navigator, helps catch errors and keeps track of how the code being written fits into the overall plan. The navigator is also in charge of reading the lab pages out loud. Aim for equal time in each role, switching about every five minutes.\n\n\nHow not to do pair programming:\n\nThe biggest mistake in pair programming is for the navigator to tune out and let the driver do all the work. The navigator has to be paying attention; otherwise you’re just taking turns doing the entire work instead of making use of the benefits of having two people.\n\n\n\nHow to collaborate in pair programming\n\nCRD-1.C.1:\n\n\ncommunication - Keep talking, Listen\n\n\nconsensus building - Don’t bargain\n\n\nconflict resolution - Don’t get defensive, Don’t be afraid of conflict\n\n\nnegotiation - Don’t bargain\n\n\n\n\n\n\nKeep talking. The driver should constantly explain the reason for using each block. The navigator should interrupt with questions: What about doing it this other way? How does this program avoid such-and-such bug? Don’t we have to deal with this requirement and that requirement at the same time? We’re pretty much repeating this other piece of code over there; could we hide that code in a block and use the same block in both places? And so on.\n\n\nListen. Try to understand each other’s thinking before you disagree.\n\n\nWork as a team. If you find yourself being defensive about feedback, remember that nobody’s code is perfect right away. It’s the navigator’s job to find problems in the driver’s code, and when you switch places, the new navigator will repay the favor. You’re a team, not a competition.\n\n\nWork toward consensus. Don’t bargain; if you have disagreements about how something should be done, don’t say “well, you can do this your way if I can have this other thing my way.” Both partners should listen to each other’s reasons and work together to find a solution that meets both needs.\n\n\nSpeak your mind and work out your differences. That doesn’t mean you should try to disagree, but if you do, you can still be friends. Work out the conflict by listening and understanding each other, rather than by giving in just to end the argument.\n\n\nRegardless of experience, take turns. Don’t let the more experienced programmer overwhelm the other partner. Make sure both partners are comfortable contributing, in either role. A group is almost always better at problem-solving than any of the people in the group is alone.\n\n\n\n\nDuring this camp, we’ll use these symbols to remind you to switch roles at specific points in the lab. After this lab, you’ll be switching around every fifthteen minutes.  \n\n\n\nAt this point in class, we’ll be playing a game called “Keep Talking and Nobody Explodes”\n\n\nSit down with your partner at one computer to learn how to play the game.\n\n\nFor convenience, here’s the link to the bomb defusal manual,."
  },
  {
    "objectID": "lab-2/5-customizing.html",
    "href": "lab-2/5-customizing.html",
    "title": "Page 5: Customizing and Debugging",
    "section": "",
    "text": "On this page, you will edit the word lists used by the sprites and debug any problems.\n\n\n\n\n\nOpen your L2-Gossip project. Edit the “randomize variables” block to change the phrases that the program uses. (See the instructions in the box below to edit a block) Be creative and funny but thoughtful.  \n\nHow to Edit a Block\n\n\nFind the block in the scripting area or the colored palettes on the left.\n\n\nControl-click (or right-click) on the block and choose “edit…”\n\n\nMake changes to the block’s internal code. (Instructions are already inside these blocks.)\n\n\nClick OK when you’re satisfied. (Or click “Cancel” if you don’t want to make changes.)\n\n\n\nClick for a video of these steps of how to edit a block.\n\n\n\n\n\n\n\n\n\n\n\n: Lists, Strings, and Concatenation\n\n\n\nAAP-1.C.1 first sentence\n\n\n\nWhat does “ordered” mean?\n\nIt doesn’t mean that the items have to appear in alphabetical or numeric order. It just means that  is a different list from .\n\n\nA list is an ordered sequence of items. You’ve seen this example: \n\n\nAAP-2.D.1, AAP-2.D.2\n\n\nThe items of this list are strings. A string is a sequence of characters (letters, digits, punctuation, etc.). A substring is just a piece of some existing string. For example, “Hanna,” “anna”, and “nnah” are each substrings of the string “Hannah.” (The empty string as well as the original string are both also substrings.)\n\n\nTo concatenate strings means to make a bigger string by connecting two or more smaller strings. In Snap!, the  block lets you concatenate strings.\n\n\n\n\n\n\n\n\nThe process of testing, finding problems, and fixing them is called debugging.\n\n\n\nMake sure your program works. Test each block as well as the program as a whole. If something doesn’t work, don’t go on without fixing it.\n\n\n\nChange the costumes to anything you like.\n\nAdding a Costume\n\n\nIn the sprite corral, select the sprite you want to give costumes to.\n\n\nChoose “Costumes…” from the File () menu.\n\n\nChoose a costume.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box.\n\n\n\n\nYou can use a photograph or picture from the Internet by dragging the image onto the Snap! window.\n\n\n\nFix any issues with your costumes.\n\nAdjusting a Costume\n\n\n\nYou can change the size of your sprite using .\n\n\nYou can change the position of your sprite using .\n\n\nYou can change the direction your sprite is facing: \n\n\n\n\n\n\n\n\n\n\nChange the background on the Stage.\n\nAdding a Stage Background\n\nChanging a stage background is almost like changing a costume.\n\n\n\nIn the sprite corral, select the stage.\n\n\nChoose “Backgrounds…” from the File () menu.\n\n\nChoose a background.\n\n\nClick “Import.”\n\n\nClick “Cancel” to close the dialog box."
  },
  {
    "objectID": "lab-2/6-making-a-new-block.html#debugging",
    "href": "lab-2/6-making-a-new-block.html#debugging",
    "title": "Page 6: Making Your Own Block",
    "section": "Debugging",
    "text": "Debugging\n\n\n\n\nTest your custom gossip response block by clicking it several times. It should behave like the who, does what, and who 2 blocks. Debug any problems before moving on.\n\n\nReview how to edit a block in Lab 2 Page 5: Customizing and Debugging, if needed.\n\n\nUse your new block: Edit gossip 2, and insert gossip response in place of the text “Oh, but….” \n\n\n\nWhy do I see plus signs around gossip 2 in Snap! but they’re not in this picture?\n\n\nNormally, when you are using the Block Editor, you see plus signs because you have to click on them to add inputs to your blocks. But to show you the finished code here, it looks cleaner without the plus signs.\n\n\n\nTest and debug gossip 2 also.\n\n\nThen test the whole program by clicking script D several times, and fix any bugs."
  },
  {
    "objectID": "lab-1/3-loading-mobile-device.html",
    "href": "lab-1/3-loading-mobile-device.html",
    "title": "Page 3: Sharing Your Game",
    "section": "",
    "text": "The game isn’t nearly finished, but it’s finished enough. On this page, you will learn how to share your project, to your teachers and anyone that you want to show what you did!\n\n\n\n\nCreate a link to share your app.\n\nCreating a Link\n\n\n\nMake sure your project is saved.\n\n\nChoose “Open…” from the Snap! File menu, .\n\n\nSelect the project you want to share from the project list (your current project is likely named “L1-ClickAlonzo”).\n\n\nTo locate a file, you can type in the search bar at the top to see only a list of matching files (see the example on the right, where only “U1” files are shown).\n\n\nClick “Share,” and then click “Yes” to share. Then click “Cancel” to close the menu.\n\n\nNow, the URL (the link) at the top of the browser window has changed. Copy the new URL, and email it to yourself. When you have time, you can send it to someone else to share the project.\n\n\nClick for images that show where the URL is and how it changes.\n\n \n\n\n\nIf you change something in the project after sharing it, the changes are reflected in what other people see. You don’t have to re-share it.\n\n\n\n\n\nIf you are working with a partner, make sure you both have a copy.\n\nSaving a Copy of a Project\n\n\nChange who is logged in to Snap!\n\n\nOpen the cloud menu, , and choose “Logout.” Don’t leave the Snap! window or exit the browser.\n\n\nLet your partner log in to Snap!.\n\n\n\n\nSave the project in the second partner’s account so that you both have a copy.\n\n\nThe partner has a copy—not a shared file. So, if one person changes the project their account, it will not change in the other person’s account; they will need to save it to their account again to have the change."
  },
  {
    "objectID": "lab-1/index.html",
    "href": "lab-1/index.html",
    "title": "Lab 1: Click Alonso",
    "section": "",
    "text": "In this lab, you’ll program an app that you can share to your teachers and anyone that you want to show what you did!\n\nAs you work through any lab this summer, please feel free to join the help queue and ask any question that you have about making the programs that we task you to do. When you ask for help, be prepared to explain your problem fully, along with anything that you’ve already tried!"
  },
  {
    "objectID": "lab-1/4-giving-feedback.html#confirming-whether-alonzo-was-clicked",
    "href": "lab-1/4-giving-feedback.html#confirming-whether-alonzo-was-clicked",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Confirming Whether Alonzo Was Clicked",
    "text": "Confirming Whether Alonzo Was Clicked\n\nFirst, the person playing your game wants to know right away whether they succeeded at clicking Alonzo before he moved out of the way.\n\n\n: Sprites and Costumes\n\nThe Alonzo character is named after Alonzo Church, a major contributor to early computer science. In this project, there are three objects related to Alonzo:\n\n\nOne is a sprite, which is like an actor on the stage who knows how to do many different things, such as walk around the stage and speak the lines of the play.\n\n\nThe other two are costumes, picture that can be “worn” by a sprite.\n\n\n\n\n\nProgram Alonzo to face the other way when clicked.   \n\n\nThe project you loaded has two Alonzo costumes—one facing right and the other facing left—so you can use the  block to make the sprite face the other way. Add the next costume block to the place in your program where the user has just clicked on Alonzo.\n\n\nTest your program. Make sure Alonzo faces the other way when he is clicked but not when he jumps without being clicked."
  },
  {
    "objectID": "lab-1/4-giving-feedback.html#keeping-score",
    "href": "lab-1/4-giving-feedback.html#keeping-score",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Keeping Score",
    "text": "Keeping Score\n\n\nThe player will also want to know how much progress they have made in the game. The command  can control Alonzo’s transparency.\n\n\n\nThe transparency of an image is how much you can see what’s behind it. For example, here is the Alonzo sprite shown with three different transparencies (which have been set using the ghost effect block). \n\n\n\n\nUse transparency to tell the user how close they are to winning: every time they click, Alonzo gets more invisible, and when he disappears completely, they win the game.\n\n\n\n\nDrag the change (ghost) effect block into the center scripting area, and experiment with different input numbers (clicking it repeatedly after each change) to see exactly what it does. At what ghost effect value does Alonzo become completely invisible? You can use the command  to make Alonzo fully opaque again.\n\n\nThen, modify your script so that every time Alonzo is clicked, he gets a little more ghostly. Think about how the input you use affects the length of the game. Try out your game."
  },
  {
    "objectID": "lab-1/4-giving-feedback.html#making-the-game-more-challenging",
    "href": "lab-1/4-giving-feedback.html#making-the-game-more-challenging",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Making the Game More Challenging",
    "text": "Making the Game More Challenging\n\nSo far, even a bad player will eventually make Alonzo disappear. The game will be much more interesting if the player is penalized for missing a click.\n\n\n\n\nFigure out where to add a change (ghost) effect by (-5) block to your script to make Alonzo get less transparent any time he moves without being clicked.\n\n\nPlay your game a few times, and adjust your code to get a level of difficulty that you like.\n\n\nYou can change the change effect input number (for either instance of the block) and/or the wait time to make the game easier or harder."
  },
  {
    "objectID": "lab-1/4-giving-feedback.html#ending-the-game",
    "href": "lab-1/4-giving-feedback.html#ending-the-game",
    "title": "Page 4: Giving the Player Feedback",
    "section": "Ending the Game",
    "text": "Ending the Game\n\n\nWhen Alonzo is completely transparent, the game should stop.\n\n\n\nAdd this code to the right place in your script to end the game."
  },
  {
    "objectID": "lab-1/5-finish-your-first-snap-app.html",
    "href": "lab-1/5-finish-your-first-snap-app.html",
    "title": "Page 5: Improving Your Game",
    "section": "",
    "text": "There’s always something more you can do to make a program better. On this page, you’ll improve your game by making Alonzo welcome the player when the green flag () is clicked.\n\n\n\n\nIf your project is open and the script is still running, click the red stop sign, . If it isn’t open already, open your L1-ClickAlonzo project.\n\n\n\n\nClicking the green flag button in the top right corner of the window () starts all scripts that begin with the when green flag clicked hat block. \n\n\n\n\n\nCreate a second script that makes Alonzo  a welcome message when the green flag is clicked. (Alonzo might say, “Welcome to ‘Click Alonzo!’ Keep clicking me if you can!”)\n\n\nMake that message disappear when the player clicks on Alonzo.\n\nThe say block with an empty text in the white input slot will make the sprite say nothing.\n\n\n\nCheck that your app does everything you want:\n\n\nWhen the green flag is clicked, Alonzo should welcome the player.\n\n\nWhen Alonzo is clicked, the message should disappear, and Alonzo should move to a random spot on the stage, face the other way, and get more transparent.\n\n\nAlonzo should start to reappear (but shouldn’t face the other way) any time he moves without being clicked."
  },
  {
    "objectID": "lab-1/1-creating-a-snap-account.html",
    "href": "lab-1/1-creating-a-snap-account.html",
    "title": "Page 1: Getting Started with Snap!",
    "section": "",
    "text": "On this page, you’ll learn how to create your own account and how to log in and out."
  },
  {
    "objectID": "lab-1/1-creating-a-snap-account.html#creating-an-account",
    "href": "lab-1/1-creating-a-snap-account.html#creating-an-account",
    "title": "Page 1: Getting Started with Snap!",
    "section": "Creating an Account",
    "text": "Creating an Account\n\n\n\n\nIf you haven’t already opened snap, open it now: http://snap.berkeley.edu/run\n\n\nIn the Snap! window, click the Cloud menu, , select “Signup…”, and follow the instructions.  \n\n\n\nYou’ll be asked to click a link in your email to verify your account, but you don’t have to do that right now.\n\n\nYou may change your password at any time using the Cloud menu, ."
  },
  {
    "objectID": "lab-1/1-creating-a-snap-account.html#logging-in-to-and-out-of-your-snap-account",
    "href": "lab-1/1-creating-a-snap-account.html#logging-in-to-and-out-of-your-snap-account",
    "title": "Page 1: Getting Started with Snap!",
    "section": "Logging In to and Out of Your Snap! Account",
    "text": "Logging In to and Out of Your Snap! Account\n\n\nYou should be logged in whenever you are in Snap!. Here’s how to check if you are logged in:\n\n\n\nClick the Cloud menu in the tool-bar.\n\n\nIf it says “Logout” and your user name, then you are already logged in.\n\n\nIf it says someone else’s user name, then log them out and log in with your own user name.\n\n\nOtherwise, choose “Login…” and enter your user name and password.\n\n\n\n\nClick NEXT (on the top right of this web page) to continue.\n\nRemember to log out of Snap! (using the Cloud menu) when you are done."
  },
  {
    "objectID": "lab-1/2-start-your-first-snap-app.html#making-a-character-move",
    "href": "lab-1/2-start-your-first-snap-app.html#making-a-character-move",
    "title": "Page 2: Programming a Game",
    "section": "Making a Character Move",
    "text": "Making a Character Move\n\n\n\nMake sure you are logged in to Snap! so you can save your work.\n\n\n\n\nSaving a Snap! Project\n\nChoose “Save” from the Snap! File menu, .\n\n\n\n\n\n\n This is Alonzo, the mascot of our programming language, Snap!. You should see him on the stage, the white area in the top right corner of the Snap! window.\n\n\n\n\n\nYou’re going to program a game in which the goal is to click on Alonzo as he’s moving around.\n\n\n\n\n\nAs a first step, make Alonzo jump someplace else on the stage when he’s clicked. Drag these two blocks into the scripting area (the center area of the window):\n\n\n\nYou can find blocks in palettes with their matching color. Drag one block underneath another to snap them together.\n\n\n \n\nCRD-2.B.1\n\n\nThis is a computer program, also known as software. It’s a very short one, but it’ll get more interesting soon.\n\n\n\nTest your program: Click on the Alonzo sprite on the stage several times. If your program works, Alonzo should move to a random position on the stage each time you click him.\n\n\nIf your program doesn’t work, look back at the picture of the code and make sure yours matches exactly.\n\n\nMake sure the two blocks are attached to each other by moving the when I am clicked block and checking that the go to block moves with it.\n\n\nMake sure that the first block says when I am (clicked) and not something else, and make sure that the second block says go to (random position) and not something else.\n\n\n\n\n\n\n\n\nOrange boxes contain the ideas you should still remember three years from now.\n\n  \n\nCRD-2.C.2, CRD-2.C.3, CRD-2.C.5\n\n\nBlocks that look like this can be used to detect an event such as clicking on the sprite, pressing a key, or clicking the green flag button (). They tell the script to start when that event occurs. Because these blocks can sit only on top of a script (as a way to start the script), Snap! programmers call them “hat blocks.” Using events to control a program is called event-driven programming.\n\n\nNot every script needs a hat block; you can also run a script by clicking on it.\n\n\n\n\n\nFind when I am (clicked) and when (space) key pressed in the yellow Control palette, and see what other choices are in their drop-down menus.\n\n\n\n\nIt’s a good idea to save your project every so often.\n\n\n\n\nChoose “Save” from the Snap! File menu, ."
  },
  {
    "objectID": "lab-1/2-start-your-first-snap-app.html#making-the-game-challenging",
    "href": "lab-1/2-start-your-first-snap-app.html#making-the-game-challenging",
    "title": "Page 2: Programming a Game",
    "section": "Making the Game Challenging",
    "text": "Making the Game Challenging\n\n\nThe game isn’t much fun if Alonzo just sits there waiting to be clicked. Once you’ve clicked him, he should keep jumping around on his own. To make Alonzo keep moving around, you need a block that says “do this forever.” And there is a block that does it: \n\n\n\n\n\nA bunch of blocks clicked together is called a script.\n\nAttach this to the bottom of your Alonzo script: \n\nThe sequence of blocks inside the forever block will repeat until you click the red stop sign, , or stop the script in some other way.\n\n\nClick for an animation of snapping these two blocks together.\n\n\n\n\n\n\n\nAlonzo moves too fast. Use the  block to slow him down. Try your program, and increase or reduce the wait time if you like.\n\nWhere the wait block goes in your script matters. Do you want the script to wait one time or each time Alonzo moves?"
  },
  {
    "objectID": "lab-7/6-nested-polygons.html",
    "href": "lab-7/6-nested-polygons.html",
    "title": "Page 6: Nested Polygons",
    "section": "",
    "text": "On this page, you will use for loops as a counter to draw shapes with nested polygons \n\n\n\nRemind yourself how to use  from Lab 6: Squiral.\nOpen your L7-Pinwheel project, and build a nest squares block that uses for and your polygon block to draw nested squares. Give it an input so that it will draw whatever number of squares you specify, with each square larger than the previous:  \nBuild nest polygons that accepts the number of polygons and the number of sides for the polygons.\nBuild a script that draws 12 regular polygons, each with one more side than the previous one, as shown below.   Below are two animations that use the pinwheel code with inputs. Find out how to create your own artistic animations.  \n\n\nThe following code may give you ideas about how to create animations. The warp block allows the drawing of the pinwheel all at once.\n\n\n\n\nMake sure your other work has been saved, then Experiment with the script. Could you change the sizes or colors to make it more interesting?"
  },
  {
    "objectID": "lab-7/index.html",
    "href": "lab-7/index.html",
    "title": "Lab 7: Polygons",
    "section": "",
    "text": "These are works by artists Josef Albers, Maya Hayuk, Vassily Kandinsky, Atta Kwami, Kazimir Malevich, Alma Thomas, and Theo van Doesburg. The styles are different, but all of them are based on polygons or circles.\n\n\n      \n\n\nClick for art credits.\n\n\n\nJosef Albers, “Homage to the Square,” 1965. More: Albers Foundation, smarthistory.org\n\n\nMaya Hayuk, “Chemtrails Miami,” 2013. More: mayahayuk.com, Wikipedia\n\n\nVassily Kandinsky, “Several Circles,” 1926. More: wassilykandinsky.net\n\n\nAtta Kwami, “Bobbo,” 2012. More: attakwami.com\n\n\nKazimir Malevich, “Suprematist Composition,” 1915. More: kazimir-malevich.org, Wikipedia\n\n\nAlma Thomas, “Untitled (Music Series),” 1978. Copyright Smithsonian American Art Museum. More: wikiart.org, Wikipedia\n\n\nTheo van Doesburg, “Composition VII (the three graces),” 1917. More: wikiart.org, Wikipedia\n\n\n\n\n\nIn this lab, you’ll draw polygons so you can create your own art:"
  },
  {
    "objectID": "lab-7/1-exploring-motion.html",
    "href": "lab-7/1-exploring-motion.html",
    "title": "Page 1: Exploring Motion",
    "section": "",
    "text": "On this page, you will explore the basics of drawing a shape in Snap! by using the repeat block to loop through the same code multiple times.\n\n\n\n: Algorithm\n\nAn algorithm is a sequence of steps that are usually performed by a computer. The algorithm doesn’t have to be written in any particular programming language or even in a programming language at all; you can write your algorithm in English or any other human language. Once you know the steps that the computer will take, you can code your algorithm in the programming language of your choice.\n\n\n\n\n\n  Describe what this algorithm will make the sprite do: \n\n\nLog in to Snap! and build that script to test your hypothesis.\n\n\nClick it, and watch what the sprite does.\n\n\nClick , and then click your script to run it again.\n\n\n\n\nYou can click pen down (or any block) in the palette on the left or in the scripting area to run it. If you click a block inside a script, the whole script runs.\n\n\n Analyze why that script does what it does.\n\n\nCompare your work with another pair. If your script behaves differently from theirs, check both.\n\n\nUsing Visible Stepping\n\nSnap! has a tool called Visible Stepping that allows you to control how quickly Snap! steps through the blocks of your code.\n\n\n\nClick the Visible Stepping button (), and adjust the slider to control the stepping speed. When you run your code, the sprite will slowly execute each step of the code and highlight it in cyan.\n\nClick for a video of adjusting the Visible Stepping slider.\n\n\n\n\n\n\nYou can slow the stepping to do only one step at a time and wait until you tell Snap! to go on to the next one. Move the slider all the way to the left, and then you can press the Run/Pause button () to see what happens at each step of your code.\n\nClick for a video of single-stepping through code.\n\n\n\n\n\n\n\nVisible stepping can be useful as you read someone else’s code because you can watch it at human speed instead of computer speed. It’s also useful in debugging (fixing problems with) your own code when it’s doing something wrong.\n\n\n\n Switch who is sitting at the keyboard. Then experiment:\n\n\nYou can put your sprite back in the center of the screen with  and you can reset the direction it’s pointing with .\n\n\nChange 100 to 50 in the move block of your script by clicking on the 100 and typing 50. Then click the script again to run it with the new input value.\n\n\nClick the  block in the green Pen palette.\n\n\nChange the number in the turn block and run the script again… and again… and again.\n\n\nClear the stage again, and change the number in the  block.\n\n\nExperiment with the input numbers in the turn and repeat blocks. Try to draw a triangle with equal sides.\n\n\nUse  to set the pen size to something like 4 or 10 or 50. Then click your repeat, move, turn script again.\n\n\nTo change the pen size you must click the set pen size block to run it after you’ve entered the number you want.\n\n\nUse  to experiment with the pen color.\n\n\n\n\n\n\n\n\nExperiment: What leaves a trace?\n\n\nMove the sprite by dragging it to a new location. Does it leave a trace as you move it?\n\n\nMove the sprite by clicking on . Does it leave a trace as it moves?\n\n\nDoes clicking  leave a trace?\n\n\n\n\n\nMake sure your other work has been saved, then  Experiment with the scripts and look inside them to figure out how they work. Could you change the sizes or colors to make it more interesting?\n\n\n\n\n   \n\n\n\n\nSolid rectangles. Make and run this script:  The light blue set block is in the Sensing palette, where it looks like . Just click once in the hexagonal slot to get True (the green check box). If you’re not sure what difference the “flat line ends” makes, try clicking the hexagonal slot again to run the script with that option False. And of course you can change all the numbers, or have your program pick random numbers.\n\n\nColor families. Click the file menu icon and select “Libraries…” Then, find the “Colors and Crayons” library and click “Import.”   In the Pen menu you’ll find the set pen to crayon block. Computers can display billions of colors, but unless you have to match the paint on your wall very precisely, finding your way through all those colors may be more trouble than it’s worth. The crayon library, just like a box of crayons, gives you a small set of vibrant colors, arranged in families. So if you want a lot of browns in your picture, you could pick a random number between 30 and 39. \n\n\n\nAt the right is a painting by Kazimir Malevich. Its elements are rectangles, either horizontal or at a 45-degree angle, plus or minus a few degrees. You can position rectangles randomly. Your picture doesn’t have to look like his—you’re the artist!\n\n\nAlphie: If we just put rectangles in randomly, the tiny square dots will often be covered by larger ones. Maybe we should do big ones first and smaller ones later.\n\n\nGamal: I know ours don’t have to look like the original, but I really like that huge black horizontal rectangle. It gives the painting a structure, with a top part and a bottom part, even though it doesn’t go all the way across. I want to make sure to have one like that.\n\n\nBetsy: I bet we can use the idea of drawing really thick lines without using flat line ends and get interesting results:\n\n\n\n\n\n\nAt the right is a painting by Theo van Doesburg. It has some things in common with the Malevich picture, mainly the use of rectangles as the design elements. But there are no 45-degree rectangles; instead, the constraint is that rectangles may not overlap, so if you want to place a random rectangle in the picture, each end may have to be shortened to avoid collisions. You can use  to find out if the point behind the sprite’s rotation center is black."
  },
  {
    "objectID": "lab-7/2-exploring-snap-drawing-motion.html",
    "href": "lab-7/2-exploring-snap-drawing-motion.html",
    "title": "Page 2: Angles and Turning",
    "section": "",
    "text": "On this page, you will learn about sprite turning angles, which are needed for drawing polygons. For starters, you’ll draw various asterisks, like these:    \n\n\nWhen you were trying to draw an equilateral triangle on the previous page, you might have tried code like this:  and seen a result like this:  It’s common to try this if you’ve learned that the angles in an equilateral triangle are all 60 degrees. However, the angle that the sprite needs to turn to make a triangle is actually 120 degrees, and it’s important to understand why that is and how to find the correct angle for other polygons (five-sided, eleven-sided, etc.).\n\n\n\n\n\n\n\nPerform the four experiments (A-D), and read the comments attached to each one. As you do, talk with your partner about what you see and why it happens.\n\n\nThen, experiment with the last script (shown right): \n\n\nExperiment with a quarter turn (turn 90 degrees instead of 180). Adjust the number of repetitions (the number you give to repeat) until you get the sprite to finish facing the same way it started. \n\n\nExperiment with a tenth of a turn (turn 36 degrees). What input must you give to repeat to get the sprite to finish facing the same way it started?\n\n\nWithout trying it on the computer, figure out what turning angle to use for a five-spoke asterisk. Make sure your partner agrees.\n\n\nThen, try the experiment.\n\n\n\n\n Describe what you’ve learned about turning angles.\n\n\nAt the top of the page you were thinking about triangles. As a step in that direction, make a three-spoke asterisk.\n\nClick for a hint.\n\n\n\n\n\n\n\n\nA 360° turn is a full turn. Half of that (180°) is a half turn. A fourth of 360°  is a quarter turn. You don’t have to do the division yourself. Snap! can compute it for you. You can use  or  to get a seventh of a turn or a third of a turn.\n\n\n\nAt the beginning of this page, you knew that to make a triangle you need 120° turns, but maybe you weren’t sure why. Now you know why a three-spoke asterisk takes 120° turns, but what does that have to do with triangles?\n\n\n\n\nTry different negative input values for the move -100 steps block (first -90, then -50, then -10), and do some of the turning experiments (above) with each value. Does this change the values needed for the repeat or turn blocks? These pictures are called “pinwheels.”\n\n\nNow, run script (A) in the file and experiment:\n\n\nChange the inputs in script A to draw an asterisk with:\n\n\n5 branches\n\n\n8 branches\n\n\n3 branches\n\n\n\n\nMake a copy of the three-branch script you built (right-click or control-click the script, and choose “duplicate”).\n\n\nIn the copy, remove the move -100 steps block.\n\n\nWhat does this new script do?\n\n\n\n\nMake another copy of the three-branch script you built, and then:\n\n\nChange it to a four-branch script.\n\n\nRemove the move -100 steps block again.\n\n\nWhat does this new script do?\n\n\n\n\n\n\n\n\nDebugging with say for\n\nYou can use  to get information about the state of your program while it’s running.\n\n\nThis animation shows how to use say for to determine the bug in code that is supposed to draw a rectangle. Notice how say for makes the program pause and gives you information to help you identify the source of error.\n\n\n\n\n\n\n\n\nScript B in the same file shows how you can make a 60-branch script behave like the second hand of a clock. Try it out.\n\n\n\nBe sure you are able to explain how this script does what it does.\n\n\nWhy is the change in pen color and size useful here? \n\n\n\n\n\n\n                     \n\n\n\n\n\nAt the right is a painting by Alma Thomas. See what it inspires you to do. It’s your art. Take liberties.\n\n\nGamal: It looks like a map. Houses on the left, the town center on the right, with City Hall and the fire station and the mall.\n\n\nBetsy: Maybe. To me the part on the left looks a little like a fingerprint, and the part on the right is clearly a person facing right, with her nose up against the right edge, halfway down.\n\n\nAlphie: Never mind what it looks like. How are we going to make something that looks like it?\n\n\nBetsy: Parts of it look like curved, thick dotted lines. We could do something like this:        But I’m not sure how to get a bunch of those to fit together.\n\n\nAlphie: Randomness is your friend. Let’s make a bunch of your lines, all different, and just point them in different directions.       \n\n\nBetsy: Wow! That’s very cool.\n\n\nAlphie: Nothing like what it’s supposed to look like, though.\n\n\nBetsy: What do you mean, “supposed”? Go read the boldface line up above this blue box again.\n\n\nAlphie: Yeah, I know, but “take liberties” doesn’t mean “take whatever happens on your first try.” I have another idea. We’ve been thinking of Thomas’s picture as brown boxes on a white background, but it’s actually more brown than white. What if we start with a brown background and draw white lines on it?\n\n\nGamal: What about that town center on the right?\n\n\nBetsy: It’s not a map. But to make you happy, when drawing white lines over toward the right, we can make them thicker, so the right part will have more white space than the left part.\n\n\nAlphie: Uh oh… If you look carefully at the original picture, the brown boxes aren’t all the same shade of brown.\n\n\nBetsy: Alphie, you worry too much. But to make you happy, once we have the space divided into brown regions, we can  some of them in different colors.\n\n\nGamal: Hey! Gang! There’s a “World Map” library! And it makes “watercolor” maps like this:  And then I went over every dot on the stage using  and  to decide whether to make each dot white or brown: \n\n\n\n\nWhat did Alma Thomas intend by her painting: a map, a fingerprint, or something else? Do some research."
  },
  {
    "objectID": "lab-7/4-modify-your-pinwheel.html#adding-multiple-inputs",
    "href": "lab-7/4-modify-your-pinwheel.html#adding-multiple-inputs",
    "title": "Page 4: Modify Your Pinwheel",
    "section": "Adding Multiple Inputs",
    "text": "Adding Multiple Inputs\n\nRecall how you first generalized your original pinwheel script: you added an input called number of branches that controlled the turning angle of the sprite. By adding more inputs, you can generalize other aspects of your program.\n\n\n\n\nIf it isn’t already open, open your U1L3-Pinwheel project.\n\n\n\nAAP-3.A part b\n\nExperiment with the input for the second move block inside your pinwheel block as shown below.\n\n\n First predict. What do you think will happen?\n\n\n\nThen try several inputs between -100 and 0.\n\n\n What happened? How does it compare to what you predicted? How does this input value impact the sprite’s behavior? How does it impact the resulting image on the stage? What number input number gives an asterisk? What input number gives a polygon? \n\n\n\n\n\nReview how to add an input at Lab 7 Page 3: Blocks with Input, if needed.\n\nAdd a second input to control the amount of “backing up” that the sprite does before each turn through the full 360°.\n\n\nEdit your pinwheel block, then click the “+” sign at the end to add an input label (choose “Title text”). Type backup: as shown below, and click “OK”.\n\n\nWatch a video of steps a and b.\n\n\n\n\n\nThen click the “+” sign at the end again to add an input (choose “Input name”), and call it backup.\n\n\nDrag off the new backup input, place it where it belongs in the pinwheel code, and press “OK” or “Apply.”\n\n\nCheck that changing the backup input value when running the pinwheel block gives the correct result. Debug any problems.\n\n\n\n\nUse an Operator block.\n\n\nChange the pinwheel script so that it will accept a positive value (between 0 and 100) for backup, and test it with a variety of inputs.\n\nClick for example inputs to test.\n\n     \n\n\n\n\n\n\n\n\n\nAdd another input called size to control the input to the first move block. \n\n\nTry out a variety of inputs to your pinwheel program.\n\nClick for example inputs to test.\n\n     \n\n\n\n\n Discuss what input values will give you a polygon or an asterisk.   \n\n\n\n\nDebugging Tip: Organizing Your Code\n\nOne way to avoid having bugs in your program in the first place is to keep your code organized by deleting any unused scripts. You can use the clean up option by right-clicking (or control-clicking on a Mac) in the scripting area to organize your blocks. You can remove a block or script either by dragging it out of the scripting area and back to the palettes on the left or by choosing the “delete” option from the drop-down menu. Click here for a video. (Note that this is different from the “delete block definition” option which will permanently delete a custom block and all its instances from your entire project.)\n\n\n\n\n\n\n\n\nTidy up the code in your project, if necessary.\n\n\n\n\n\n\nFind inputs to pinwheel that make the result look like a circle.\n\n\n\n\n   \n\n\n\n\n\nOn the right is a painting by Vassily Kandinsky. The four pictures above were inspired by it, but the sizes and placement of the circles in the original were carefully chosen, whereas the ones above are random. Also, Kandinsky’s solid circles aren’t quite uniform in color. For example, the green circle near the top right of the picture has a light green outer border, a somewhat darker green inside, a blue-green inner border, and black inside that.\n\nWhen two solid circles overlap, you can see both colors, or rather, a color in between the two. To achieve that effect in Snap!, before drawing the second circle, use the  block. A transparency of 0 means you see only the new color; a transparency of 100 means you see only the old color. In-between values determine which color is stronger in the overlapping area.\n\nMost of Kandinsky’s circles are solid, but a few aren’t. most notably the large white “halo” near the middle of the painting. His hollow circles don’t have a constant width; if you want yours to look like his, change the pen size a little as you’re drawing. But of course you don’t have to make your art look exactly like his, nor exactly like the examples above. Use them for inspiration, but you’re the artist.\n\n\nMake a picture that looks more like a real pinwheel:\n Copyright 2010 Victoria Hudgins. Used by permission.\n\n(Save your project first; you’ll need the pinwheel block you already have later.)\n\n\nIt doesn’t have to look exactly like the photo. But each arm of a pinwheel is essentially two triangles. You may find the  block helpful."
  },
  {
    "objectID": "lab-7/3-blocks-with-inputs.html",
    "href": "lab-7/3-blocks-with-inputs.html",
    "title": "Page 3: Blocks with Inputs",
    "section": "",
    "text": "On the previous page you used blocks asterisk and pinwheel that we wrote for you, each with an input for the number of spokes. Now you’re going to learn how to create your own blocks with inputs.\nThe scripts are essentially all the same; only some of the input values change. Instead of having many separate scripts, you can make one general block  that will draw all such designs. The block has to work for a variety of inputs.\nOriginally, you made five copies of the pinwheel script to create five slightly different pinwheels. Now, you’ve made a single procedure that includes the shared features of these five scripts and uses a parameter to handle the differences."
  },
  {
    "objectID": "lab-7/3-blocks-with-inputs.html#more-about-program-documentation",
    "href": "lab-7/3-blocks-with-inputs.html#more-about-program-documentation",
    "title": "Page 3: Blocks with Inputs",
    "section": "More About Program Documentation",
    "text": "More About Program Documentation\n\nCRD-2.G.1, CRD-2.G.5\n\n\nCommenting is only one form of documentation. It’s not the best form, because attaching a comment to a particular place in the program documents only that one procedure or code segment, and doesn’t explain how different sections of the program interact. But commenting is an easy way to document small details.\n\n\nDocumentation can be external (written for users of the program) or internal (written for yourself or other developers of the program). Both kinds are important, if it’s a program people other than the author are going to use. Usually they should be separate documents—another reason why comments aren’t the best form of documentation.\n\n\nCRD-2.G.4\n\n\nIf you’re writing a program by yourself, internal documentation may seem silly. “I know how my own program works.” But if the program will still be in use a year later, it will probably need maintenance, and you may well have forgotten the details of its implementation. In a programming class like this one, most of the programs you write are very small, and you can understand them at a glance. But real programs are generally much bigger than lab exercises designed to take less than an hour of work.\n\n\nCRD-2.G.3\n\n\nIt’s best if the first attempt at documentation is made even before starting to code. The documentation will specify the desired program behavior (external) and the intended program structure (internal). These documents can be used in testing the code to ensure that it behaves as planned.\n\n\n\n\nAAP-3.A part a\n\n\nCreate a script that draws two pinwheels on the stage, with different numbers of spokes.\n\n\n\n\nAAP-3.A.4\n\n\nWhen you embed a command procedure (such as pinwheel) within a script, the procedure is completed before continuing the script that called it.\n\n\n\n\nThese images were created with the pinwheel block and set pen color. Create your own art.   \n\n\nMake an animation."
  },
  {
    "objectID": "lab-7/5-remix-your-pinwheel.html",
    "href": "lab-7/5-remix-your-pinwheel.html",
    "title": "Page 5: Using Pinwheel to Make Polygon",
    "section": "",
    "text": "On this page, you will use your existing pinwheel block to make asterisk and polygon blocks. \n\n\nYou can use your general-purpose pinwheel procedure to create other, simpler special-purpose procedures that each do a particular job.\n\n\n\n\n\nIf it isn’t open already, open your U1L3-Pinwheel project from the previous page.\n\n\nUse your pinwheel block to create a more specialized asterisk block.\n\n\nFirst, make a new block called asterisk with two inputs: one for the number of branches and one for the length of each branch. You may wish to review how to make a new block at Lab 2 Page 6: Making Your Own Block.\n\n\n\nNow fill in the three inputs to pinwheel so that it correctly draws an asterisk.\n\n\n\n\n\nSimilarly, write a polygon block that uses pinwheel with appropriate inputs to draw a polygon with a given number of sides and side length.\n\n\n\nDebugging with \n\nYou can use pause all to place breaks in your code so you can see what’s happening along the way. When you run code with pause all in it, you can click the yellow Run/Pause button next to the Green Flag (/) to move through the code up until a pause all block is reached again. The pause all block will pause every script that is running until the yellow Run/Pause button is clicked.\n\n\n\n\n\n\nOn page Lab 2 Page 4: Making Programs Talk, you learned about procedural abstraction: giving a code segment a name (making it a block). That way you can call it more than once instead of copying and pasting.\n\n\n\nAAP-3.B.4\n\n\nHere is another kind of abstraction: noticing that asterisk and polygon are both kinds of pinwheels, and writing one, more general, pinwheel block that uses an input so that the block can be used to make asterisks, polygons, or other interesting designs.\n\n\nAAP-3.B.5\n\n\nThis is an example of abstraction by generalization: looking at chunks of code that are almost the same and writing a single block by using an input to distinguish among the different cases.\n\n\n\n\n\nIf you look inside of pinwheel and see how you’re using it in polygon, you’ll see that there are steps that you don’t really need for the case of a polygon. Write another version of polygon built directly out of primitive blocks (move, turn and so on). How simple can you make it?\n\n\n\nAAP-3.B.7\n\nAs long as your polygon block draws the right picture, it doesn’t matter to the rest of the project what’s inside it.\n\n\n\n\n\n\n\nUse your pinwheel block code one last time to create a circle block that accepts one input for the size.\n\n\nUse the random block together with set pen color and set pen size to draw a variety of shapes. \n\n\n\n\n\n\nChallenge: Create a script that draws a blue square of size 100 and then draws a red circle that fits perfectly inside it. \n\n\n\n\n                     \n\n\n\nThis Take it Further refers to what you did in Lab 6: Squiral. Take a look back at what you did for that lab and work with that code that you made for that lab to complete this.\n\n\n\nFind a way to use for to nest squares this way. Build your block with two inputs that let you specify how many squares the design will contain and how much bigger each square will be than the previous one.  \n\n\n\n\nOn the right is a painting by Josef Albers. He was interested in experimenting with variations of color within a “family” of similar colors. Snap! will let you make similar experiments.\n\n\n\nWhat is the favorite color of the author of this activity?\n\n\nIf you didn’t do the Take It Further activity based on this Kazimir Malevich picture  then read it now to learn about Snap! features for solid rectangles and color families.\n\n\nIf you haven’t already, do If There Is Time #10, which shows a simple version of this project idea.\n\n\nOkay, now dig in.\n\nRandomness: The four examples above are different from the actual Albers picture in that they include occasional colors that aren’t from the same family. This can make the pictures more interesting to someone who doesn’t share Albers’s interest in subtle differences in color. (Albers himself, in fact, had more color variation in other pictures of this type.) Too much randomness, though, can make the picture less interesting. Compare the last two examples above; the left one of those two is clearly based on the orange family, with rainbow-neighbors red and yellow, but the right one has violets, greens, oranges, a yellow—too much chaos, maybe. Look back at the Gossip project if you don’t remember how to choose something special once out of six times, or once out of 14 times. Other random choices you can make are the number of squares, how much to shrink the size from one square to the next, and how much to move the corner of the next square horizontally and vertically (the picture is more interesting if those two numbers are different, so the smallest square isn’t exactly in the center).\n\n\n\n   This block is like the squiral, but instead of changing the input to move, it changes the input to turn: \n\n\nTry sketching what it will draw with an angle of 2.\n\n\nThen build it, and try each of these tests:\n\nYou can stop each test with the stop button  when you’re sure nothing new will happen, but don’t decide that too quickly!\n\n\n\n\n\nWhat’s going on? Can you work out a theory to predict anything about the shape it draws for a particular angle input? (Don’t click unless you need a big hint.)\n\nHint: Think about divisibility."
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "eCard Project",
    "section": "",
    "text": "In this project, you will apply your current knowledge of computer science towards creating an eCard of your choice following the guidelines listed on this page.\nOn the last day of this week, we will have a gallery walk to show everyone the progress that you’ve made!"
  },
  {
    "objectID": "project/index.html#ecard-guidelines",
    "href": "project/index.html#ecard-guidelines",
    "title": "eCard Project",
    "section": "eCard Guidelines",
    "text": "eCard Guidelines\nCreate an eCard (see what an eCard is) that meets all of the following specifications:\n\nUses  or has a button in the card to start the eCard.\nHas a message for the viewer (such as “Happy New Year,” “Happy Birthday,” “Get Well Soon,” etc.)\nHas a theme (such as holiday, sports, TV show, a photo, original art, etc.)\nHas stage and sprite costumes\nMakes use of as many of these 5 big ideas as possible:\n\nAlgorithms\nVariables\nConditionals\nIteration\nAbstraction\n\nLets the user interact (e.g., by clicking a sprite, pressing a key, or moving the mouse)\nDon’t forget, you can use the following to make your eCard better!\n\nSounds or music (using the play block and/or the “Sounds” tab)\nThe random block\n\n\n\n\n\n\n\n\nImportant\n\n\n\nYou will submit your Snap! project using this Google Form"
  },
  {
    "objectID": "project/index.html#examples",
    "href": "project/index.html#examples",
    "title": "eCard Project",
    "section": "Examples",
    "text": "Examples"
  },
  {
    "objectID": "lab-6/index.html",
    "href": "lab-6/index.html",
    "title": "Lab 6: Squiral",
    "section": "",
    "text": "On this lab, you will use for loops not only to repeat, but also to count the repetitions and then use that counter to draw shapes with repeated patterns: \n\n\nYou’ve seen these ways to repeat a set of commands:\n\n\nThe forever block generates an infinite loop that goes on forever. An infinite loop can sometimes be the result of a bug, but in some interactive programs, you want the program to keep running until stopped by the user.\n\n\n repeats the same commands forever. (You used it to make Alonzo keep moving in Lab 1 Page 2: Programming a Game.)\n\n\n repeats them a specific number of times.\n\n\n\n\n\nSometimes the script inside a loop needs to know which time through the loop it’s in (first, second, etc.). You can use  to keep track, and you can use its counter (the default name is ) in the repeated script. For example, the for block lets you simplify long scripts like:  \n      to\n\n\n\nEach time the for block runs the script inside, it changes the value of the counter by 1, beginning with the first input number and ending after the second.\n\n\nThe for block’s default counter name,  stands for “index.” You can change this name by clicking it. To use the counter, drag it into the script.\n\n\n\n\nBuild this script that makes the sprite say the numbers 1 through 10.  \n\n\nThen modify it so that the sprite says 0, 2, 4, 6, 8, … up through 30.\n\n\nDiscuss your solutions with another pair.\n\n\n\n\nExperiment with spirals.\n\n\nBuild this script and try it out:\n\nThis design got the nickname “squiral” because it’s a square spiral.\n\n\n\n\n Make sure you can explain why the squiral spirals outward.\n\n\nTry switching the order of the 100 and the 1 in the for block in the squiral script. What is the result?\n\n\nTry changing the turning angle in the squiral script to other numbers such as 92, 126, etc.\n\n\nChange the inputs to turn and move to get as close as you can get to a smooth spiral: \n\n\n\n\n\n“L6-Squiral”\n\n\n\n\n\n\n\nPredict what this script will do before you try it:\n\n\nBuild a script that counts down by 10 from 100 to 0 (that is, 100, 90, 80, etc.)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nWelcome to your computer science portion of the 2023 Maker Camp, in this session, you’ll learn basic computer science skills culminating in a project.\nHere’s the schedule for your computer science experience during this Maker Camp!\n\n\n\n\n\n\nDay of Week\n\n\nDay\n\n\nBig Idea\n\n\nLab\n\n\nExtension\n\n\n\n\n\n\nMonday\n\n\n6/12\n\n\nIntroductions\n\n\nLab 1: Click Alonzo\n\n\n\n\n\n\nTuesday\n\n\n6/13\n\n\nVariables\n\n\nLab 2: Variables and Gossip\n\n\n\n\n\n\nWednesday\n\n\n6/14\n\n\nConditionals / Debugging\n\n\nLab 3: Number Guessing Game\n\n\nLab 4: Pong\n\n\n\n\nThursday\n\n\n6/15\n\n\nIteration\n\n\nLab 5: Song Player, pp. 1 - 5Submit your Mystery Song Snap link here\n\n\nLab 6: Squiral\n\n\n\n\nFriday\n\n\n6/16\n\n\nField Trip to BAMPFA\n\n\n\n\nMonday\n\n\n6/19\n\n\nJuneteenth Holiday\n\n\n\n\nTuesday\n\n\n6/20\n\n\nAbstraction\n\n\nLab 7: Polygons\n\n\n\n\n\n\nWednesday\n\n\n6/21\n\n\n\n\neCard Project\n\n\n\n\n\n\nThursday\n\n\n6/22\n\n\n\n\nBHS Campus toureCard Project\n\n\n\n\n\n\nFriday\n\n\n6/23\n\n\n\n\nGallery Walk"
  },
  {
    "objectID": "lab-4/index.html",
    "href": "lab-4/index.html",
    "title": "Lab 4: The Game of Pong",
    "section": "",
    "text": "In this project, you are going to model a computer game called Pong, first developed by Atari in 1972. You will write the code for the paddle which will allow it to move up and down based on user keyboard input and also write the code for the ball which will allow it to bounce every time it hits a wall or the paddle. \n\n\n\n\n\n Discuss with your partner the mathematics behind the ball bouncing off the paddle. How does the initial direction of the ball as it hits the paddle relate to the final direction of the ball as it bounces off the paddle? The following diagram may help.  \n\n\nCreate the paddle and the ball sprites and give them their costumes (filled rectangle and circle).\n\n\n\nDo the above on your own but if you get stuck, look at these hints for the Game of Pong on how to proceed.\n\n\n\n\n Examine the starter file where a rectangular paddle sprite and a circular ball sprite have been created for you.\n\n\nWrite the code for the paddle first. The paddle should be allowed to move only up and down near the right edge of the screen. When the user presses the up/down arrow keys on the keyboard, the paddle should move up or down a certain amount but it should never wander off the edges of the screen. You may find the following blocks useful. \n\n\nThe code for the ball is a bit trickier due to the paddle bounce.\nInitialize the ball to appear in the middle of the screen and give it a random direction. Then check if the ball is at the edge of the screen or is touching the paddle. In each case the ball needs to bounce. Snap! already provides you with a block for bouncing off the edges of the screen.  You can write the code for the ball bouncing off the paddle by realizing that the ball bounces from the paddle with the negative of the direction at which it hits the paddle. Remember that in Snap! positive angles are measured clockwise from the 0°, up direction, and negative angles are measured counterclockwise from the 0°, up direction.   Now write the code for the ball. You may find the following blocks useful. \n\n\n\n\n\nWrite the code to have the paddle move up and down when the user presses the up arrow and down arrow keys. Don’t let the paddle move beyond the edges of the stage.\n\n\nWrite the code to start the ball moving when green flag is clicked and to bounce off the stage edges and the paddle. Note that there is a built in block to bounce off the edges.\n\n\n \n\n\n\n\nAdd scoring to your game. Every time the paddles bounces off the ball, the player should earn a point and every time the ball hits the right wall, the player should lose a point. You can create a variable to keep track of the score. \n\n\nCreate a second paddle to allow the game to become multiplayer game. Adjust your code to accommodate keyboard input from two users. \n\n\nCreate a second paddle (or use the one from part B if you did that) and let this paddle be driven automatically by the computer for a “human versus computer” version of the game. Hint: You can automate the second paddle by using the following block from the Sensing menu:"
  },
  {
    "objectID": "lab-5/04-mystery-song-game.html",
    "href": "lab-5/04-mystery-song-game.html",
    "title": "Page 4: Mystery Song Game",
    "section": "",
    "text": "In this activity, you will use your mystery song block to create a game.\n\n\nThere are command blocks that are essential to what we’ll be doing here:\n\n\n\n\n\n, which uses  to report the user’s response.\n\n\n\n\n\n\n\nIf your project isn’t open already, log in to Snap!, and open your “Song Player” project.\n\n\n\n\nI cant find the ask block :( I think it has to be in the song player project blocks microworld. -pf 3/3/22\n\n\nThis needs to be fixed in all XML files, but for now, I fixed the starter file and added this takeNote box to help anyone who has already saved the problem project. –MF, 3/6/22  I now realize it’s missing the “say” block(s). I also think it’d be nice to have the “When flag clicked” block so a student can share a code-less version of the project (otherwise you can see the answer in the code on the left). -pf 3/6/22\n\n\nCreate a script that plays your mystery song, asks the user what song they think it is, and then tells them whether they are right or wrong.\n\nIs your project missing the ,  and  blocks?\n\n\n\nThere was a mistake! If these blocks are not in your project, go back to the first activity, press and hold the shift key while you reload the page, open the project in exercise #2, choose “Save As…” from the Snap! File menu, and save with a new name (so you don’t lose your prior work).\n\n\n\n\n\nYou can use ask and wait to ask the user a question (and store their response), and you can use  to tell the user something that isn’t a question.\n\n\nClick for another hint.\n\n\n\nThe script for your game needs to do three things:\n\n\nPlay your mystery song\n\n\nAsk the user to guess the song\n\n\nTell the player whether the guess is correct\n\n\n\n\nClick for a third hint.\n\n\n\nUse the if else command block to test whether the guess is correct with a predicate like . If the guess is correct, then use say to tell the user they are correct; if it’s not correct, then use say to tell them that.\n\n\nClick for a fourth hint.\n\n\n\nTry making code that’s something like this: \n\n\n\n\n\n\n\n\n\n\n\n\n\nCut for now. I believe some of this was here at Dan’s request, so I’m not cutting without more attention. –MF, 3/6/22\n\n\n\n\nI’m not sure what you expect them to do here. If the idea is that they nest another IF ELSE in the else clause of the first one, that’s a whole new idea, and one students find hard, not appropriate for an ITIT. I’m not sure this is salvageable, but it might be with a serious rewriting. –bh 3/3/22\n\n\nI assumed it was just using an or. Maybe should explicitly suggest using the or block. You can also say “to allow the user to be correct with different variations on the song title”, which is different from having to implement a spell checker (a quite difficult task, as 61A students will attest this semester!). -pf 3/3/22\n\n\nI made this a TIF for now. (And then I cut it.) ;) –MF, 3/6/22\n\n\n\n\nUse a second if else block and predicate (hexagonal testing function) to allow the user to be correct even with a different variation of the spelling of the song. For example, you might want the game to approve either “The Alphabet Song” or “Alphabet.”\n\n\nIf you created two mystery songs, you could make a new command block that randomly chooses which one to play by using random together with if else.\n\n\n\nI like this idea, but I don’t see a way to do more than two mystery songs with the blocks they know at this point (e.g., not global or script variables—globals are taught later in this lab). Am I missing anything? –MF, 2/10/22\n\n\nI don’t understand the question. How can they do even two songs? Presumably by putting the two song scripts in the slots of the IF ELSE. Well, if they can do that, they can nest two IF ELSE blocks, as in the ITIT above, and that gives them three slots for songs, etc. –bh 3/3/22\n\n\nI also don’t know how to do this without using some variable to track which song they ended up picking and asking about, since we need that to happen before the if/else that checks the answer. Ah okay well I guess you can have the if condition be a random number between 1 and length of songs, and then inside the if/else clause, it plays the song and asks them for their guess, but then I bet they’ll end up repeating all that ask-code and it’ll be gross. I feel like doing this cleanly is hard. –pf 3/3/22\n\n\n\n\n\n\nIn this activity, you used the command if else to control what the game says to the player."
  },
  {
    "objectID": "lab-5/index.html",
    "href": "lab-5/index.html",
    "title": "Lab 5: Song Player",
    "section": "",
    "text": "In this activity, you’ll teach the computer to play some simple songs and move those songs up and down the musical scale.\nTo do this, you’ll learn more how to make your code reusable for different situations and using iteration."
  },
  {
    "objectID": "lab-5/02-visualizing-loops.html",
    "href": "lab-5/02-visualizing-loops.html",
    "title": "Page 2: Visualizing Loops",
    "section": "",
    "text": "In this activity, you will experiment with loops and see how they control the order in which the commands are run."
  },
  {
    "objectID": "lab-5/02-visualizing-loops.html#using-visible-stepping",
    "href": "lab-5/02-visualizing-loops.html#using-visible-stepping",
    "title": "Page 2: Visualizing Loops",
    "section": "Using Visible Stepping",
    "text": "Using Visible Stepping\n\nSnap! has a tool called Visible Stepping that allows you to watch Snap! process the blocks of your code in order.\n\n\n\n\n Open this Für Elise Example Song, click the Visible Stepping button (), click the script to play the song, and watch how Visible Stepping shows how the program moves through the nested repeat blocks.\n\n\nIt feels like Snap speeds up the playback in each subsequent repeat, maybe due to having the audio cached? I felt like it was getting faster and faster. Not sure if thats in my head or not! Also, another Snap music bug- it seems like the final note sometimes persists for way longer, perhaps related to me being in a separate tab. -PF 3/3/22\n\n\nYes, that’s by design. ;) There is a change tempo block inside the repeat. I was hoping that students would discuss this script and realize what is happening. I do generally experience weird sound stuff, but not a long last note; I get shortened first notes! I believe Michael thinks that has to do with the way sounds are implemented. –MF, 3/6/22\n\n\n\n\nClick for an example of visible stepping in action.\n\n\n\n\n\n\n\n Discuss what happens when the script is run. In what order does Snap! run these instructions? Why does the song get faster?\n\n\nNow, open your “Song Player” project from the previous activity page, click the Visible Stepping button, and play your song.\n\n\n\n\n\nWhat’s the point of this box? Does it say anything that isn’t obvious? That the kids don’t already know? –bh 3/3/22\n\nVisible Stepping () can be useful when reading code because you can see what block is running."
  },
  {
    "objectID": "lab-5/02-visualizing-loops.html#looping-your-song",
    "href": "lab-5/02-visualizing-loops.html#looping-your-song",
    "title": "Page 2: Visualizing Loops",
    "section": "Looping Your Song",
    "text": "Looping Your Song\n\n\n\n\nRepeating the same set of commands (such as with repeat or forever) is called looping or iteration.\n\n\n\nIf you haven’t already, try using the  block to repeat a note or a sequence of notes in a song. Play your song with Visible Stepping turned on.\n\n\nTry nesting one repeat inside another as in the “Für Elise” example above.\n\n\nTry using a  block to repeat a command (or group of commands) forever, and play your song with Visible Stepping on.\n\nThe sequence of blocks inside the forever block will repeat until you stop it. You can click the red stop sign () to stop all scripts in your project from running, or you can click an individual script to stop it.\n\n\n\n\n\n\n\n\nIn this activity, you used iteration to repeat a set of commands."
  },
  {
    "objectID": "lab-5/05-beat-repeat.html#using-for-each-to-play-any-list-of-pitches",
    "href": "lab-5/05-beat-repeat.html#using-for-each-to-play-any-list-of-pitches",
    "title": "Page 5: Beat Repeat",
    "section": "Using For Each to Play Any List of Pitches",
    "text": "Using For Each to Play Any List of Pitches\n\nYou can create a play song block that will apply this script to any input song. \n\n\n\n\nHow much experience have they had before this of generalizing a script by turning it into a procedure with an input? They should have done that several times by now, no? So that experience should be called out here. “Remember how you generalized your blah blah by making it a procedure with an input? You can do the same thing with this script that plays the notes in a list.” –bh 3/3/22\n\n\nTo revisit… –MF, 3/6/22\n\n\n\n\nCreate a new command block called play song that takes a list of notes as input and plays each note in the list using for each.\n\nIf we ever remake this animation, the play song block should be pink! –MF, 2/21/22\n\n\n\nClick for a hint.\n\n\n\n\n\nCreate a new block called play song that takes one input called song, which will be a list of pitches. (To add an input, you have the hover over the tiny space to the right of the block name to get the plus sign (+) to show up and then click it.)\n\n\nDuplicate your for each pitch, play ♪ code by right-clicking the for each block and selecting “duplicate,” and then attach the copied code to the play song hat block in the block editor.\n\n\nRemove the list block containing your previous song, drag the song variable into the for each block where song had been, and click, “OK.”\n\n\n\n\nClick for a video.\n\n\n\n\n\n\n\n\n\nSorry, this is another Snap bug report, but when I ran play-song, the song suddenly sounded horrifying. I even added an explicit set-instrument to 1 but it still sounds really sharp/grating. It did that for the first 3 times I played it. After writing this comment, it seems to be okay. Not sure what triggers it. I still am getting the issue where switching tabs while playing a song prolongs the current note, that seems very repeatable. -pf 3/3/22\n\n\nThis needs to go on GH not in the curriculum. https://github.com/jmoenig/Snap/issues :) –MF, 3/6/22\n\n\n\nTry out your play song block with at least two different lists of pitches, and fix any issues with the block.\n\n\nCreate help text for your play song block by attaching a comment to the hat block. The help text should describe what the block takes as input and what effect the block produces.\n\nAn example: \n\n\n\n\n\n\n\n\n\nDoes my play song block have to play every note for the same length of time?\n\n\n\nNo. On a later page, you can learn a way to store and play songs with both pitch and beat information about each note.\n\n\n\n\nIn this activity, you used for each to play each pitch in a list and created a play song block that will work with any list of pitches.\n\n\n\n\n\n\n\nImportant\n\n\n\nThe next pages are extra content with concepts that you do not have to learn, but if you’re done with these first 5 pages (pages 1 to 5), we encourage you to work on the next 4 pages of this lab. Ask any questions that you may have!\nOtherwise, the expectation is that you continue off of pages 1-5 and work making your current code more creative. Explore making other tunes/songs, putting a spin on what you already have, etc."
  },
  {
    "objectID": "lab-5/extension/06-storing-songs.html",
    "href": "lab-5/extension/06-storing-songs.html",
    "title": "Page 6: Storing Songs",
    "section": "",
    "text": "In the future, there could be an optional exercise at the end of this page to go back and modify their mystery song project to make it tally correct responses and perhaps even deduct points for wrong answers. –MF, 2/27/22\n\n\nIn this activity, you will use a variable to store a list of notes.\n\n\nWhen you need a value to be available anywhere in your project, you use a global variable.\n\n\n: Global Variable\n\nA global variable is a variable that is usable by all scripts in the program.\n\n\n\nFor example, you can use a global variable to store the pitches of a song.  \n\n\n\n\nThe “your latest project” below has to be changed to go along with whatever decision was made on the previous page about what project they should work in. -bh 3/3/22\n\n\nIf your latest project isn’t open already, log in to Snap!, and open it.\n\n\nCreate a global variable to store your song. Here’s how…\n\nMaking a Global Variable\n\n\nClick  in the Variables palette. (It’s not a block; you can’t drag it into the scripting area.)\n\n\nType the name for your variable. (Use the name of the song or something else to help you remember it. Don’t forget that the name can have spaces in it—it doesn’t have to be just one word.)\n\n\nClick “OK.”\n\n\n\n\n\nSet your global variable to store your song. Here’s how…\n\nSetting a Global Variable\n\n\nDrag the set variable block out of the Variables palette and into the scripting area.\n\n\nIn the first input slot, select the name of your global variable by clicking the triangle (▼) to open the menu.\n\n\nDrag the list block with your song pitches into the second input slot.\n\n\nClick the set variable block to run it.\n\n\nNotice that a watcher containing the pitches to your song appears on the Snap! stage. \n\n\n\n\n\nUse your global variable as the input to your play song block, and make sure that it works. \n\n\nCreate another global variable and make it store a different song. \n\n\nTry out your second variable in your play song block, and check that it works too. \n\n\nYour global variables will appear in watchers on the Snap! stage. You can use the  and  blocks to control whether your variables show on the stage. Try showing and hiding your song variables. \n\nRecall that you can also show or hide a watcher by using its checkbox in the palette on the left of the Snap! window.\n\n\n\n\n\n\n\n\n\n\n\n\nFor example…\n\nYou can use variables to store pieces of a song and then snap several play song blocks together to play the same parts of a song more than once. Try building a more complicated song that way.\n\n\n\n\n\n\nIn this activity, you stored lists of pitches in variables and used your play song block to play them."
  },
  {
    "objectID": "lab-5/extension/08-pitch-beat.html",
    "href": "lab-5/extension/08-pitch-beat.html",
    "title": "Page 8: Songs with Pitches and Beats",
    "section": "",
    "text": "Consider that students don’t always have to download a new XML; they could just import blocks into existing projects. –MF\n\n\nIn this activity, you will learn to store and play songs with both pitch and length of each note.\n\n\nSo far, you’ve been using a play song block that only lets you control the pitch of each note (by giving it a list of pitches as input). The number of beats was the same based on whatever you typed into the play ♪ block inside your play song block (for example, 0.5 in the image below). \n\n\nYou can use a table to store the data for every note and then use play song with pitches and beats, which expects music data in a table, to play the song. Each item in the list below is a new block: . It looks like the play ♪ command, but it’s a reporter that reports the pitch and beat.   \n\n\n\nThe introduction of an ADT that’s used throughout this activity can’t be inside a hint inside a yellow “optional” box! Also, they’ve seen abstract data types before, no? If so, there should be a reference back to their introduction. If this is their introduction, it needs much more explicit calling out as a Big Idea. –bh 3/3/22\n\n\nWe’ve agreed not to teach ADTs at all in this course. We are only using them here (with the option to learn more). You can reopen this decision if you like, of course, but that has been the agreement so far. –MF, 3/6/22\n\n\n\n\nHow does the play song with pitches and beats block work?\n\n\n\nThis block takes a table of pitch and beat values as input, and for each note in the song, it plays the pitch and beat values for that note: \n\n\nWhich part is the song and which part is the ♪?\n\n\n\n\n\nThe data about each note is loaded in to a table using the ♪ pitch beats block, which takes a pitch and number of beats as input and reports a list with those two values:  \n\nHow is the data loaded into a table with the ♪ pitch beats block?\n\n\n\n\n\n\nEach note (♪) in the song now has both pitch and beat information, and play ♪ needs to receive those data in separate input slots. The  and  blocks each take a note (♪) as input and report only one piece of information to the play ♪ block.  \n\n\nSo, play song with pitches and beats takes a table of song data with pitches and beats as input (song), and it plays each note (♪) at the specified pitch for the specified number of beats. \n\n\n\n\n\nMARY TODO: I need to do add this block to the previous XML projects and give it help text. When I do, I should take it from the MARIO MAPPED EXMAPLE because that version has the help text as a comment on the hat block. –MF, 2/27/22\n\n\nMARY TODO: The original ‘Mary Had a Little Lamb’ (MHALL) XML has no extra sound blocks hidden in it. And both the map MHALL and map TWINKLE don’t either and also they might need help text on the play song block. Also I reminded students how to put help text on a block in 2.1.5#6, but perhaps we should on page 2.1.3 between #4 and #5 also… –MF, 2/27/22\n\n\n\n\n\nOpen this Song Player - Pitches and Beats project, and save it to your account.\n\n\n\nYou learned how to create a global variable in Lab 2 Page 2: Keeping Score with Global Variables.\n\nCreate a new global variable to store a song with both pitch and beat information.\n\n\nUse the  reporter to input each note in your list. \n\n\nPlay your song by dragging your new variable (with both pitch and beat data) into the input slot of the play song with pitches and beats block and clicking it.\n\n\nFix any problems with your project.\n\n\n\n\n\n\n\n\n\nBuild another song with pitch and beat information, store it in another global variable, and play that using the play song with pitches and beats block also.\n\n\n\n\nIn this activity, you learned how to create a table of song data containing both pitch and length data."
  },
  {
    "objectID": "lab-5/extension/07-song-mapper.html",
    "href": "lab-5/extension/07-song-mapper.html",
    "title": "Page 7: Song Mapper",
    "section": "",
    "text": "MARY TODO: add a reminder about how the blank in the functional input to MAP works. –MF, 2/27/22\n\n\nIn this activity, you will use the map block to transpose (shift) all the pitches in your song.\n\n\n\nPamela, I debated whether to teach the ADT first so they can traverse a 2D list or to show them how to use MAP to transpose first. I went with MAP first and letting 2D lists/ADTs be a later optional page (perhaps not even to be written now or perhaps just a “Take It Further” on the last page) since the goal of the course is functional, and MAP would align with that. There is no real need to teach ADTs although the context does naturally inspire it. –MF, 2/12/22\n\n\n\n\nWhen transposing a song, it’s especially important not to call MIDI note numbers “pitch.” The actual pitches are in a geometric progression, not a linear one, and when you transpose by n steps you’re actually multiplying the pitches by ()^n. –bh 3/3/22\n\n\nI agree to rename the variable for next year. –MF, 3/6/22\n\n\n\nAnother advantage of using a list to store your notes is that you can use higher order functions to process your list. You can use map to play a song higher or lower than the original pitches. \n\n\nIf you store the list of pitches in a variable, you can use play song together with map to play the same song several times in different ways.   \n\n\n\n\n Open this Mary Had a Little Lamb map example. Click each block to: set the variable, play the song, and then play the transposed (shifted) song.\n\n\nTry changing the shift (the second input to the + function in the map block) from 3 to some other integer. (You can make it any integer—positive or negative—but if it’s too high or low, you won’t be able to hear the song).\n\n\n\n\nDo they know the word “apply” in this sense? -bh\n\nSee 1.4.4. –MF, 3/6/22\n\n\n\nThe map block takes two inputs: a function (in this case ) and a list, applies the function to each item in the list, and reports a new list of the results.\n\n\n\nRecall, a function that takes a function as input (like map) is called a higher order function.\n\n\n\n\n\nOpen this Twinkle Twinkle Little Star map example, and play the song.\n\n\nRemember, you can turn on Visible Stepping () to see which block is running as it runs.\n\n\nModify this song by adding additional play song blocks, changing the shift values in the map blocks, or changing the pitches in the song.\n\n\n\n\n\n\n\n\n\n\n\n“Your latest project” should be more specific. -bh 3/3/22\n\nOpen your latest project in Snap!, and use map and play song together with one of the variables that you used to store your pitches to make your song more complex.\n\n\nAdd additional variables to store different verses, and create more interesting music.\n\n\nI’m not sure what this bullet (“additional variables”) is suggesting I do. Add more verses? -pf 3/6/22\n\nBetter? –MF, 3/7/22\n\n\n\nIn this activity, you changed the pitches by adding or subtracting, but you could also multiply or divide. Try it and see what happens!\n\nYou can pull the map block out of the play song with pitches and beats block temporarily and then click it to see what values it reports.\n\n\n\n\n\nIn this activity, you used the higher order function map to transpose lists of pitches stored in variables and create more complex music."
  },
  {
    "objectID": "lab-5/extension/09-map-pitch-beat.html",
    "href": "lab-5/extension/09-map-pitch-beat.html",
    "title": "Page 9: Mapping over Pitches and Beats",
    "section": "",
    "text": "In this activity, you will learn how to transpose data in a song that is stored in a table.\n\n\nYou’ve learned how to use map to transpose (shift) all the pitch values in a song where each note plays for the same length, and you’ve learned how to use a table to store both pitch and beat values for the notes in a song. You can also transpose the pitch values stored in a table.\n\nNeeds alt-title text. –MF, 2/27/22\n\n\n\n\n This code is a bit complicated. Notice that it plays a version of Mario Theme that has gone through the map block. So the question is: What does this map block do?\n\n\n\nObviously, this whole page a bit of a reach, but I feel like the question will arise for some kids of how to do this, and so I want to offer something for them (even if they just read it on their own time). In the TG, this will be listed as optional. Any suggestions for improving this presentation? –MF, 2/27/22\n\n\nYeah, this is a bit of a doozy, especially because they really should have read the yellow box on the previous page to understand the ADT selectors. I definitely think it should be optional, as you say it is. Maybe you can make sure they’ve read that yellow box, or repeat all/parts of it here? -pf 3/6/22\n\n\nI’ve added a first problem on this page about going back and reading that. Sufficient to close this comment, or should we discuss this further? –MF, 3/7/22\n\n\n\nRecall that play song with pitches and beats expects a table of song data as input, map works through every item in a list, and every item in the table of pitches and beats is one note. So, map applies a function to every note in the Mario Theme and outputs a table of notes (pairs of pitches and beats).  → \n\n\nIn order for map to output a table of pitches and beats, it needs to apply a function that outputs pairs of pitches and beats. So the code needs a structure like this: \n\n\nWhat function outputs pitches and beats? The  block. So the code needs a structure like this:\n\nNeeds alt-title text. –MF, 2/27/22\n\n\n\n\nBut remember that the inputs that end up in the blank spots of the function in the map block each time it applies the function are the items in the input list, which in this case are the notes (pitches and beats from Mario Theme (with beats)).\n\n\nSo, to get a beats value in the beats slot, we need to use the beats from ♪ block, which takes a note (with a pitch and a beat) and reports just the beat.\n\nNeeds alt-title text. –MF, 2/27/22\n\n\n\n\nAnd to get a pitch value in the pitch slot, we need to use the pitches from ♪ block, and we need to add our shift value to do the transpose.\n\nNeeds alt-title text. (copy from above once written) –MF, 2/27/22\n\n\n\n\n\n\nGo back to the previous activity page, open all the links in the box labeled “How does the play song with pitches and beats block work?”, and read all the information included there. Before moving on, discuss any questions you have about how that block works.\n\n\n Read through the description above again, and discuss how mapping over a table takes a song (with pitch and beat data) as input and reports a song with the pitches transposed (shifted). Explain it in your own words.\n\n\nOpen your “Song Player - Pitches and Beats” Snap! project.\n\n\nUse the structure of the code shown above as a guide, and transpose one of your songs.\n\n\n\nThey don’t need a hint. All they’re asked to do is copy your code but with a different song substituted. For them to understand the code may be hard, but the hint doesn’t help with that, and it’s not required of them. Having a hint will just make them worry that they’re missing something. –bh 3/3/22\n\n\nI included this here so they don’t have to scroll around to find it. If the are looking for a hint, it’s because scrolling up didn’t work somehow. Feel free to suggest a tweak, but that’s the idea behind having it. –MF, 3/6/22\n\n\n\nNeed a hint?\n\n\n\nYour code should look like this but with your own song variable in place of Mario Theme (with beats) and a different shift value (instead of 5).\n\nNeeds alt-title text. (copy from above once written) –MF, 2/27/22\n\n\n\n\n\n\n\nCreate a longer song by playing different versions of the same song at different pitches.\n\n\nExample: Mario Theme Mapped\n\n\nTip: Try shifts like 1, 4, 7 and see which sound good to you. What about other shifts?\n\n\n\n\n\n\n\n\n\n\n\nOK, cut for now, but left for possible discussion. I don’t disagree with any of this; I was trying to get at “Why is this so complicated? Can we do this an easier way?” and empower students: “If you have an idea, try it!” But I guess it’s not as empowering to say “try it” i this case… –MF, 3/6/22\n\n\nI don’t understand why this problem is here in particular. It’s something that could be asked all of the zillion places in which this curriculum shows how to do something. Do you have in mind a particular thing you think they’ll try that won’t work? –bh 3/3/22\n\n\nDo you have an idea for a different way to transpose a song that has both pitch and beat information? Try to build it. If it works, explain how it works to someone else. If it doesn’t work, talk with someone else and figure out why it doesn’t work.\n\n\nI’m noticing a bunch of these exhortations in yellow boxes in the curriculum. I’m not a fan. This particular one is especially bad because it tells students, “you think you know another way, but it’s not going to work, ha ha, you’re dumb.” I would go through the whole curriculum, find all of these, and remove them. –bh 3/3/22\n\nUnderstanding why code you thought would work doesn’t actually work is an important part of programming.\n\n\n\n\n\nIn this activity, you shifted the pitches and left the beats alone, but you could use map to change the beats in some way. Try it!\n\n\n\n\nIn this activity, you learned how to use map in a more complicated situation in which you want to transform only part of an item with multiple parts."
  },
  {
    "objectID": "lab-5/03-programming-styles.html",
    "href": "lab-5/03-programming-styles.html",
    "title": "Page 3: Programming Styles",
    "section": "",
    "text": "In this activity, you’ll learn about the difference between programming by nesting reporter blocks inside each other and programming by stacking command blocks top to bottom.\n\n\nCommands Versus Reporters\n\nBefore this lab, you nested blocks inside each other so that the output reported by one block became the input to another. That style of programming is known as functional programming, and in Snap!, it uses reporter blocks. A reporter computes a value and reports it (to you or to other blocks). \n\n\nIn this lab, you’ve been stacking blocks that carry out actions, such as playing a note. This style of programming is called imperative programming. In Snap!, imperative programming uses command blocks. A command tells the computer to do something, (play a sound, draw, move, change something, etc.). Commands have effects. \n\n\nThe shapes of the blocks go with the shapes of the places where you can use them. Reporters are round, and they go into round slots in a block. Commands are more rectangular, and they have a tab at the bottom that fits into the gap at the top of another command block. Snap! won’t let you put a reporter in a stack of commands or put a command in a round slot.\n\n\n\nYou learned about reporters in Lab 2 Page 4: Making Your Own Block.\n\n\nA reporter block does a calculation and reports the result. Reporters have an oval shape.    \n\n\nA predicate is a special kind of reporter that asks a true/false question and reports either true or false. Predicates have a hexagon shape.   \n\n\nA command block tells the computer to do something without reporting a value. Commands have a puzzle shape and can be snapped together one after another.    \n\n\nUnlike reporters, a command block doesn’t report anything, so you can’t use its result as the input to another block—its result is an action, not a value!\n\n\n\n\nCreating a Command Block\n\nYou’ve created a reporter block before. You can create a command block in almost exactly the same way.\n\n\n\n\n\nIf your project isn’t open already, log in to Snap!, and open your “Song Player” project.\n\n\nCreate a new command block called mystery song.\n\n\nRight-click in an empty spot in the Scripts area and choose “make a block…”  \n\n\nChoose the palette for your block: Sound.\n\n\nType the title (name) for your block: mystery song.\n\n\nSelect the shape for your block: Command.\n\n\nClick “OK.”\n\n\n\n\n\n\n\n\nWhen you create a reporter, the block editor opens with  attached to the hat block, and whatever input you give to report will be the value reported by the new reporter. When you create a command, the block editor opens with only the hat block, and the blocks attached below it will run (one at a time) when the new command is run.\n\n\n\n\n: Abstraction\n\nHiding away the details of how code works (such as by moving it inside a new block) is a form of abstraction.\n\n\n\nInside the mystery song block, either build a new song for someone else to guess or drag in a song you have already created and attach it to the mystery song hat block.\n\n\nNote to Mary for later: An animation of dragging in a song would be nice here. –MF, 2/9/22\n\n\nPlay your mystery song for someone else, and see if they can guess what it is. Then guess someone else’s song.\n\nYou can find your newly created block at the end of the Sound blocks in the sidebar, and drag it out to the scripting area.\n\n\n\n\n\n\n\n\n\n\n\n\nCreate additional command blocks with different mystery songs.\n\n\n\n\nIn this activity, you created a command block to store a sequence of commands."
  },
  {
    "objectID": "lab-5/01-playing-notes.html",
    "href": "lab-5/01-playing-notes.html",
    "title": "Page 1: Playing Notes",
    "section": "",
    "text": "In this activity, you’ll teach the computer to play some simple songs and move those songs up and down the musical scale.\n\n\n\n\n\n\n\n\nA command block tells the computer to do something without reporting a value.\n\n\n\nOpen this Song Player project, and save it to your account. It includes a  command block that takes two inputs: a note to play (pitch) and how long to play it (beats).\n\n\n\nThe pitch tells the computer which note to play. It can be any whole number from 0 to 127. The number 60 represents the note known as middle C. If you click the triangle (▼), a piano menu will open, and you can hear the note you are selecting. \n\n\nThe number of beats tells the computer how long to play the note. By default, Snap! plays 60 beats per minute (bpm), so playing a note for 1 beat takes 1 second. You can change the number of beats per minute by using .\n\n\n\nChange the inputs to the play ♪ block and then click it, and then change the inputs and click it again to see how the note changes.\n\n\nTip: Right click a block and select “help” to see an explanation of how to use it.\n\n\nAttach several play ♪ blocks together one after another to begin creating a song.\n\n\nYou can use  to create breaks in your song.\n\n\nYou can use  block to repeat any command (or group of commands) a specific number of times. Any code you put inside the C-shape of the repeat block will be repeated.\n\n\nYou can also use  to change the instrument,  to change the tempo (beats per minute), or  to change the volume. Wherever you put one of these blocks, the sound will change from that point on.\n\n\n\nHere are two examples:\n\n\nMary Had a Little Lamb\n\n\nSuper Mario Theme"
  },
  {
    "objectID": "lab-3/index.html",
    "href": "lab-3/index.html",
    "title": "Lab 3: Number Guessing Game",
    "section": "",
    "text": "In this lab, you will use create a game where the player’s objective is to guess a number that the game randomly generates. You will use variables to store information for the game and learn how to debug in Snap!"
  },
  {
    "objectID": "lab-3/2-checking-player-guess.html",
    "href": "lab-3/2-checking-player-guess.html",
    "title": "Page 2: Checking the Player’s Guess",
    "section": "",
    "text": "On this page, you’ll continue to develop your number guessing game to accept player guesses until the player guesses correctly.\n\n\n\n\nYou’ll want the computer to ask players to guess again and again until they guess correctly. To do that, you will use the  block. Repeat until is a loop (just like forever) but also a conditional (like if and if else). It repeats until a certain condition is met. For this program, the code should repeat until the player’s answer equals the secret number.\n\n\n\nYou’ve seen conditionals on Lab 2 Page 7: Adding Variety to Gossip\n\n\n\n\n\n\nUse repeat until to ask the player () to guess the secret number until their  equals the secret number.\n\n\n\n\nDrag the secret number variable out of the variables palette to use it.\n\n\nThe ask and answer blocks go together. If you use ask to ask a question, the user’s answer will be reported by answer.\n\n\n\n\n\n\n\n\nAAP-2.B\n\n\nAfter the player guesses the secret number, make the computer congratulate the player.\n\n\nTest and debug. Take turns playing the game, and fix any problems with the code before moving on.\n\n\n\n\nRepeat until makes its decision based on the output of a hexagonal predicate block.\n\n\n: Predicate and Boolean value\n\n  Why is Boolean capitalized? \n\n\nThe word Boolean is capitalized because it’s named after a person, George Boole, who invented the branch of mathematics dealing with Boolean operations (such as and, or, and not).\n\n\n\n\nA predicate is a hexagon-shaped reporter that asks a true/false question such as these examples: \n\n\nPredicates report a Boolean value (either  or ).\n\n\n\nPredicates fit into a hexagonal input slots of conditionals, such as in  and . Predicates help conditionals decide when to do something.\n\n\n\nThe if and if-else blocks are called conditionals because they control the code based on a true-or-false condition.\n\n\nClick for examples of predicates being used inside conditionals.\n\n\n\n\n\n\n\n\nWhen the computer congratulates the player for guessing correctly, have the computer say the number. For example, it might say, “You guessed it! My secret number was 7.”\n\n\n\nUse join to merge the text “You guessed it! My secret number was” with the value of the secret number variable."
  },
  {
    "objectID": "lab-3/1-number-guessing-game.html",
    "href": "lab-3/1-number-guessing-game.html",
    "title": "Page 1: Starting a Number Guessing Game",
    "section": "",
    "text": "In this lab, you will use variables to store information.\n\n\nOn this page, you will begin to develop a number guessing game that uses a variable to keep track of a secret number.\n\n\n\n\n\n\n\n“L3-NumberGuessing”\n\n\n\nStart building a new command block (the kind shaped like a puzzle piece) called number guessing game that will contain the code for the game. Leave the Block Editor open.\n\n\n\n\nIn a number-guessing game, the player tries to guess the computer’s secret number. The computer needs a way to store the secret number in a variable so that it can compare it to the player’s guesses.\n\n\nA variable is like a labeled box that can hold one value at a time, such as one word, one costume, or one list (which can contain many things). You can look at what’s inside as many times as you want.\n\n\n\n\nCreate a variable called secret number to store the number that the player will try to guess (instructions below).\n\nMaking a Variable\n\n\nClick on make a variable in the Variables palette.\n\n\nName the variable secret number.\n\n\nLater, you can use the variable by dragging it out of where it appears at the top of the variables palatte (the way you drag an input) and placing it where you need it in your code.\n\n\n\n\nAAP-1.A, AAP-3.E\n\nUse  to set the initial value of secret number to a random number from 1 to 10. The set menu lets you select which variable to set. \n\n\n\n\n\n\nIn algebra, a variable is sometimes used for something whose value you don’t know yet, and the goal is to find out its value. In programming you decide the values of variables.\n\n\n\nWhen you assign a value to a variable, the variable holds that value, not where it came from. For example, if apples = 2 and you , then bananas will hold the value 2 and have no memory of it having come from apples. This is why\na ← a * 2\nmeans something. (Suppose a = 8. First compute the value of\na * 2\n, namely 16, and then replace the old value of a with 16). Up to now, the only variables you’ve used are input variables, and you never assign a value to an input because the value is given by the code that calls it. But a script variable won’t have a value until you give it one with set."
  },
  {
    "objectID": "lab-3/3-debugging-extending.html",
    "href": "lab-3/3-debugging-extending.html",
    "title": "Page 3: Debugging and Extending Your Number Guessing Game",
    "section": "",
    "text": "On this page, you will practice debugging, and you will make the computer give players hints."
  },
  {
    "objectID": "lab-3/3-debugging-extending.html#extending-the-program-with-more-specific-responses",
    "href": "lab-3/3-debugging-extending.html#extending-the-program-with-more-specific-responses",
    "title": "Page 3: Debugging and Extending Your Number Guessing Game",
    "section": "Extending the Program with More Specific Responses",
    "text": "Extending the Program with More Specific Responses\n\n\n\nUse more conditional blocks and predicates to make the computer tell the player whether a guess is too big or too small: “That’s too big. Try again.”  Where in the code should these conditionals go?\n\n\nTest and debug. Play your game enough to see if it works the way you want. It should:\n\n\nask the player to guess its secret number;\n\n\nsay whether a wrong guess is too big or too small, and then ask again;\n\n\ncongratulate the player for a correct answer.\n\n\n\n\n\n\n\n\n\nRight now, the script always picks a number between 1 and 10. At the start of the game, ask the player what the maximum number should be, and make your program choose a number between 1 and maximum.\n\n\nUse another script variable to keep track of how many guesses the player makes before getting the right number. When the player guesses the secret number, say how many guesses it took.\n\n\n\n\n\n\nFind a way to vary the language a bit so that your program does not always repeat exactly the same words in the same situation. For example, if a player guesses too high twice in a row, the program could say “That’s still too big. Try another number.”"
  }
]